{"version":3,"names":["RefresherContent","constructor","hostRef","this","customHTMLEnabled","config","get","ENABLE_HTML_CONTENT_DEFAULT","pullingIcon","undefined","pullingText","refreshingSpinner","refreshingText","componentWillLoad","hasRubberBandScrolling","supportsRubberBandScrolling","mode","getIonMode","overflowRefresher","arrowDown","renderPullingText","h","class","innerHTML","sanitizeDOMString","renderRefreshingText","render","hasSpinner","SPINNERS","Host","key","name","paused","icon","caretBackSharp","lazy"],"sources":["node_modules/@ionic/core/dist/collection/components/refresher-content/refresher-content.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { ENABLE_HTML_CONTENT_DEFAULT } from \"../../utils/config\";\nimport { sanitizeDOMString } from \"../../utils/sanitization/index\";\nimport { arrowDown, caretBackSharp } from \"ionicons/icons\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { supportsRubberBandScrolling } from \"../refresher/refresher.utils\";\nimport { SPINNERS } from \"../spinner/spinner-configs\";\nexport class RefresherContent {\n    constructor() {\n        this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n        this.pullingIcon = undefined;\n        this.pullingText = undefined;\n        this.refreshingSpinner = undefined;\n        this.refreshingText = undefined;\n    }\n    componentWillLoad() {\n        if (this.pullingIcon === undefined) {\n            /**\n             * The native iOS refresher uses a spinner instead of\n             * an icon, so we need to see if this device supports\n             * the native iOS refresher.\n             */\n            const hasRubberBandScrolling = supportsRubberBandScrolling();\n            const mode = getIonMode(this);\n            const overflowRefresher = hasRubberBandScrolling ? 'lines' : arrowDown;\n            this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && hasRubberBandScrolling ? config.get('spinner', overflowRefresher) : 'circular');\n        }\n        if (this.refreshingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'circular'));\n        }\n    }\n    renderPullingText() {\n        const { customHTMLEnabled, pullingText } = this;\n        if (customHTMLEnabled) {\n            return h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(pullingText) });\n        }\n        return h(\"div\", { class: \"refresher-pulling-text\" }, pullingText);\n    }\n    renderRefreshingText() {\n        const { customHTMLEnabled, refreshingText } = this;\n        if (customHTMLEnabled) {\n            return h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(refreshingText) });\n        }\n        return h(\"div\", { class: \"refresher-refreshing-text\" }, refreshingText);\n    }\n    render() {\n        const pullingIcon = this.pullingIcon;\n        const hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\n        const mode = getIonMode(this);\n        return (h(Host, { key: '1bec5b4da221c69d856f3f5ddf40f2e03ebf2a4c', class: mode }, h(\"div\", { key: '4fcc526c4f1881e9368d9cd16bd7030919bd3841', class: \"refresher-pulling\" }, this.pullingIcon && hasSpinner && (h(\"div\", { key: 'a4e9e2e12c2d7faefc8303ec8c021f999ddf308e', class: \"refresher-pulling-icon\" }, h(\"div\", { key: '5a2d215feb7fb4b64d540d3a65c0f24b415a2433', class: \"spinner-arrow-container\" }, h(\"ion-spinner\", { key: 'abef2621d671ac6ff0abac43a702cbd825b7f127', name: this.pullingIcon, paused: true }), mode === 'md' && this.pullingIcon === 'circular' && (h(\"div\", { key: '30087d672c3780672a05874cd93cd099b2855462', class: \"arrow-container\" }, h(\"ion-icon\", { key: '5e30333dee469aec0d8efc8c4e6dabb619c6f363', icon: caretBackSharp, \"aria-hidden\": \"true\" })))))), this.pullingIcon && !hasSpinner && (h(\"div\", { key: '48fe72b5ce8ded633c6ee799cebb520b9c8be528', class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { key: 'd8dfd5d42056b1c0a436c5006affb255407816c0', icon: this.pullingIcon, lazy: false, \"aria-hidden\": \"true\" }))), this.pullingText !== undefined && this.renderPullingText()), h(\"div\", { key: 'c2cbfb94f157c82601ffe7bb815ff82ebc7c0a49', class: \"refresher-refreshing\" }, this.refreshingSpinner && (h(\"div\", { key: '17f3ebe6a31768d5e389f45a2c12f68600185db9', class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { key: 'e8e61f8d7189c9939bba184201c9509d1d5b0fad', name: this.refreshingSpinner }))), this.refreshingText !== undefined && this.renderRefreshingText())));\n    }\n    static get is() { return \"ion-refresher-content\"; }\n    static get properties() {\n        return {\n            \"pullingIcon\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"SpinnerTypes | string | null\",\n                    \"resolved\": \"null | string | undefined\",\n                    \"references\": {\n                        \"SpinnerTypes\": {\n                            \"location\": \"import\",\n                            \"path\": \"../spinner/spinner-configs\",\n                            \"id\": \"src/components/spinner/spinner-configs.ts::SpinnerTypes\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A static icon or a spinner to display when you begin to pull down.\\nA spinner name can be provided to gradually show tick marks\\nwhen pulling down on iOS devices.\"\n                },\n                \"attribute\": \"pulling-icon\",\n                \"reflect\": false\n            },\n            \"pullingText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | IonicSafeString\",\n                    \"resolved\": \"IonicSafeString | string | undefined\",\n                    \"references\": {\n                        \"IonicSafeString\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/sanitization\",\n                            \"id\": \"src/utils/sanitization/index.ts::IonicSafeString\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The text you want to display when you begin to pull down.\\n`pullingText` can accept either plaintext or HTML as a string.\\nTo display characters normally reserved for HTML, they\\nmust be escaped. For example `<Ionic>` would become\\n`&lt;Ionic&gt;`\\n\\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\\n\\nContent is parsed as plaintext by default.\\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\\nbefore custom HTML can be used.\"\n                },\n                \"attribute\": \"pulling-text\",\n                \"reflect\": false\n            },\n            \"refreshingSpinner\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"SpinnerTypes | null\",\n                    \"resolved\": \"\\\"bubbles\\\" | \\\"circles\\\" | \\\"circular\\\" | \\\"crescent\\\" | \\\"dots\\\" | \\\"lines\\\" | \\\"lines-sharp\\\" | \\\"lines-sharp-small\\\" | \\\"lines-small\\\" | null | undefined\",\n                    \"references\": {\n                        \"SpinnerTypes\": {\n                            \"location\": \"import\",\n                            \"path\": \"../spinner/spinner-configs\",\n                            \"id\": \"src/components/spinner/spinner-configs.ts::SpinnerTypes\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"An animated SVG spinner that shows when refreshing begins\"\n                },\n                \"attribute\": \"refreshing-spinner\",\n                \"reflect\": false\n            },\n            \"refreshingText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | IonicSafeString\",\n                    \"resolved\": \"IonicSafeString | string | undefined\",\n                    \"references\": {\n                        \"IonicSafeString\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/sanitization\",\n                            \"id\": \"src/utils/sanitization/index.ts::IonicSafeString\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The text you want to display when performing a refresh.\\n`refreshingText` can accept either plaintext or HTML as a string.\\nTo display characters normally reserved for HTML, they\\nmust be escaped. For example `<Ionic>` would become\\n`&lt;Ionic&gt;`\\n\\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\\n\\nContent is parsed as plaintext by default.\\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\\nbefore custom HTML can be used.\"\n                },\n                \"attribute\": \"refreshing-text\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n}\n"],"mappings":"gVAWaA,EAAgB,MACzB,WAAAC,CAAAC,G,UACIC,KAAKC,kBAAoBC,EAAOC,IAAI,4BAA6BC,GACjEJ,KAAKK,YAAcC,UACnBN,KAAKO,YAAcD,UACnBN,KAAKQ,kBAAoBF,UACzBN,KAAKS,eAAiBH,S,CAE1B,iBAAAI,GACI,GAAIV,KAAKK,cAAgBC,UAAW,CAMhC,MAAMK,EAAyBC,IAC/B,MAAMC,EAAOC,EAAWd,MACxB,MAAMe,EAAoBJ,EAAyB,QAAUK,EAC7DhB,KAAKK,YAAcH,EAAOC,IAAI,iBAAkBU,IAAS,OAASF,EAAyBT,EAAOC,IAAI,UAAWY,GAAqB,W,CAE1I,GAAIf,KAAKQ,oBAAsBF,UAAW,CACtC,MAAMO,EAAOC,EAAWd,MACxBA,KAAKQ,kBAAoBN,EAAOC,IAAI,oBAAqBD,EAAOC,IAAI,UAAWU,IAAS,MAAQ,QAAU,Y,EAGlH,iBAAAI,GACI,MAAMhB,kBAAEA,EAAiBM,YAAEA,GAAgBP,KAC3C,GAAIC,EAAmB,CACnB,OAAOiB,EAAE,MAAO,CAAEC,MAAO,yBAA0BC,UAAWC,EAAkBd,I,CAEpF,OAAOW,EAAE,MAAO,CAAEC,MAAO,0BAA4BZ,E,CAEzD,oBAAAe,GACI,MAAMrB,kBAAEA,EAAiBQ,eAAEA,GAAmBT,KAC9C,GAAIC,EAAmB,CACnB,OAAOiB,EAAE,MAAO,CAAEC,MAAO,4BAA6BC,UAAWC,EAAkBZ,I,CAEvF,OAAOS,EAAE,MAAO,CAAEC,MAAO,6BAA+BV,E,CAE5D,MAAAc,GACI,MAAMlB,EAAcL,KAAKK,YACzB,MAAMmB,EAAanB,GAAe,MAAQoB,EAASpB,KAAiBC,UACpE,MAAMO,EAAOC,EAAWd,MACxB,OAAQkB,EAAEQ,EAAM,CAAEC,IAAK,2CAA4CR,MAAON,GAAQK,EAAE,MAAO,CAAES,IAAK,2CAA4CR,MAAO,qBAAuBnB,KAAKK,aAAemB,GAAeN,EAAE,MAAO,CAAES,IAAK,2CAA4CR,MAAO,0BAA4BD,EAAE,MAAO,CAAES,IAAK,2CAA4CR,MAAO,2BAA6BD,EAAE,cAAe,CAAES,IAAK,2CAA4CC,KAAM5B,KAAKK,YAAawB,OAAQ,OAAShB,IAAS,MAAQb,KAAKK,cAAgB,YAAea,EAAE,MAAO,CAAES,IAAK,2CAA4CR,MAAO,mBAAqBD,EAAE,WAAY,CAAES,IAAK,2CAA4CG,KAAMC,EAAgB,cAAe,YAAgB/B,KAAKK,cAAgBmB,GAAeN,EAAE,MAAO,CAAES,IAAK,2CAA4CR,MAAO,0BAA4BD,EAAE,WAAY,CAAES,IAAK,2CAA4CG,KAAM9B,KAAKK,YAAa2B,KAAM,MAAO,cAAe,UAAahC,KAAKO,cAAgBD,WAAaN,KAAKiB,qBAAsBC,EAAE,MAAO,CAAES,IAAK,2CAA4CR,MAAO,wBAA0BnB,KAAKQ,mBAAsBU,EAAE,MAAO,CAAES,IAAK,2CAA4CR,MAAO,6BAA+BD,EAAE,cAAe,CAAES,IAAK,2CAA4CC,KAAM5B,KAAKQ,qBAAwBR,KAAKS,iBAAmBH,WAAaN,KAAKsB,wB"}