{"version":3,"names":["appCss","IonAppStyle0","App","componentDidLoad","rIC","async","isHybrid","isPlatform","window","config","getBoolean","import","then","module","startTapClick","startStatusTap","needInputShims","platform","startInputShims","hardwareBackButtonModule","supportsHardwareBackButtonEvents","shouldUseCloseWatcher","startHardwareBackButton","printIonWarning","blockHardwareBackButton","startKeyboardAssist","this","focusVisible","startFocusVisible","setFocus","elements","render","mode","getIonMode","h","Host","key","class","needsShimsIOS","isAndroidMobileWeb","callback","requestIdleCallback","setTimeout","SIZE_TO_MEDIA","xs","sm","md","lg","xl","matchBreakpoint","breakpoint","undefined","matchMedia","mediaQuery","matches","colCss","IonColStyle0","win","SUPPORTS_VARS","CSS","supports","BREAKPOINTS","Col","constructor","hostRef","offset","offsetXs","offsetSm","offsetMd","offsetLg","offsetXl","pull","pullXs","pullSm","pullMd","pullLg","pullXl","push","pushXs","pushSm","pushMd","pushLg","pushXl","size","sizeXs","sizeSm","sizeMd","sizeLg","sizeXl","onResize","forceUpdate","getColumns","property","matched","columns","charAt","toUpperCase","slice","calculateSize","colSize","flex","width","calculatePosition","modifier","amount","calculateOffset","isRTL","calculatePull","calculatePush","document","dir","style","Object","assign","contentCss","IonContentStyle0","Content","watchDog","isScrolling","lastScroll","queued","cTop","cBottom","isMainContent","resizeTimeout","tabsElement","detail","scrollTop","scrollLeft","type","event","startX","startY","startTime","currentX","currentY","velocityX","velocityY","deltaX","deltaY","currentTime","data","color","fullscreen","fixedSlotPlacement","forceOverscroll","scrollX","scrollY","scrollEvents","connectedCallback","el","closest","hasLazyBuild","closestTabs","tabsLoadCallback","resize","addEventListener","disconnectedCallback","onScrollEnd","removeEventListener","clearTimeout","offsetParent","shouldForceOverscroll","readTask","readDimensions","page","getPageElement","top","Math","max","offsetTop","bottom","offsetHeight","dirty","onScroll","ev","timeStamp","Date","now","shouldStart","onScrollStart","ts","updateScrollDetail","scrollEl","ionScroll","emit","getScrollElement","Promise","resolve","componentOnReady","getBackgroundElement","backgroundContentEl","scrollToTop","duration","scrollToPoint","scrollToBottom","y","scrollHeight","clientHeight","scrollByPoint","x","promise","r","fromY","fromX","step","linearTime","min","easedT","pow","floor","requestAnimationFrame","ionScrollStart","clearInterval","setInterval","ionScrollEnd","rtl","transitionShadow","role","createColorClasses","hostContext","overscroll","ref","id","part","name","getParentElement","_a","parentElement","parentNode","host","tabs","timestamp","prevX","prevY","prevT","timeDelta","gridCss","IonGridStyle0","Grid","fixed","TRANSITION","cloneElement","tagName","getCachedEl","querySelector","clonedEl","createElement","classList","add","setProperty","body","appendChild","createHeaderIndex","headerEl","toolbars","querySelectorAll","Array","from","map","toolbar","ionTitleEl","background","shadowRoot","innerTitleEl","ionButtonsEl","handleContentScroll","scrollHeaderIndex","contentEl","scale","clamp","nativeRefresher","writeTask","scaleLargeTitles","setToolbarBackgroundOpacity","opacity","collapse","removeProperty","toString","handleToolbarBorderIntersection","mainHeaderIndex","isIntersecting","intersectionRatio","handleToolbarIntersection","intersection","intersectionRect","intersectionArea","height","rootArea","rootBounds","isPageHidden","leftDiff","abs","left","boundingClientRect","rightDiff","right","isPageTransitioning","setHeaderActive","hasValidIntersection","headerIndex","active","remove","removeAttribute","setAttribute","transition","forEach","ionTitle","titleDiv","transform","handleHeaderFade","baseEl","condenseHeader","baseElHeight","fadeStart","distanceToStart","fadeDuration","headerIosCss","IonHeaderIosStyle0","headerMdCss","IonHeaderMdStyle0","Header","inheritedAttributes","setupFadeHeader","contentScrollCallback","translucent","componentWillLoad","inheritAriaAttributes","checkCollapsibleHeader","componentDidUpdate","destroyCollapsibleHeader","hasCondense","hasFade","pageEl","findIonContent","title","setupCondenseHeader","printIonContentErrorMsg","intersectionObserver","disconnect","collapsibleMainHeader","IntersectionObserver","headers","find","header","toolbarIntersection","root","threshold","observe","length","roleType","inputIosCss","IonInputIosStyle0","inputMdCss","IonInputMdStyle0","Input","inputId","inputIds","isComposing","didInputClearOnEdit","onInput","input","target","value","emitInputChange","onChange","emitValueChange","onBlur","hasFocus","focusedValue","ionBlur","onFocus","ionFocus","onKeydown","checkClearOnEdit","onCompositionStart","onCompositionEnd","clearTextInput","clearInput","readonly","disabled","preventDefault","stopPropagation","autocapitalize","autocomplete","autocorrect","autofocus","clearInputIcon","clearOnEdit","counter","counterFormatter","debounce","enterkeyhint","errorText","fill","inputmode","helperText","label","labelPlacement","maxlength","minlength","multiple","pattern","placeholder","required","shape","spellcheck","debounceChanged","ionInput","originalIonInput","debounceEvent","onTypeChange","passwordToggle","valueChanged","nativeInput","getValue","inheritAttributes","slotMutationController","createSlotMutationController","notchController","createNotchController","notchSpacerEl","labelSlot","dispatchEvent","CustomEvent","componentDidRender","calculateNotchWidth","destroy","focus","getInputElement","newValue","ionChange","shouldClearOnEdit","IGNORED_KEYS","pressedIgnoredKey","includes","hasValue","renderHintText","renderCounter","getCounterText","renderBottomContent","hasHintText","hasCounter","renderLabel","hasLabel","renderLabelContainer","hasOutlineFill","inItem","shouldRenderHighlight","defaultClearIcon","closeCircle","closeSharp","clearIconData","hasStartEndSlots","labelShouldFloat","htmlFor","autoCapitalize","autoComplete","autoCorrect","autoFocus","enterKeyHint","inputMode","minLength","maxLength","readOnly","onKeyDown","onCompositionstart","onCompositionend","onPointerDown","onFocusin","onClick","icon","rowCss","IonRowStyle0","Row","titleIosCss","IonTitleIosStyle0","titleMdCss","IonTitleMdStyle0","ToolbarTitle","sizeChanged","emitStyle","getSize","ionStyle","toolbarIosCss","IonToolbarIosStyle0","toolbarMdCss","IonToolbarMdStyle0","Toolbar","childrenStyles","Map","buttons","firstButtons","button","slot","buttonsReversed","reverse","lastButtons","childrenStyle","updatedStyles","newStyles","childStyles","get","hasStyleChange","keys","childKey","set"],"sources":["node_modules/@ionic/core/dist/collection/components/app/app.css?tag=ion-app","node_modules/@ionic/core/dist/collection/components/app/app.js","node_modules/@ionic/core/dist/collection/utils/media.js","node_modules/@ionic/core/dist/collection/components/col/col.css?tag=ion-col&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/col/col.js","node_modules/@ionic/core/dist/collection/components/content/content.css?tag=ion-content&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/content/content.js","node_modules/@ionic/core/dist/collection/components/grid/grid.css?tag=ion-grid&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/grid/grid.js","node_modules/@ionic/core/dist/collection/components/header/header.utils.js","node_modules/@ionic/core/dist/collection/components/header/header.ios.css?tag=ion-header&mode=ios","node_modules/@ionic/core/dist/collection/components/header/header.md.css?tag=ion-header&mode=md","node_modules/@ionic/core/dist/collection/components/header/header.js","node_modules/@ionic/core/dist/collection/components/input/input.ios.css?tag=ion-input&mode=ios&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/input/input.md.css?tag=ion-input&mode=md&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/input/input.js","node_modules/@ionic/core/dist/collection/components/row/row.css?tag=ion-row&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/row/row.js","node_modules/@ionic/core/dist/collection/components/title/title.ios.css?tag=ion-title&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/title/title.md.css?tag=ion-title&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/title/title.js","node_modules/@ionic/core/dist/collection/components/toolbar/toolbar.ios.css?tag=ion-toolbar&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/toolbar/toolbar.md.css?tag=ion-toolbar&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/toolbar/toolbar.js"],"sourcesContent":["html.plt-mobile ion-app {\n  user-select: none;\n}\n\n/**\n * This works around a WebKit issue\n * where user-select: none was causing\n * contenteditable to not be selectable,\n * even though inputs and textareas are selectable.\n */\nhtml.plt-mobile ion-app [contenteditable] {\n  user-select: text;\n}\n\nion-app.force-statusbar-padding {\n  --ion-safe-area-top: 20px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, h } from \"@stencil/core\";\nimport { shouldUseCloseWatcher } from \"../../utils/hardware-back-button\";\nimport { printIonWarning } from \"../../utils/logging/index\";\nimport { isPlatform } from \"../../utils/platform\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class App {\n    componentDidLoad() {\n        if (Build.isBrowser) {\n            rIC(async () => {\n                const isHybrid = isPlatform(window, 'hybrid');\n                if (!config.getBoolean('_testing')) {\n                    import('../../utils/tap-click').then((module) => module.startTapClick(config));\n                }\n                if (config.getBoolean('statusTap', isHybrid)) {\n                    import('../../utils/status-tap').then((module) => module.startStatusTap());\n                }\n                if (config.getBoolean('inputShims', needInputShims())) {\n                    /**\n                     * needInputShims() ensures that only iOS and Android\n                     * platforms proceed into this block.\n                     */\n                    const platform = isPlatform(window, 'ios') ? 'ios' : 'android';\n                    import('../../utils/input-shims/input-shims').then((module) => module.startInputShims(config, platform));\n                }\n                const hardwareBackButtonModule = await import('../../utils/hardware-back-button');\n                const supportsHardwareBackButtonEvents = isHybrid || shouldUseCloseWatcher();\n                if (config.getBoolean('hardwareBackButton', supportsHardwareBackButtonEvents)) {\n                    hardwareBackButtonModule.startHardwareBackButton();\n                }\n                else {\n                    /**\n                     * If an app sets hardwareBackButton: false and experimentalCloseWatcher: true\n                     * then the close watcher will not be used.\n                     */\n                    if (shouldUseCloseWatcher()) {\n                        printIonWarning('experimentalCloseWatcher was set to `true`, but hardwareBackButton was set to `false`. Both config options must be `true` for the Close Watcher API to be used.');\n                    }\n                    hardwareBackButtonModule.blockHardwareBackButton();\n                }\n                if (typeof window !== 'undefined') {\n                    import('../../utils/keyboard/keyboard').then((module) => module.startKeyboardAssist(window));\n                }\n                import('../../utils/focus-visible').then((module) => (this.focusVisible = module.startFocusVisible()));\n            });\n        }\n    }\n    /**\n     * @internal\n     * Used to set focus on an element that uses `ion-focusable`.\n     * Do not use this if focusing the element as a result of a keyboard\n     * event as the focus utility should handle this for us. This method\n     * should be used when we want to programmatically focus an element as\n     * a result of another user action. (Ex: We focus the first element\n     * inside of a popover when the user presents it, but the popover is not always\n     * presented as a result of keyboard action.)\n     */\n    async setFocus(elements) {\n        if (this.focusVisible) {\n            this.focusVisible.setFocus(elements);\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'a562850f242d9d45573e35efdd4bd178254677ef', class: {\n                [mode]: true,\n                'ion-page': true,\n                'force-statusbar-padding': config.getBoolean('_forceStatusbarPadding'),\n            } }));\n    }\n    static get is() { return \"ion-app\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"app.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"app.css\"]\n        };\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"(elements: HTMLElement[]) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"elements\",\n                            \"type\": \"HTMLElement[]\",\n                            \"docs\": \"\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"HTMLElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLElement\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"\",\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": \"Used to set focus on an element that uses `ion-focusable`.\\nDo not use this if focusing the element as a result of a keyboard\\nevent as the focus utility should handle this for us. This method\\nshould be used when we want to programmatically focus an element as\\na result of another user action. (Ex: We focus the first element\\ninside of a popover when the user presents it, but the popover is not always\\npresented as a result of keyboard action.)\"\n                        }]\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n}\nconst needInputShims = () => {\n    /**\n     * iOS always needs input shims\n     */\n    const needsShimsIOS = isPlatform(window, 'ios') && isPlatform(window, 'mobile');\n    if (needsShimsIOS) {\n        return true;\n    }\n    /**\n     * Android only needs input shims when running\n     * in the browser and only if the browser is using the\n     * new Chrome 108+ resize behavior: https://developer.chrome.com/blog/viewport-resize-behavior/\n     */\n    const isAndroidMobileWeb = isPlatform(window, 'android') && isPlatform(window, 'mobileweb');\n    if (isAndroidMobileWeb) {\n        return true;\n    }\n    return false;\n};\nconst rIC = (callback) => {\n    if ('requestIdleCallback' in window) {\n        window.requestIdleCallback(callback);\n    }\n    else {\n        setTimeout(callback, 32);\n    }\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nexport const SIZE_TO_MEDIA = {\n    xs: '(min-width: 0px)',\n    sm: '(min-width: 576px)',\n    md: '(min-width: 768px)',\n    lg: '(min-width: 992px)',\n    xl: '(min-width: 1200px)',\n};\n// Check if the window matches the media query\n// at the breakpoint passed\n// e.g. matchBreakpoint('sm') => true if screen width exceeds 576px\nexport const matchBreakpoint = (breakpoint) => {\n    if (breakpoint === undefined || breakpoint === '') {\n        return true;\n    }\n    if (window.matchMedia) {\n        const mediaQuery = SIZE_TO_MEDIA[breakpoint];\n        return window.matchMedia(mediaQuery).matches;\n    }\n    return false;\n};\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --ion-grid-columns: The number of total Columns in the Grid\n   * @prop --ion-grid-column-padding: Padding for the Column\n   * @prop --ion-grid-column-padding-xs: Padding for the Column on xs screens and up\n   * @prop --ion-grid-column-padding-sm: Padding for the Column on sm screens and up\n   * @prop --ion-grid-column-padding-md: Padding for the Column on md screens and up\n   * @prop --ion-grid-column-padding-lg: Padding for the Column on lg screens and up\n   * @prop --ion-grid-column-padding-xl: Padding for the Column on xl screens and up\n   */\n  -webkit-padding-start: var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));\n  padding-inline-start: var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));\n  -webkit-padding-end: var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));\n  padding-inline-end: var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));\n  padding-top: var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));\n  padding-bottom: var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  box-sizing: border-box;\n  position: relative;\n  flex-basis: 0;\n  flex-grow: 1;\n  width: 100%;\n  max-width: 100%;\n  min-height: 1px;\n}\n@media (min-width: 576px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));\n    padding-inline-start: var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));\n    padding-inline-end: var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));\n    padding-top: var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));\n    padding-bottom: var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));\n  }\n}\n@media (min-width: 768px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));\n    padding-inline-start: var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));\n    padding-inline-end: var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));\n    padding-top: var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));\n    padding-bottom: var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));\n  }\n}\n@media (min-width: 992px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));\n    padding-inline-start: var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));\n    padding-inline-end: var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));\n    padding-top: var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));\n    padding-bottom: var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));\n  }\n}\n@media (min-width: 1200px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));\n    padding-inline-start: var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));\n    padding-inline-end: var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));\n    padding-top: var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));\n    padding-bottom: var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));\n  }\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, forceUpdate, h } from \"@stencil/core\";\nimport { matchBreakpoint } from \"../../utils/media\";\nimport { getIonMode } from \"../../global/ionic-global\";\nconst win = typeof window !== 'undefined' ? window : undefined;\n// eslint-disable-next-line @typescript-eslint/prefer-optional-chain\nconst SUPPORTS_VARS = win && !!(win.CSS && win.CSS.supports && win.CSS.supports('--a: 0'));\nconst BREAKPOINTS = ['', 'xs', 'sm', 'md', 'lg', 'xl'];\nexport class Col {\n    constructor() {\n        this.offset = undefined;\n        this.offsetXs = undefined;\n        this.offsetSm = undefined;\n        this.offsetMd = undefined;\n        this.offsetLg = undefined;\n        this.offsetXl = undefined;\n        this.pull = undefined;\n        this.pullXs = undefined;\n        this.pullSm = undefined;\n        this.pullMd = undefined;\n        this.pullLg = undefined;\n        this.pullXl = undefined;\n        this.push = undefined;\n        this.pushXs = undefined;\n        this.pushSm = undefined;\n        this.pushMd = undefined;\n        this.pushLg = undefined;\n        this.pushXl = undefined;\n        this.size = undefined;\n        this.sizeXs = undefined;\n        this.sizeSm = undefined;\n        this.sizeMd = undefined;\n        this.sizeLg = undefined;\n        this.sizeXl = undefined;\n    }\n    onResize() {\n        forceUpdate(this);\n    }\n    // Loop through all of the breakpoints to see if the media query\n    // matches and grab the column value from the relevant prop if so\n    getColumns(property) {\n        let matched;\n        for (const breakpoint of BREAKPOINTS) {\n            const matches = matchBreakpoint(breakpoint);\n            // Grab the value of the property, if it exists and our\n            // media query matches we return the value\n            const columns = this[property + breakpoint.charAt(0).toUpperCase() + breakpoint.slice(1)];\n            if (matches && columns !== undefined) {\n                matched = columns;\n            }\n        }\n        // Return the last matched columns since the breakpoints\n        // increase in size and we want to return the largest match\n        return matched;\n    }\n    calculateSize() {\n        const columns = this.getColumns('size');\n        // If size wasn't set for any breakpoint\n        // or if the user set the size without a value\n        // it means we need to stick with the default and return\n        // e.g. <ion-col size-md>\n        if (!columns || columns === '') {\n            return;\n        }\n        // If the size is set to auto then don't calculate a size\n        const colSize = columns === 'auto'\n            ? 'auto'\n            : // If CSS supports variables we should use the grid columns var\n                SUPPORTS_VARS\n                    ? `calc(calc(${columns} / var(--ion-grid-columns, 12)) * 100%)`\n                    : // Convert the columns to a percentage by dividing by the total number\n                        // of columns (12) and then multiplying by 100\n                        (columns / 12) * 100 + '%';\n        return {\n            flex: `0 0 ${colSize}`,\n            width: `${colSize}`,\n            'max-width': `${colSize}`,\n        };\n    }\n    // Called by push, pull, and offset since they use the same calculations\n    calculatePosition(property, modifier) {\n        const columns = this.getColumns(property);\n        if (!columns) {\n            return;\n        }\n        // If the number of columns passed are greater than 0 and less than\n        // 12 we can position the column, else default to auto\n        const amount = SUPPORTS_VARS\n            ? // If CSS supports variables we should use the grid columns var\n                `calc(calc(${columns} / var(--ion-grid-columns, 12)) * 100%)`\n            : // Convert the columns to a percentage by dividing by the total number\n                // of columns (12) and then multiplying by 100\n                columns > 0 && columns < 12\n                    ? (columns / 12) * 100 + '%'\n                    : 'auto';\n        return {\n            [modifier]: amount,\n        };\n    }\n    calculateOffset(isRTL) {\n        return this.calculatePosition('offset', isRTL ? 'margin-right' : 'margin-left');\n    }\n    calculatePull(isRTL) {\n        return this.calculatePosition('pull', isRTL ? 'left' : 'right');\n    }\n    calculatePush(isRTL) {\n        return this.calculatePosition('push', isRTL ? 'right' : 'left');\n    }\n    render() {\n        const isRTL = document.dir === 'rtl';\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'c37fa4c4c993385ccbb6f4e89b2f390b140507a0', class: {\n                [mode]: true,\n            }, style: Object.assign(Object.assign(Object.assign(Object.assign({}, this.calculateOffset(isRTL)), this.calculatePull(isRTL)), this.calculatePush(isRTL)), this.calculateSize()) }, h(\"slot\", { key: '6a5296ff0b9dee6600c2dafe7363a065d053bac2' })));\n    }\n    static get is() { return \"ion-col\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"col.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"col.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"offset\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to offset the column, in terms of how many columns it should shift to the end\\nof the total available.\"\n                },\n                \"attribute\": \"offset\",\n                \"reflect\": false\n            },\n            \"offsetXs\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to offset the column for xs screens, in terms of how many columns it should shift\\nto the end of the total available.\"\n                },\n                \"attribute\": \"offset-xs\",\n                \"reflect\": false\n            },\n            \"offsetSm\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to offset the column for sm screens, in terms of how many columns it should shift\\nto the end of the total available.\"\n                },\n                \"attribute\": \"offset-sm\",\n                \"reflect\": false\n            },\n            \"offsetMd\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to offset the column for md screens, in terms of how many columns it should shift\\nto the end of the total available.\"\n                },\n                \"attribute\": \"offset-md\",\n                \"reflect\": false\n            },\n            \"offsetLg\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to offset the column for lg screens, in terms of how many columns it should shift\\nto the end of the total available.\"\n                },\n                \"attribute\": \"offset-lg\",\n                \"reflect\": false\n            },\n            \"offsetXl\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to offset the column for xl screens, in terms of how many columns it should shift\\nto the end of the total available.\"\n                },\n                \"attribute\": \"offset-xl\",\n                \"reflect\": false\n            },\n            \"pull\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to pull the column, in terms of how many columns it should shift to the start of\\nthe total available.\"\n                },\n                \"attribute\": \"pull\",\n                \"reflect\": false\n            },\n            \"pullXs\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to pull the column for xs screens, in terms of how many columns it should shift\\nto the start of the total available.\"\n                },\n                \"attribute\": \"pull-xs\",\n                \"reflect\": false\n            },\n            \"pullSm\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to pull the column for sm screens, in terms of how many columns it should shift\\nto the start of the total available.\"\n                },\n                \"attribute\": \"pull-sm\",\n                \"reflect\": false\n            },\n            \"pullMd\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to pull the column for md screens, in terms of how many columns it should shift\\nto the start of the total available.\"\n                },\n                \"attribute\": \"pull-md\",\n                \"reflect\": false\n            },\n            \"pullLg\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to pull the column for lg screens, in terms of how many columns it should shift\\nto the start of the total available.\"\n                },\n                \"attribute\": \"pull-lg\",\n                \"reflect\": false\n            },\n            \"pullXl\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to pull the column for xl screens, in terms of how many columns it should shift\\nto the start of the total available.\"\n                },\n                \"attribute\": \"pull-xl\",\n                \"reflect\": false\n            },\n            \"push\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to push the column, in terms of how many columns it should shift to the end\\nof the total available.\"\n                },\n                \"attribute\": \"push\",\n                \"reflect\": false\n            },\n            \"pushXs\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to push the column for xs screens, in terms of how many columns it should shift\\nto the end of the total available.\"\n                },\n                \"attribute\": \"push-xs\",\n                \"reflect\": false\n            },\n            \"pushSm\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to push the column for sm screens, in terms of how many columns it should shift\\nto the end of the total available.\"\n                },\n                \"attribute\": \"push-sm\",\n                \"reflect\": false\n            },\n            \"pushMd\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to push the column for md screens, in terms of how many columns it should shift\\nto the end of the total available.\"\n                },\n                \"attribute\": \"push-md\",\n                \"reflect\": false\n            },\n            \"pushLg\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to push the column for lg screens, in terms of how many columns it should shift\\nto the end of the total available.\"\n                },\n                \"attribute\": \"push-lg\",\n                \"reflect\": false\n            },\n            \"pushXl\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The amount to push the column for xl screens, in terms of how many columns it should shift\\nto the end of the total available.\"\n                },\n                \"attribute\": \"push-xl\",\n                \"reflect\": false\n            },\n            \"size\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The size of the column, in terms of how many columns it should take up out of the total\\navailable. If `\\\"auto\\\"` is passed, the column will be the size of its content.\"\n                },\n                \"attribute\": \"size\",\n                \"reflect\": false\n            },\n            \"sizeXs\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The size of the column for xs screens, in terms of how many columns it should take up out\\nof the total available. If `\\\"auto\\\"` is passed, the column will be the size of its content.\"\n                },\n                \"attribute\": \"size-xs\",\n                \"reflect\": false\n            },\n            \"sizeSm\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The size of the column for sm screens, in terms of how many columns it should take up out\\nof the total available. If `\\\"auto\\\"` is passed, the column will be the size of its content.\"\n                },\n                \"attribute\": \"size-sm\",\n                \"reflect\": false\n            },\n            \"sizeMd\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The size of the column for md screens, in terms of how many columns it should take up out\\nof the total available. If `\\\"auto\\\"` is passed, the column will be the size of its content.\"\n                },\n                \"attribute\": \"size-md\",\n                \"reflect\": false\n            },\n            \"sizeLg\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The size of the column for lg screens, in terms of how many columns it should take up out\\nof the total available. If `\\\"auto\\\"` is passed, the column will be the size of its content.\"\n                },\n                \"attribute\": \"size-lg\",\n                \"reflect\": false\n            },\n            \"sizeXl\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The size of the column for xl screens, in terms of how many columns it should take up out\\nof the total available. If `\\\"auto\\\"` is passed, the column will be the size of its content.\"\n                },\n                \"attribute\": \"size-xl\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get listeners() {\n        return [{\n                \"name\": \"resize\",\n                \"method\": \"onResize\",\n                \"target\": \"window\",\n                \"capture\": false,\n                \"passive\": true\n            }];\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the content\n   *\n   * @prop --color: Color of the content\n   *\n   * @prop --padding-top: Top padding of the content\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the content\n   * @prop --padding-bottom: Bottom padding of the content\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the content\n   *\n   * @prop --keyboard-offset: Keyboard offset of the content\n   *\n   * @prop --offset-top: Offset top of the content\n   * @prop --offset-bottom: Offset bottom of the content\n   */\n  --background: var(--ion-background-color, #fff);\n  --color: var(--ion-text-color, #000);\n  --padding-top: 0px;\n  --padding-bottom: 0px;\n  --padding-start: 0px;\n  --padding-end: 0px;\n  --keyboard-offset: 0px;\n  --offset-top: 0px;\n  --offset-bottom: 0px;\n  --overflow: auto;\n  display: block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  height: 100%;\n  /* stylelint-disable */\n  margin: 0 !important;\n  padding: 0 !important;\n  /* stylelint-enable */\n  font-family: var(--ion-font-family, inherit);\n  contain: size style;\n}\n\n:host(.ion-color) .inner-scroll {\n  background: var(--ion-color-base);\n  color: var(--ion-color-contrast);\n}\n\n#background-content {\n  left: 0px;\n  right: 0px;\n  top: calc(var(--offset-top) * -1);\n  bottom: calc(var(--offset-bottom) * -1);\n  position: absolute;\n  background: var(--background);\n}\n\n.inner-scroll {\n  left: 0px;\n  right: 0px;\n  top: calc(var(--offset-top) * -1);\n  bottom: calc(var(--offset-bottom) * -1);\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: calc(var(--padding-top) + var(--offset-top));\n  padding-bottom: calc(var(--padding-bottom) + var(--keyboard-offset) + var(--offset-bottom));\n  position: absolute;\n  color: var(--color);\n  box-sizing: border-box;\n  overflow: hidden;\n  /**\n   * touch-action: manipulation is an alias\n   * for this, but WebKit has an issue\n   * where pointercancel events are not fired\n   * when scrolling: https://bugs.webkit.org/show_bug.cgi?id=240917\n   * Using the long form below avoids the issue.\n   */\n  touch-action: pan-x pan-y pinch-zoom;\n}\n\n.scroll-y,\n.scroll-x {\n  -webkit-overflow-scrolling: touch;\n  /**\n   * This adds `.inner-scroll` as part of the\n   * stacking context in WebKit. Without it,\n   * children of ion-content are treated as\n   * siblings rather than descendants. This\n   * can result in the children being put\n   * into their own layers, degrading\n   * scrolling performance.\n   *\n   * An optimization called \"layer backing\n   * sharing\" usually kicks in to prevent\n   * this, but having translate3d defeats\n   * this optimization.\n   *\n   * See: https://bugs.webkit.org/show_bug.cgi?id=216701\n   */\n  z-index: 0;\n  will-change: scroll-position;\n}\n\n.scroll-y {\n  overflow-y: var(--overflow);\n  overscroll-behavior-y: contain;\n}\n\n.scroll-x {\n  overflow-x: var(--overflow);\n  overscroll-behavior-x: contain;\n}\n\n.overscroll::before,\n.overscroll::after {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  content: \"\";\n}\n\n.overscroll::before {\n  bottom: -1px;\n}\n\n.overscroll::after {\n  top: -1px;\n}\n\n:host(.content-sizing) {\n  display: flex;\n  flex-direction: column;\n  /**\n   * This resolves a sizing issue in popovers where extra long content\n   * would overflow the popover's height, preventing scrolling. It's a\n   * quirk of flexbox that forces the content to shrink to fit.\n   *\n   * overflow: hidden can't be used here because it prevents the visual\n   * effect from showing on translucent headers.\n   */\n  min-height: 0;\n  contain: none;\n}\n\n:host(.content-sizing) .inner-scroll {\n  position: relative;\n  /**\n   * Because the outer content has display: flex here (to help enable\n   * scrolling in a popover), offsetting via `top` (such as when using\n   * a translucent header) creates white space under the content. Use\n   * a negative margin instead to keep the bottom in place. (A similar\n   * thing happens with `bottom` and footers.)\n   */\n  top: 0;\n  bottom: 0;\n  margin-top: calc(var(--offset-top) * -1);\n  margin-bottom: calc(var(--offset-bottom) * -1);\n}\n\n.transition-effect {\n  display: none;\n  position: absolute;\n  width: 100%;\n  height: 100vh;\n  opacity: 0;\n  pointer-events: none;\n}\n\n:host(.content-ltr) .transition-effect {\n  /* stylelint-disable property-disallowed-list */\n  left: -100%;\n  /* stylelint-enable property-disallowed-list */\n}\n\n:host(.content-rtl) .transition-effect {\n  /* stylelint-disable property-disallowed-list */\n  right: -100%;\n  /* stylelint-enable property-disallowed-list */\n}\n\n.transition-cover {\n  position: absolute;\n  /* stylelint-disable property-disallowed-list */\n  right: 0;\n  /* stylelint-enable property-disallowed-list */\n  width: 100%;\n  height: 100%;\n  background: black;\n  opacity: 0.1;\n}\n\n.transition-shadow {\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  box-shadow: inset -9px 0 9px 0 rgba(0, 0, 100, 0.03);\n}\n\n:host(.content-ltr) .transition-shadow {\n  /* stylelint-disable property-disallowed-list */\n  right: 0;\n  /* stylelint-enable property-disallowed-list */\n}\n\n:host(.content-rtl) .transition-shadow {\n  /* stylelint-disable property-disallowed-list */\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  transform: scaleX(-1);\n}\n\n::slotted([slot=fixed]) {\n  position: absolute;\n  /**\n   * When presenting ion-content inside of an ion-modal, the .inner-scroll\n   * element is composited. In WebKit, the fixed content is not composited\n   * causing it to appear under the main scrollable content as a result.\n   * The fixed content is correctly composited in other browsers. Adding\n   * the translateZ forces the fixed content to be composited so it correctly\n   * shows on top of the scrollable content. Setting a negative z-index will\n   * still allow the fixed content to appear under the scroll content if specified.\n   */\n  transform: translateZ(0);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, forceUpdate, h, readTask } from \"@stencil/core\";\nimport { componentOnReady, hasLazyBuild } from \"../../utils/helpers\";\nimport { isPlatform } from \"../../utils/platform\";\nimport { isRTL } from \"../../utils/rtl/index\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @slot - Content is placed in the scrollable area if provided without a slot.\n * @slot fixed - Should be used for fixed content that should not scroll.\n *\n * @part background - The background of the content.\n * @part scroll - The scrollable container of the content.\n */\nexport class Content {\n    constructor() {\n        this.watchDog = null;\n        this.isScrolling = false;\n        this.lastScroll = 0;\n        this.queued = false;\n        this.cTop = -1;\n        this.cBottom = -1;\n        this.isMainContent = true;\n        this.resizeTimeout = null;\n        this.tabsElement = null;\n        // Detail is used in a hot loop in the scroll event, by allocating it here\n        // V8 will be able to inline any read/write to it since it's a monomorphic class.\n        // https://mrale.ph/blog/2015/01/11/whats-up-with-monomorphism.html\n        this.detail = {\n            scrollTop: 0,\n            scrollLeft: 0,\n            type: 'scroll',\n            event: undefined,\n            startX: 0,\n            startY: 0,\n            startTime: 0,\n            currentX: 0,\n            currentY: 0,\n            velocityX: 0,\n            velocityY: 0,\n            deltaX: 0,\n            deltaY: 0,\n            currentTime: 0,\n            data: undefined,\n            isScrolling: true,\n        };\n        this.color = undefined;\n        this.fullscreen = false;\n        this.fixedSlotPlacement = 'after';\n        this.forceOverscroll = undefined;\n        this.scrollX = false;\n        this.scrollY = true;\n        this.scrollEvents = false;\n    }\n    connectedCallback() {\n        this.isMainContent = this.el.closest('ion-menu, ion-popover, ion-modal') === null;\n        /**\n         * The fullscreen content offsets need to be\n         * computed after the tab bar has loaded. Since\n         * lazy evaluation means components are not hydrated\n         * at the same time, we need to wait for the ionTabBarLoaded\n         * event to fire. This does not impact dist-custom-elements\n         * because there is no hydration there.\n         */\n        if (hasLazyBuild(this.el)) {\n            /**\n             * We need to cache the reference to the tabs.\n             * If just the content is unmounted then we won't\n             * be able to query for the closest tabs on disconnectedCallback\n             * since the content has been removed from the DOM tree.\n             */\n            const closestTabs = (this.tabsElement = this.el.closest('ion-tabs'));\n            if (closestTabs !== null) {\n                /**\n                 * When adding and removing the event listener\n                 * we need to make sure we pass the same function reference\n                 * otherwise the event listener will not be removed properly.\n                 * We can't only pass `this.resize` because \"this\" in the function\n                 * context becomes a reference to IonTabs instead of IonContent.\n                 *\n                 * Additionally, we listen for ionTabBarLoaded on the IonTabs\n                 * instance rather than the IonTabBar instance. It's possible for\n                 * a tab bar to be conditionally rendered/mounted. Since ionTabBarLoaded\n                 * bubbles, we can catch any instances of child tab bars loading by listening\n                 * on IonTabs.\n                 */\n                this.tabsLoadCallback = () => this.resize();\n                closestTabs.addEventListener('ionTabBarLoaded', this.tabsLoadCallback);\n            }\n        }\n    }\n    disconnectedCallback() {\n        this.onScrollEnd();\n        if (hasLazyBuild(this.el)) {\n            /**\n             * The event listener and tabs caches need to\n             * be cleared otherwise this will create a memory\n             * leak where the IonTabs instance can never be\n             * garbage collected.\n             */\n            const { tabsElement, tabsLoadCallback } = this;\n            if (tabsElement !== null && tabsLoadCallback !== undefined) {\n                tabsElement.removeEventListener('ionTabBarLoaded', tabsLoadCallback);\n            }\n            this.tabsElement = null;\n            this.tabsLoadCallback = undefined;\n        }\n    }\n    /**\n     * Rotating certain devices can update\n     * the safe area insets. As a result,\n     * the fullscreen feature on ion-content\n     * needs to be recalculated.\n     *\n     * We listen for \"resize\" because we\n     * do not care what the orientation of\n     * the device is. Other APIs\n     * such as ScreenOrientation or\n     * the deviceorientation event must have\n     * permission from the user first whereas\n     * the \"resize\" event does not.\n     *\n     * We also throttle the callback to minimize\n     * thrashing when quickly resizing a window.\n     */\n    onResize() {\n        if (this.resizeTimeout) {\n            clearTimeout(this.resizeTimeout);\n            this.resizeTimeout = null;\n        }\n        this.resizeTimeout = setTimeout(() => {\n            /**\n             * Resize should only happen\n             * if the content is visible.\n             * When the content is hidden\n             * then offsetParent will be null.\n             */\n            if (this.el.offsetParent === null) {\n                return;\n            }\n            this.resize();\n        }, 100);\n    }\n    shouldForceOverscroll() {\n        const { forceOverscroll } = this;\n        const mode = getIonMode(this);\n        return forceOverscroll === undefined ? mode === 'ios' && isPlatform('ios') : forceOverscroll;\n    }\n    resize() {\n        /**\n         * Only force update if the component is rendered in a browser context.\n         * Using `forceUpdate` in a server context with pre-rendering can lead to an infinite loop.\n         * The `hydrateDocument` function in `@stencil/core` will render the `ion-content`, but\n         * `forceUpdate` will trigger another render, locking up the server.\n         *\n         * TODO: Remove if STENCIL-834 determines Stencil will account for this.\n         */\n        if (Build.isBrowser) {\n            if (this.fullscreen) {\n                readTask(() => this.readDimensions());\n            }\n            else if (this.cTop !== 0 || this.cBottom !== 0) {\n                this.cTop = this.cBottom = 0;\n                forceUpdate(this);\n            }\n        }\n    }\n    readDimensions() {\n        const page = getPageElement(this.el);\n        const top = Math.max(this.el.offsetTop, 0);\n        const bottom = Math.max(page.offsetHeight - top - this.el.offsetHeight, 0);\n        const dirty = top !== this.cTop || bottom !== this.cBottom;\n        if (dirty) {\n            this.cTop = top;\n            this.cBottom = bottom;\n            forceUpdate(this);\n        }\n    }\n    onScroll(ev) {\n        const timeStamp = Date.now();\n        const shouldStart = !this.isScrolling;\n        this.lastScroll = timeStamp;\n        if (shouldStart) {\n            this.onScrollStart();\n        }\n        if (!this.queued && this.scrollEvents) {\n            this.queued = true;\n            readTask((ts) => {\n                this.queued = false;\n                this.detail.event = ev;\n                updateScrollDetail(this.detail, this.scrollEl, ts, shouldStart);\n                this.ionScroll.emit(this.detail);\n            });\n        }\n    }\n    /**\n     * Get the element where the actual scrolling takes place.\n     * This element can be used to subscribe to `scroll` events or manually modify\n     * `scrollTop`. However, it's recommended to use the API provided by `ion-content`:\n     *\n     * i.e. Using `ionScroll`, `ionScrollStart`, `ionScrollEnd` for scrolling events\n     * and `scrollToPoint()` to scroll the content into a certain point.\n     */\n    async getScrollElement() {\n        /**\n         * If this gets called in certain early lifecycle hooks (ex: Vue onMounted),\n         * scrollEl won't be defined yet with the custom elements build, so wait for it to load in.\n         */\n        if (!this.scrollEl) {\n            await new Promise((resolve) => componentOnReady(this.el, resolve));\n        }\n        return Promise.resolve(this.scrollEl);\n    }\n    /**\n     * Returns the background content element.\n     * @internal\n     */\n    async getBackgroundElement() {\n        if (!this.backgroundContentEl) {\n            await new Promise((resolve) => componentOnReady(this.el, resolve));\n        }\n        return Promise.resolve(this.backgroundContentEl);\n    }\n    /**\n     * Scroll to the top of the component.\n     *\n     * @param duration The amount of time to take scrolling to the top. Defaults to `0`.\n     */\n    scrollToTop(duration = 0) {\n        return this.scrollToPoint(undefined, 0, duration);\n    }\n    /**\n     * Scroll to the bottom of the component.\n     *\n     * @param duration The amount of time to take scrolling to the bottom. Defaults to `0`.\n     */\n    async scrollToBottom(duration = 0) {\n        const scrollEl = await this.getScrollElement();\n        const y = scrollEl.scrollHeight - scrollEl.clientHeight;\n        return this.scrollToPoint(undefined, y, duration);\n    }\n    /**\n     * Scroll by a specified X/Y distance in the component.\n     *\n     * @param x The amount to scroll by on the horizontal axis.\n     * @param y The amount to scroll by on the vertical axis.\n     * @param duration The amount of time to take scrolling by that amount.\n     */\n    async scrollByPoint(x, y, duration) {\n        const scrollEl = await this.getScrollElement();\n        return this.scrollToPoint(x + scrollEl.scrollLeft, y + scrollEl.scrollTop, duration);\n    }\n    /**\n     * Scroll to a specified X/Y location in the component.\n     *\n     * @param x The point to scroll to on the horizontal axis.\n     * @param y The point to scroll to on the vertical axis.\n     * @param duration The amount of time to take scrolling to that point. Defaults to `0`.\n     */\n    async scrollToPoint(x, y, duration = 0) {\n        const el = await this.getScrollElement();\n        if (duration < 32) {\n            if (y != null) {\n                el.scrollTop = y;\n            }\n            if (x != null) {\n                el.scrollLeft = x;\n            }\n            return;\n        }\n        let resolve;\n        let startTime = 0;\n        const promise = new Promise((r) => (resolve = r));\n        const fromY = el.scrollTop;\n        const fromX = el.scrollLeft;\n        const deltaY = y != null ? y - fromY : 0;\n        const deltaX = x != null ? x - fromX : 0;\n        // scroll loop\n        const step = (timeStamp) => {\n            const linearTime = Math.min(1, (timeStamp - startTime) / duration) - 1;\n            const easedT = Math.pow(linearTime, 3) + 1;\n            if (deltaY !== 0) {\n                el.scrollTop = Math.floor(easedT * deltaY + fromY);\n            }\n            if (deltaX !== 0) {\n                el.scrollLeft = Math.floor(easedT * deltaX + fromX);\n            }\n            if (easedT < 1) {\n                // do not use DomController here\n                // must use nativeRaf in order to fire in the next frame\n                requestAnimationFrame(step);\n            }\n            else {\n                resolve();\n            }\n        };\n        // chill out for a frame first\n        requestAnimationFrame((ts) => {\n            startTime = ts;\n            step(ts);\n        });\n        return promise;\n    }\n    onScrollStart() {\n        this.isScrolling = true;\n        this.ionScrollStart.emit({\n            isScrolling: true,\n        });\n        if (this.watchDog) {\n            clearInterval(this.watchDog);\n        }\n        // watchdog\n        this.watchDog = setInterval(() => {\n            if (this.lastScroll < Date.now() - 120) {\n                this.onScrollEnd();\n            }\n        }, 100);\n    }\n    onScrollEnd() {\n        if (this.watchDog)\n            clearInterval(this.watchDog);\n        this.watchDog = null;\n        if (this.isScrolling) {\n            this.isScrolling = false;\n            this.ionScrollEnd.emit({\n                isScrolling: false,\n            });\n        }\n    }\n    render() {\n        const { fixedSlotPlacement, isMainContent, scrollX, scrollY, el } = this;\n        const rtl = isRTL(el) ? 'rtl' : 'ltr';\n        const mode = getIonMode(this);\n        const forceOverscroll = this.shouldForceOverscroll();\n        const transitionShadow = mode === 'ios';\n        this.resize();\n        return (h(Host, { key: 'f599a7da14969df38c20a6f650179d2a319fb58b', role: isMainContent ? 'main' : undefined, class: createColorClasses(this.color, {\n                [mode]: true,\n                'content-sizing': hostContext('ion-popover', this.el),\n                overscroll: forceOverscroll,\n                [`content-${rtl}`]: true,\n            }), style: {\n                '--offset-top': `${this.cTop}px`,\n                '--offset-bottom': `${this.cBottom}px`,\n            } }, h(\"div\", { key: '7c545c3c95ea05abd036d0462936ac153d2a8fc6', ref: (el) => (this.backgroundContentEl = el), id: \"background-content\", part: \"background\" }), fixedSlotPlacement === 'before' ? h(\"slot\", { name: \"fixed\" }) : null, h(\"div\", { key: 'a67ab7438466c99f74b7ba59964802c3ba86ac5b', class: {\n                'inner-scroll': true,\n                'scroll-x': scrollX,\n                'scroll-y': scrollY,\n                overscroll: (scrollX || scrollY) && forceOverscroll,\n            }, ref: (scrollEl) => (this.scrollEl = scrollEl), onScroll: this.scrollEvents ? (ev) => this.onScroll(ev) : undefined, part: \"scroll\" }, h(\"slot\", { key: '6d10fcac2e40b4dd6c20d91a8957ac07251d2fa7' })), transitionShadow ? (h(\"div\", { class: \"transition-effect\" }, h(\"div\", { class: \"transition-cover\" }), h(\"div\", { class: \"transition-shadow\" }))) : null, fixedSlotPlacement === 'after' ? h(\"slot\", { name: \"fixed\" }) : null));\n    }\n    static get is() { return \"ion-content\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"content.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"content.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"fullscreen\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the content will scroll behind the headers\\nand footers. This effect can easily be seen by setting the toolbar\\nto transparent.\"\n                },\n                \"attribute\": \"fullscreen\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"fixedSlotPlacement\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'after' | 'before'\",\n                    \"resolved\": \"\\\"after\\\" | \\\"before\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Controls where the fixed content is placed relative to the main content\\nin the DOM. This can be used to control the order in which fixed elements\\nreceive keyboard focus.\\nFor example, if a FAB in the fixed slot should receive keyboard focus before\\nthe main page content, set this property to `'before'`.\"\n                },\n                \"attribute\": \"fixed-slot-placement\",\n                \"reflect\": false,\n                \"defaultValue\": \"'after'\"\n            },\n            \"forceOverscroll\": {\n                \"type\": \"boolean\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true` and the content does not cause an overflow scroll, the scroll interaction will cause a bounce.\\nIf the content exceeds the bounds of ionContent, nothing will change.\\nNote, this does not disable the system bounce on iOS. That is an OS level setting.\"\n                },\n                \"attribute\": \"force-overscroll\",\n                \"reflect\": false\n            },\n            \"scrollX\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If you want to enable the content scrolling in the X axis, set this property to `true`.\"\n                },\n                \"attribute\": \"scroll-x\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"scrollY\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If you want to disable the content scrolling in the Y axis, set this property to `false`.\"\n                },\n                \"attribute\": \"scroll-y\",\n                \"reflect\": false,\n                \"defaultValue\": \"true\"\n            },\n            \"scrollEvents\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Because of performance reasons, ionScroll events are disabled by default, in order to enable them\\nand start listening from (ionScroll), set this property to `true`.\"\n                },\n                \"attribute\": \"scroll-events\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionScrollStart\",\n                \"name\": \"ionScrollStart\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the scroll has started. This event is disabled by default.\\nSet `scrollEvents` to `true` to enable.\"\n                },\n                \"complexType\": {\n                    \"original\": \"ScrollBaseDetail\",\n                    \"resolved\": \"ScrollBaseDetail\",\n                    \"references\": {\n                        \"ScrollBaseDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./content-interface\",\n                            \"id\": \"src/components/content/content-interface.ts::ScrollBaseDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionScroll\",\n                \"name\": \"ionScroll\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted while scrolling. This event is disabled by default.\\nSet `scrollEvents` to `true` to enable.\"\n                },\n                \"complexType\": {\n                    \"original\": \"ScrollDetail\",\n                    \"resolved\": \"ScrollDetail\",\n                    \"references\": {\n                        \"ScrollDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./content-interface\",\n                            \"id\": \"src/components/content/content-interface.ts::ScrollDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionScrollEnd\",\n                \"name\": \"ionScrollEnd\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the scroll has ended. This event is disabled by default.\\nSet `scrollEvents` to `true` to enable.\"\n                },\n                \"complexType\": {\n                    \"original\": \"ScrollBaseDetail\",\n                    \"resolved\": \"ScrollBaseDetail\",\n                    \"references\": {\n                        \"ScrollBaseDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./content-interface\",\n                            \"id\": \"src/components/content/content-interface.ts::ScrollBaseDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"getScrollElement\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<HTMLElement>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"HTMLElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLElement\"\n                        }\n                    },\n                    \"return\": \"Promise<HTMLElement>\"\n                },\n                \"docs\": {\n                    \"text\": \"Get the element where the actual scrolling takes place.\\nThis element can be used to subscribe to `scroll` events or manually modify\\n`scrollTop`. However, it's recommended to use the API provided by `ion-content`:\\n\\ni.e. Using `ionScroll`, `ionScrollStart`, `ionScrollEnd` for scrolling events\\nand `scrollToPoint()` to scroll the content into a certain point.\",\n                    \"tags\": []\n                }\n            },\n            \"getBackgroundElement\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<HTMLElement>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"HTMLElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLElement\"\n                        }\n                    },\n                    \"return\": \"Promise<HTMLElement>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns the background content element.\",\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }]\n                }\n            },\n            \"scrollToTop\": {\n                \"complexType\": {\n                    \"signature\": \"(duration?: number) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"duration\",\n                            \"type\": \"number\",\n                            \"docs\": \"The amount of time to take scrolling to the top. Defaults to `0`.\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Scroll to the top of the component.\",\n                    \"tags\": [{\n                            \"name\": \"param\",\n                            \"text\": \"duration The amount of time to take scrolling to the top. Defaults to `0`.\"\n                        }]\n                }\n            },\n            \"scrollToBottom\": {\n                \"complexType\": {\n                    \"signature\": \"(duration?: number) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"duration\",\n                            \"type\": \"number\",\n                            \"docs\": \"The amount of time to take scrolling to the bottom. Defaults to `0`.\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Scroll to the bottom of the component.\",\n                    \"tags\": [{\n                            \"name\": \"param\",\n                            \"text\": \"duration The amount of time to take scrolling to the bottom. Defaults to `0`.\"\n                        }]\n                }\n            },\n            \"scrollByPoint\": {\n                \"complexType\": {\n                    \"signature\": \"(x: number, y: number, duration: number) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"x\",\n                            \"type\": \"number\",\n                            \"docs\": \"The amount to scroll by on the horizontal axis.\"\n                        }, {\n                            \"name\": \"y\",\n                            \"type\": \"number\",\n                            \"docs\": \"The amount to scroll by on the vertical axis.\"\n                        }, {\n                            \"name\": \"duration\",\n                            \"type\": \"number\",\n                            \"docs\": \"The amount of time to take scrolling by that amount.\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Scroll by a specified X/Y distance in the component.\",\n                    \"tags\": [{\n                            \"name\": \"param\",\n                            \"text\": \"x The amount to scroll by on the horizontal axis.\"\n                        }, {\n                            \"name\": \"param\",\n                            \"text\": \"y The amount to scroll by on the vertical axis.\"\n                        }, {\n                            \"name\": \"param\",\n                            \"text\": \"duration The amount of time to take scrolling by that amount.\"\n                        }]\n                }\n            },\n            \"scrollToPoint\": {\n                \"complexType\": {\n                    \"signature\": \"(x: number | undefined | null, y: number | undefined | null, duration?: number) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"x\",\n                            \"type\": \"number | null | undefined\",\n                            \"docs\": \"The point to scroll to on the horizontal axis.\"\n                        }, {\n                            \"name\": \"y\",\n                            \"type\": \"number | null | undefined\",\n                            \"docs\": \"The point to scroll to on the vertical axis.\"\n                        }, {\n                            \"name\": \"duration\",\n                            \"type\": \"number\",\n                            \"docs\": \"The amount of time to take scrolling to that point. Defaults to `0`.\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Scroll to a specified X/Y location in the component.\",\n                    \"tags\": [{\n                            \"name\": \"param\",\n                            \"text\": \"x The point to scroll to on the horizontal axis.\"\n                        }, {\n                            \"name\": \"param\",\n                            \"text\": \"y The point to scroll to on the vertical axis.\"\n                        }, {\n                            \"name\": \"param\",\n                            \"text\": \"duration The amount of time to take scrolling to that point. Defaults to `0`.\"\n                        }]\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get listeners() {\n        return [{\n                \"name\": \"resize\",\n                \"method\": \"onResize\",\n                \"target\": \"window\",\n                \"capture\": false,\n                \"passive\": true\n            }];\n    }\n}\nconst getParentElement = (el) => {\n    var _a;\n    if (el.parentElement) {\n        // normal element with a parent element\n        return el.parentElement;\n    }\n    if ((_a = el.parentNode) === null || _a === void 0 ? void 0 : _a.host) {\n        // shadow dom's document fragment\n        return el.parentNode.host;\n    }\n    return null;\n};\nconst getPageElement = (el) => {\n    const tabs = el.closest('ion-tabs');\n    if (tabs) {\n        return tabs;\n    }\n    /**\n     * If we're in a popover, we need to use its wrapper so we can account for space\n     * between the popover and the edges of the screen. But if the popover contains\n     * its own page element, we should use that instead.\n     */\n    const page = el.closest('ion-app, ion-page, .ion-page, page-inner, .popover-content');\n    if (page) {\n        return page;\n    }\n    return getParentElement(el);\n};\n// ******** DOM READ ****************\nconst updateScrollDetail = (detail, el, timestamp, shouldStart) => {\n    const prevX = detail.currentX;\n    const prevY = detail.currentY;\n    const prevT = detail.currentTime;\n    const currentX = el.scrollLeft;\n    const currentY = el.scrollTop;\n    const timeDelta = timestamp - prevT;\n    if (shouldStart) {\n        // remember the start positions\n        detail.startTime = timestamp;\n        detail.startX = currentX;\n        detail.startY = currentY;\n        detail.velocityX = detail.velocityY = 0;\n    }\n    detail.currentTime = timestamp;\n    detail.currentX = detail.scrollLeft = currentX;\n    detail.currentY = detail.scrollTop = currentY;\n    detail.deltaX = currentX - detail.startX;\n    detail.deltaY = currentY - detail.startY;\n    if (timeDelta > 0 && timeDelta < 100) {\n        const velocityX = (currentX - prevX) / timeDelta;\n        const velocityY = (currentY - prevY) / timeDelta;\n        detail.velocityX = velocityX * 0.7 + detail.velocityX * 0.3;\n        detail.velocityY = velocityY * 0.7 + detail.velocityY * 0.3;\n    }\n};\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --ion-grid-padding: Padding for the Grid\n   * @prop --ion-grid-padding-xs: Padding for the Grid on xs screens\n   * @prop --ion-grid-padding-sm: Padding for the Grid on sm screens\n   * @prop --ion-grid-padding-md: Padding for the Grid on md screens\n   * @prop --ion-grid-padding-lg: Padding for the Grid on lg screens\n   * @prop --ion-grid-padding-xl: Padding for the Grid on xl screens\n   *\n   * @prop --ion-grid-width: Width of the fixed Grid\n   * @prop --ion-grid-width-xs: Width of the fixed Grid on xs screens\n   * @prop --ion-grid-width-sm: Width of the fixed Grid on sm screens\n   * @prop --ion-grid-width-md: Width of the fixed Grid on md screens\n   * @prop --ion-grid-width-lg: Width of the fixed Grid on lg screens\n   * @prop --ion-grid-width-xl: Width of the fixed Grid on xl screens\n   */\n  -webkit-padding-start: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  padding-inline-start: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  -webkit-padding-end: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  padding-inline-end: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  padding-top: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  padding-bottom: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  display: block;\n  flex: 1;\n}\n@media (min-width: 576px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    padding-inline-start: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    padding-inline-end: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    padding-top: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    padding-bottom: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n  }\n}\n@media (min-width: 768px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    padding-inline-start: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    padding-inline-end: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    padding-top: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    padding-bottom: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n  }\n}\n@media (min-width: 992px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    padding-inline-start: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    padding-inline-end: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    padding-top: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    padding-bottom: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n  }\n}\n@media (min-width: 1200px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    padding-inline-start: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    padding-inline-end: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    padding-top: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    padding-bottom: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n  }\n}\n\n:host(.grid-fixed) {\n  width: var(--ion-grid-width-xs, var(--ion-grid-width, 100%));\n  max-width: 100%;\n}\n@media (min-width: 576px) {\n  :host(.grid-fixed) {\n    width: var(--ion-grid-width-sm, var(--ion-grid-width, 540px));\n  }\n}\n@media (min-width: 768px) {\n  :host(.grid-fixed) {\n    width: var(--ion-grid-width-md, var(--ion-grid-width, 720px));\n  }\n}\n@media (min-width: 992px) {\n  :host(.grid-fixed) {\n    width: var(--ion-grid-width-lg, var(--ion-grid-width, 960px));\n  }\n}\n@media (min-width: 1200px) {\n  :host(.grid-fixed) {\n    width: var(--ion-grid-width-xl, var(--ion-grid-width, 1140px));\n  }\n}\n\n:host(.ion-no-padding) {\n  --ion-grid-column-padding: 0;\n  --ion-grid-column-padding-xs: 0;\n  --ion-grid-column-padding-sm: 0;\n  --ion-grid-column-padding-md: 0;\n  --ion-grid-column-padding-lg: 0;\n  --ion-grid-column-padding-xl: 0;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class Grid {\n    constructor() {\n        this.fixed = false;\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '930ce78b02f8360fbca08a35d364d2c09128c6c8', class: {\n                [mode]: true,\n                'grid-fixed': this.fixed,\n            } }, h(\"slot\", { key: 'c47bf7ef2197f5ebc42d3e2c55044276fb0db393' })));\n    }\n    static get is() { return \"ion-grid\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"grid.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"grid.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"fixed\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the grid will have a fixed width based on the screen size.\"\n                },\n                \"attribute\": \"fixed\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n}\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { readTask, writeTask } from \"@stencil/core\";\nimport { clamp } from \"../../utils/helpers\";\nconst TRANSITION = 'all 0.2s ease-in-out';\nexport const cloneElement = (tagName) => {\n    const getCachedEl = document.querySelector(`${tagName}.ion-cloned-element`);\n    if (getCachedEl !== null) {\n        return getCachedEl;\n    }\n    const clonedEl = document.createElement(tagName);\n    clonedEl.classList.add('ion-cloned-element');\n    clonedEl.style.setProperty('display', 'none');\n    document.body.appendChild(clonedEl);\n    return clonedEl;\n};\nexport const createHeaderIndex = (headerEl) => {\n    if (!headerEl) {\n        return;\n    }\n    const toolbars = headerEl.querySelectorAll('ion-toolbar');\n    return {\n        el: headerEl,\n        toolbars: Array.from(toolbars).map((toolbar) => {\n            const ionTitleEl = toolbar.querySelector('ion-title');\n            return {\n                el: toolbar,\n                background: toolbar.shadowRoot.querySelector('.toolbar-background'),\n                ionTitleEl,\n                innerTitleEl: ionTitleEl ? ionTitleEl.shadowRoot.querySelector('.toolbar-title') : null,\n                ionButtonsEl: Array.from(toolbar.querySelectorAll('ion-buttons')),\n            };\n        }),\n    };\n};\nexport const handleContentScroll = (scrollEl, scrollHeaderIndex, contentEl) => {\n    readTask(() => {\n        const scrollTop = scrollEl.scrollTop;\n        const scale = clamp(1, 1 + -scrollTop / 500, 1.1);\n        // Native refresher should not cause titles to scale\n        const nativeRefresher = contentEl.querySelector('ion-refresher.refresher-native');\n        if (nativeRefresher === null) {\n            writeTask(() => {\n                scaleLargeTitles(scrollHeaderIndex.toolbars, scale);\n            });\n        }\n    });\n};\nexport const setToolbarBackgroundOpacity = (headerEl, opacity) => {\n    /**\n     * Fading in the backdrop opacity\n     * should happen after the large title\n     * has collapsed, so it is handled\n     * by handleHeaderFade()\n     */\n    if (headerEl.collapse === 'fade') {\n        return;\n    }\n    if (opacity === undefined) {\n        headerEl.style.removeProperty('--opacity-scale');\n    }\n    else {\n        headerEl.style.setProperty('--opacity-scale', opacity.toString());\n    }\n};\nconst handleToolbarBorderIntersection = (ev, mainHeaderIndex, scrollTop) => {\n    if (!ev[0].isIntersecting) {\n        return;\n    }\n    /**\n     * There is a bug in Safari where overflow scrolling on a non-body element\n     * does not always reset the scrollTop position to 0 when letting go. It will\n     * set to 1 once the rubber band effect has ended. This causes the background to\n     * appear slightly on certain app setups.\n     *\n     * Additionally, we check if user is rubber banding (scrolling is negative)\n     * as this can mean they are using pull to refresh. Once the refresher starts,\n     * the content is transformed which can cause the intersection observer to erroneously\n     * fire here as well.\n     */\n    const scale = ev[0].intersectionRatio > 0.9 || scrollTop <= 0 ? 0 : ((1 - ev[0].intersectionRatio) * 100) / 75;\n    setToolbarBackgroundOpacity(mainHeaderIndex.el, scale === 1 ? undefined : scale);\n};\n/**\n * If toolbars are intersecting, hide the scrollable toolbar content\n * and show the primary toolbar content. If the toolbars are not intersecting,\n * hide the primary toolbar content and show the scrollable toolbar content\n */\nexport const handleToolbarIntersection = (ev, // TODO(FW-2832): type (IntersectionObserverEntry[] triggers errors which should be sorted)\nmainHeaderIndex, scrollHeaderIndex, scrollEl) => {\n    writeTask(() => {\n        const scrollTop = scrollEl.scrollTop;\n        handleToolbarBorderIntersection(ev, mainHeaderIndex, scrollTop);\n        const event = ev[0];\n        const intersection = event.intersectionRect;\n        const intersectionArea = intersection.width * intersection.height;\n        const rootArea = event.rootBounds.width * event.rootBounds.height;\n        const isPageHidden = intersectionArea === 0 && rootArea === 0;\n        const leftDiff = Math.abs(intersection.left - event.boundingClientRect.left);\n        const rightDiff = Math.abs(intersection.right - event.boundingClientRect.right);\n        const isPageTransitioning = intersectionArea > 0 && (leftDiff >= 5 || rightDiff >= 5);\n        if (isPageHidden || isPageTransitioning) {\n            return;\n        }\n        if (event.isIntersecting) {\n            setHeaderActive(mainHeaderIndex, false);\n            setHeaderActive(scrollHeaderIndex);\n        }\n        else {\n            /**\n             * There is a bug with IntersectionObserver on Safari\n             * where `event.isIntersecting === false` when cancelling\n             * a swipe to go back gesture. Checking the intersection\n             * x, y, width, and height provides a workaround. This bug\n             * does not happen when using Safari + Web Animations,\n             * only Safari + CSS Animations.\n             */\n            const hasValidIntersection = (intersection.x === 0 && intersection.y === 0) || (intersection.width !== 0 && intersection.height !== 0);\n            if (hasValidIntersection && scrollTop > 0) {\n                setHeaderActive(mainHeaderIndex);\n                setHeaderActive(scrollHeaderIndex, false);\n                setToolbarBackgroundOpacity(mainHeaderIndex.el);\n            }\n        }\n    });\n};\nexport const setHeaderActive = (headerIndex, active = true) => {\n    const headerEl = headerIndex.el;\n    if (active) {\n        headerEl.classList.remove('header-collapse-condense-inactive');\n        headerEl.removeAttribute('aria-hidden');\n    }\n    else {\n        headerEl.classList.add('header-collapse-condense-inactive');\n        headerEl.setAttribute('aria-hidden', 'true');\n    }\n};\nexport const scaleLargeTitles = (toolbars = [], scale = 1, transition = false) => {\n    toolbars.forEach((toolbar) => {\n        const ionTitle = toolbar.ionTitleEl;\n        const titleDiv = toolbar.innerTitleEl;\n        if (!ionTitle || ionTitle.size !== 'large') {\n            return;\n        }\n        titleDiv.style.transition = transition ? TRANSITION : '';\n        titleDiv.style.transform = `scale3d(${scale}, ${scale}, 1)`;\n    });\n};\nexport const handleHeaderFade = (scrollEl, baseEl, condenseHeader) => {\n    readTask(() => {\n        const scrollTop = scrollEl.scrollTop;\n        const baseElHeight = baseEl.clientHeight;\n        const fadeStart = condenseHeader ? condenseHeader.clientHeight : 0;\n        /**\n         * If we are using fade header with a condense\n         * header, then the toolbar backgrounds should\n         * not begin to fade in until the condense\n         * header has fully collapsed.\n         *\n         * Additionally, the main content should not\n         * overflow out of the container until the\n         * condense header has fully collapsed. When\n         * using just the condense header the content\n         * should overflow out of the container.\n         */\n        if (condenseHeader !== null && scrollTop < fadeStart) {\n            baseEl.style.setProperty('--opacity-scale', '0');\n            scrollEl.style.setProperty('clip-path', `inset(${baseElHeight}px 0px 0px 0px)`);\n            return;\n        }\n        const distanceToStart = scrollTop - fadeStart;\n        const fadeDuration = 10;\n        const scale = clamp(0, distanceToStart / fadeDuration, 1);\n        writeTask(() => {\n            scrollEl.style.removeProperty('clip-path');\n            baseEl.style.setProperty('--opacity-scale', scale.toString());\n        });\n    });\n};\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-header {\n  display: block;\n  position: relative;\n  order: -1;\n  width: 100%;\n  z-index: 10;\n}\n\nion-header ion-toolbar:first-of-type {\n  padding-top: var(--ion-safe-area-top, 0);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n.header-ios ion-toolbar:last-of-type {\n  --border-width: 0 0 0.55px;\n}\n\n@supports (backdrop-filter: blur(0)) {\n  .header-background {\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    position: absolute;\n    backdrop-filter: saturate(180%) blur(20px);\n  }\n  .header-translucent-ios ion-toolbar {\n    --opacity: .8;\n  }\n  /**\n   * Disable the saturation otherwise it distorts the content\n   * background color when large header is not collapsed\n   */\n  .header-collapse-condense-inactive .header-background {\n    backdrop-filter: blur(20px);\n  }\n}\n.header-ios.ion-no-border ion-toolbar:last-of-type {\n  --border-width: 0;\n}\n\n.header-collapse-fade ion-toolbar {\n  --opacity-scale: inherit;\n}\n\n.header-collapse-condense {\n  z-index: 9;\n}\n\n.header-collapse-condense ion-toolbar {\n  position: sticky;\n  top: 0;\n}\n\n.header-collapse-condense ion-toolbar:first-of-type {\n  /**\n   * The toolbar that contains the collapsible\n   * large title should not have safe area padding applied.\n   */\n  padding-top: 0px;\n  z-index: 1;\n}\n\n/**\n * Large title toolbar should just use the content background\n * since it needs to blend in with the header above it.\n */\n.header-collapse-condense ion-toolbar {\n  --background: var(--ion-background-color, #fff);\n  z-index: 0;\n}\n\n.header-collapse-condense ion-toolbar:last-of-type {\n  --border-width: 0px;\n}\n\n.header-collapse-condense ion-toolbar ion-searchbar {\n  padding-top: 0px;\n  padding-bottom: 13px;\n}\n\n.header-collapse-main {\n  --opacity-scale: 1;\n}\n\n.header-collapse-main ion-toolbar {\n  --opacity-scale: inherit;\n}\n\n.header-collapse-main ion-toolbar.in-toolbar ion-title,\n.header-collapse-main ion-toolbar.in-toolbar ion-buttons {\n  transition: all 0.2s ease-in-out;\n}\n\n.header-collapse-condense-inactive:not(.header-collapse-condense) ion-toolbar.in-toolbar ion-title,\n.header-collapse-condense-inactive:not(.header-collapse-condense) ion-toolbar.in-toolbar ion-buttons.buttons-collapse {\n  opacity: 0;\n  pointer-events: none;\n}\n\n/**\n * There is a bug in Safari where changing\n * the opacity of an element in a scrollable container\n * while rubber-banding causes the scroll position\n * to jump to the top\n */\n.header-collapse-condense-inactive.header-collapse-condense ion-toolbar.in-toolbar ion-title,\n.header-collapse-condense-inactive.header-collapse-condense ion-toolbar.in-toolbar ion-buttons.buttons-collapse {\n  visibility: hidden;\n}\n\n/**\n * The main header is only hidden once the collapsible large\n * title is configured. As a result, if the main header loads\n * before the collapsible large title is configured then the\n * main header will be visible briefly before being hidden\n * by the collapsible large title.\n *\n * The following selector ensures that any main header\n * on a page with a collapsible large title is hidden\n * before the collapsible large title is configured.\n * Once the collapsible large title is configured the main\n * header will have the \".header-collapse-main\" class, and\n * this selector will no longer apply.\n *\n * The :has(...) part of the selector ensures a couple things:\n * 1. This will only apply within a page view since the content\n * must be a subsequent-sibling of the header (~ ion-content).\n * 2. This will only apply when that content has a collapse header (ion-header[collapse=\"condense\"])\n *\n * We use opacity: 0 to avoid a layout shift.\n * We target both the attribute and the class in the event that the attribute\n * is not reflected on the host in some frameworks.\n *\n * Both headers should be scoped to iOS mode otherwise an MD app that uses an\n * iOS header may cause other MD headers to be unexpectedly hidden.\n */\nion-header.header-ios:not(.header-collapse-main):has(~ ion-content ion-header.header-ios[collapse=condense],\n~ ion-content ion-header.header-ios.header-collapse-condense) {\n  opacity: 0;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-header {\n  display: block;\n  position: relative;\n  order: -1;\n  width: 100%;\n  z-index: 10;\n}\n\nion-header ion-toolbar:first-of-type {\n  padding-top: var(--ion-safe-area-top, 0);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n.header-md {\n  box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.2), 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12);\n}\n\n.header-collapse-condense {\n  display: none;\n}\n\n.header-md.ion-no-border {\n  box-shadow: none;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h, writeTask } from \"@stencil/core\";\nimport { findIonContent, getScrollElement, printIonContentErrorMsg } from \"../../utils/content/index\";\nimport { inheritAriaAttributes } from \"../../utils/helpers\";\nimport { hostContext } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { cloneElement, createHeaderIndex, handleContentScroll, handleHeaderFade, handleToolbarIntersection, setHeaderActive, setToolbarBackgroundOpacity, } from \"./header.utils\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class Header {\n    constructor() {\n        this.inheritedAttributes = {};\n        this.setupFadeHeader = async (contentEl, condenseHeader) => {\n            const scrollEl = (this.scrollEl = await getScrollElement(contentEl));\n            /**\n             * Handle fading of toolbars on scroll\n             */\n            this.contentScrollCallback = () => {\n                handleHeaderFade(this.scrollEl, this.el, condenseHeader);\n            };\n            scrollEl.addEventListener('scroll', this.contentScrollCallback);\n            handleHeaderFade(this.scrollEl, this.el, condenseHeader);\n        };\n        this.collapse = undefined;\n        this.translucent = false;\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = inheritAriaAttributes(this.el);\n    }\n    componentDidLoad() {\n        this.checkCollapsibleHeader();\n    }\n    componentDidUpdate() {\n        this.checkCollapsibleHeader();\n    }\n    disconnectedCallback() {\n        this.destroyCollapsibleHeader();\n    }\n    async checkCollapsibleHeader() {\n        const mode = getIonMode(this);\n        if (mode !== 'ios') {\n            return;\n        }\n        const { collapse } = this;\n        const hasCondense = collapse === 'condense';\n        const hasFade = collapse === 'fade';\n        this.destroyCollapsibleHeader();\n        if (hasCondense) {\n            const pageEl = this.el.closest('ion-app,ion-page,.ion-page,page-inner');\n            const contentEl = pageEl ? findIonContent(pageEl) : null;\n            // Cloned elements are always needed in iOS transition\n            writeTask(() => {\n                const title = cloneElement('ion-title');\n                title.size = 'large';\n                cloneElement('ion-back-button');\n            });\n            await this.setupCondenseHeader(contentEl, pageEl);\n        }\n        else if (hasFade) {\n            const pageEl = this.el.closest('ion-app,ion-page,.ion-page,page-inner');\n            const contentEl = pageEl ? findIonContent(pageEl) : null;\n            if (!contentEl) {\n                printIonContentErrorMsg(this.el);\n                return;\n            }\n            const condenseHeader = contentEl.querySelector('ion-header[collapse=\"condense\"]');\n            await this.setupFadeHeader(contentEl, condenseHeader);\n        }\n    }\n    destroyCollapsibleHeader() {\n        if (this.intersectionObserver) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = undefined;\n        }\n        if (this.scrollEl && this.contentScrollCallback) {\n            this.scrollEl.removeEventListener('scroll', this.contentScrollCallback);\n            this.contentScrollCallback = undefined;\n        }\n        if (this.collapsibleMainHeader) {\n            this.collapsibleMainHeader.classList.remove('header-collapse-main');\n            this.collapsibleMainHeader = undefined;\n        }\n    }\n    async setupCondenseHeader(contentEl, pageEl) {\n        if (!contentEl || !pageEl) {\n            printIonContentErrorMsg(this.el);\n            return;\n        }\n        if (typeof IntersectionObserver === 'undefined') {\n            return;\n        }\n        this.scrollEl = await getScrollElement(contentEl);\n        const headers = pageEl.querySelectorAll('ion-header');\n        this.collapsibleMainHeader = Array.from(headers).find((header) => header.collapse !== 'condense');\n        if (!this.collapsibleMainHeader) {\n            return;\n        }\n        const mainHeaderIndex = createHeaderIndex(this.collapsibleMainHeader);\n        const scrollHeaderIndex = createHeaderIndex(this.el);\n        if (!mainHeaderIndex || !scrollHeaderIndex) {\n            return;\n        }\n        setHeaderActive(mainHeaderIndex, false);\n        setToolbarBackgroundOpacity(mainHeaderIndex.el, 0);\n        /**\n         * Handle interaction between toolbar collapse and\n         * showing/hiding content in the primary ion-header\n         * as well as progressively showing/hiding the main header\n         * border as the top-most toolbar collapses or expands.\n         */\n        const toolbarIntersection = (ev) => {\n            handleToolbarIntersection(ev, mainHeaderIndex, scrollHeaderIndex, this.scrollEl);\n        };\n        this.intersectionObserver = new IntersectionObserver(toolbarIntersection, {\n            root: contentEl,\n            threshold: [0.25, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1],\n        });\n        this.intersectionObserver.observe(scrollHeaderIndex.toolbars[scrollHeaderIndex.toolbars.length - 1].el);\n        /**\n         * Handle scaling of large iOS titles and\n         * showing/hiding border on last toolbar\n         * in primary header\n         */\n        this.contentScrollCallback = () => {\n            handleContentScroll(this.scrollEl, scrollHeaderIndex, contentEl);\n        };\n        this.scrollEl.addEventListener('scroll', this.contentScrollCallback);\n        writeTask(() => {\n            if (this.collapsibleMainHeader !== undefined) {\n                this.collapsibleMainHeader.classList.add('header-collapse-main');\n            }\n        });\n    }\n    render() {\n        const { translucent, inheritedAttributes } = this;\n        const mode = getIonMode(this);\n        const collapse = this.collapse || 'none';\n        // banner role must be at top level, so remove role if inside a menu\n        const roleType = hostContext('ion-menu', this.el) ? 'none' : 'banner';\n        return (h(Host, Object.assign({ key: 'c687314ef290793a9d633ad20cfc5eeb47621e31', role: roleType, class: {\n                [mode]: true,\n                // Used internally for styling\n                [`header-${mode}`]: true,\n                [`header-translucent`]: this.translucent,\n                [`header-collapse-${collapse}`]: true,\n                [`header-translucent-${mode}`]: this.translucent,\n            } }, inheritedAttributes), mode === 'ios' && translucent && h(\"div\", { key: 'b429996046082405a91e7c23f95516db0b736f12', class: \"header-background\" }), h(\"slot\", { key: 'e17a8965f8d3a33c1bfcb056c153d8242e5229fa' })));\n    }\n    static get is() { return \"ion-header\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"header.ios.scss\"],\n            \"md\": [\"header.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"header.ios.css\"],\n            \"md\": [\"header.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"collapse\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'condense' | 'fade'\",\n                    \"resolved\": \"\\\"condense\\\" | \\\"fade\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Describes the scroll effect that will be applied to the header.\\nOnly applies in iOS mode.\\n\\nTypically used for [Collapsible Large Titles](https://ionicframework.com/docs/api/title#collapsible-large-titles)\"\n                },\n                \"attribute\": \"collapse\",\n                \"reflect\": false\n            },\n            \"translucent\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the header will be translucent.\\nOnly applies when the mode is `\\\"ios\\\"` and the device supports\\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).\\n\\nNote: In order to scroll content behind the header, the `fullscreen`\\nattribute needs to be set on the content.\"\n                },\n                \"attribute\": \"translucent\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the input\n   *\n   * @prop --color: Color of the input text\n   *\n   * @prop --padding-top: Top padding of the input\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the input\n   * @prop --padding-bottom: Bottom padding of the input\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the input\n   *\n   * @prop --placeholder-color: Color of the input placeholder text\n   * @prop --placeholder-font-style: Font style of the input placeholder text\n   * @prop --placeholder-font-weight: Font weight of the input placeholder text\n   * @prop --placeholder-opacity: Opacity of the input placeholder text\n   *\n   * @prop --highlight-height: The height of the highlight on the input. Only applies to md mode.\n   * @prop --highlight-color-focused: The color of the highlight on the input when focused\n   * @prop --highlight-color-valid: The color of the highlight on the input when valid\n   * @prop --highlight-color-invalid: The color of the highlight on the input when invalid\n   *\n   * @prop --border-color: Color of the border below the input when using helper text, error text, or counter\n   * @prop --border-radius: Radius of the input. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.\n   * @prop --border-style: Style of the border below the input when using helper text, error text, or counter\n   * @prop --border-width: Width of the border below the input when using helper text, error text, or counter\n   */\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: var(--ion-placeholder-opacity, 0.6);\n  --padding-top: 0px;\n  --padding-end: 0px;\n  --padding-bottom: 0px;\n  --padding-start: 0px;\n  --background: transparent;\n  --color: initial;\n  --border-style: solid;\n  --highlight-color-focused: var(--ion-color-primary, #0054e9);\n  --highlight-color-valid: var(--ion-color-success, #2dd55b);\n  --highlight-color-invalid: var(--ion-color-danger, #c5000f);\n  /**\n   * This is a private API that is used to switch\n   * out the highlight color based on the state\n   * of the component without having to write\n   * different selectors for different fill variants.\n   */\n  --highlight-color: var(--highlight-color-focused);\n  display: block;\n  position: relative;\n  width: 100%;\n  min-height: 44px;\n  /* stylelint-disable-next-line all */\n  padding: 0 !important;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  z-index: 2;\n}\n\n:host-context(ion-item)[slot=start],\n:host-context(ion-item)[slot=end] {\n  width: auto;\n}\n\n:host(.ion-color) {\n  --highlight-color-focused: var(--ion-color-base);\n}\n\n/**\n * Since the label sits on top of the element,\n * the component needs to be taller otherwise the\n * label will appear too close to the input text.\n */\n:host(.input-label-placement-floating),\n:host(.input-label-placement-stacked) {\n  min-height: 56px;\n}\n\n.native-input {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  display: inline-block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  box-sizing: border-box;\n  appearance: none;\n  /**\n   * This ensures the input\n   * remains on top of any decoration\n   * that we render (particularly the\n   * outline border when fill=\"outline\").\n   * If we did not do this then Axe would\n   * be unable to determine the color\n   * contrast of the input.\n   */\n  z-index: 1;\n}\n.native-input::placeholder {\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n.native-input:-webkit-autofill {\n  background-color: transparent;\n}\n.native-input:invalid {\n  box-shadow: none;\n}\n.native-input::-ms-clear {\n  display: none;\n}\n\n.cloned-input {\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  pointer-events: none;\n}\n.cloned-input {\n  inset-inline-start: 0;\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n.input-clear-icon {\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: auto;\n  margin-bottom: auto;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  background-position: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  border: 0;\n  outline: none;\n  background-color: transparent;\n  background-repeat: no-repeat;\n  color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n  visibility: hidden;\n  appearance: none;\n}\n\n:host(.in-item-color) .input-clear-icon {\n  color: inherit;\n}\n\n/**\n * Normally, we would not want to use :focus\n * here because that would mean tapping the button\n * on mobile would focus it (and keep it focused).\n * However, the clear button always disappears after\n * being activated, so we never get to that state.\n */\n.input-clear-icon:focus {\n  opacity: 0.5;\n}\n\n:host(.has-value) .input-clear-icon {\n  visibility: visible;\n}\n\n.input-wrapper {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: stretch;\n  height: inherit;\n  min-height: inherit;\n  transition: background-color 15ms linear;\n  background: var(--background);\n  line-height: normal;\n}\n\n.native-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: center;\n  width: 100%;\n}\n\n:host(.ion-touched.ion-invalid) {\n  --highlight-color: var(--highlight-color-invalid);\n}\n\n/**\n * The component highlight is only shown\n * on focus, so we can safely set the valid\n * color state when valid. If we\n * set it when .has-focus is present then\n * the highlight color would change\n * from the valid color to the component's\n * color during the transition after the\n * component loses focus.\n */\n:host(.ion-valid) {\n  --highlight-color: var(--highlight-color-valid);\n}\n\n.input-bottom {\n  /**\n   * The bottom content should take on the start and end\n   * padding so it is always aligned with either the label\n   * or the start of the text input.\n   */\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 5px;\n  padding-bottom: 0;\n  display: flex;\n  justify-content: space-between;\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  font-size: 0.75rem;\n}\n\n/**\n * If the input has a validity state, the\n * border and label should reflect that as a color.\n * The invalid state should show if the input is\n * invalid and has already been touched.\n * The valid state should show if the input\n * is valid, has already been touched, and\n * is currently focused. Do not show the valid\n * highlight when the input is blurred.\n */\n:host(.has-focus.ion-valid),\n:host(.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Error text should only be shown when .ion-invalid is\n * present on the input. Otherwise the helper text should\n * be shown.\n */\n.input-bottom .error-text {\n  display: none;\n  color: var(--highlight-color-invalid);\n}\n\n.input-bottom .helper-text {\n  display: block;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n}\n\n:host(.ion-touched.ion-invalid) .input-bottom .error-text {\n  display: block;\n}\n\n:host(.ion-touched.ion-invalid) .input-bottom .helper-text {\n  display: none;\n}\n\n.input-bottom .counter {\n  /**\n   * Counter should always be at\n   * the end of the container even\n   * when no helper/error texts are used.\n   */\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n  white-space: nowrap;\n  padding-inline-start: 16px;\n}\n\n:host(.has-focus) input {\n  caret-color: var(--highlight-color);\n}\n\n.label-text-wrapper {\n  /**\n   * This causes the label to take up\n   * the entire height of its container\n   * while still keeping the text centered.\n   */\n  display: flex;\n  align-items: center;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   * However, we do not set the max\n   * width to 100% because then\n   * only the label would show and users\n   * would not be able to see what they are typing.\n   */\n  max-width: 200px;\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the input\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n}\n\n/**\n * We need to use two elements instead of\n * one. The .label-text-wrapper is responsible\n * for centering the label text vertically regardless\n * of the input height using flexbox.\n *\n * The .label-text element is responsible for controlling\n * overflow when label-placement=\"fixed\".\n * We want the ellipses to show up when the\n * fixed label overflows, but text-overflow: ellipsis only\n * works on block-level elements. A flex item is\n * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).\n */\n.label-text,\n::slotted([slot=label]) {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden,\n.input-outline-notch-hidden {\n  display: none;\n}\n\n.input-wrapper input {\n  /**\n   * When the floating label appears on top of the\n   * input, we need to fade the input out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL.\n */\n:host(.input-label-placement-start) .input-wrapper {\n  flex-direction: row;\n}\n\n:host(.input-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the input in LTR and\n * on the left in RTL.\n */\n:host(.input-label-placement-end) .input-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the input should be on the start\n * when the label sits at the end.\n */\n:host(.input-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.input-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.input-label-placement-fixed) .label-text {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Stacked: Label sits above the input and is scaled down.\n * Floating: Label sits over the input when the input has no\n * value and is blurred. Label sits above the input and is scaled\n * down when the input is focused or has a value.\n *\n */\n:host(.input-label-placement-stacked) .input-wrapper,\n:host(.input-label-placement-floating) .input-wrapper {\n  flex-direction: column;\n  align-items: start;\n}\n\n/**\n * Ensures that the label animates\n * up and to the left in LTR or\n * up and to the right in RTL.\n */\n:host(.input-label-placement-stacked) .label-text-wrapper,\n:host(.input-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  max-width: 100%;\n  /**\n   * The 2 ensures the label\n   * remains on top of any browser\n   * autofill background too.\n   */\n  z-index: 2;\n}\n:host-context([dir=rtl]):host(.input-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).input-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.input-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).input-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.input-label-placement-stacked:dir(rtl)) .label-text-wrapper, :host(.input-label-placement-floating:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n/**\n * Ensures the input does not\n * overlap the label.\n */\n:host(.input-label-placement-stacked) input,\n:host(.input-label-placement-floating) input {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 1px;\n  margin-bottom: 0;\n}\n\n/**\n * This makes the label sit over the input\n * when the input is blurred and has no value.\n */\n:host(.input-label-placement-floating) .label-text-wrapper {\n  transform: translateY(100%) scale(1);\n}\n\n/**\n * The input should be hidden when the label\n * is on top of the input. This prevents the label\n * from overlapping any placeholder value.\n */\n:host(.input-label-placement-floating) input {\n  opacity: 0;\n}\n\n:host(.has-focus.input-label-placement-floating) input,\n:host(.has-value.input-label-placement-floating) input {\n  opacity: 1;\n}\n\n/**\n * This makes the label sit above the input.\n */\n:host(.label-floating) .label-text-wrapper {\n  transform: translateY(50%) scale(0.75);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n::slotted([slot=start]:last-of-type) {\n  margin-inline-end: 16px;\n  margin-inline-start: 0;\n}\n\n::slotted([slot=end]:first-of-type) {\n  margin-inline-start: 16px;\n  margin-inline-end: 0;\n}\n\n/**\n * The input password toggle component should be hidden when the input is readonly/disabled\n * because it is not possible to edit a password.\n */\n:host([disabled]) ::slotted(ion-input-password-toggle),\n:host([readonly]) ::slotted(ion-input-password-toggle) {\n  display: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border-width: 0.55px;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));\n  --highlight-height: 0px;\n  font-size: inherit;\n}\n\n.input-clear-icon ion-icon {\n  width: 18px;\n  height: 18px;\n}\n\n:host(.input-disabled) {\n  opacity: 0.3;\n}\n\n/**\n * Slotted buttons have a lot of default padding that can\n * cause them to look misaligned from other pieces such\n * as the control's label, especially when using a clear\n * fill. We also make them circular to ensure that non-\n * clear buttons and the focus/hover state on clear ones\n * don't look too crowded.\n */\n::slotted(ion-button[slot=start].button-has-icon-only),\n::slotted(ion-button[slot=end].button-has-icon-only) {\n  --border-radius: 50%;\n  --padding-start: 0;\n  --padding-end: 0;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  aspect-ratio: 1;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the input\n   *\n   * @prop --color: Color of the input text\n   *\n   * @prop --padding-top: Top padding of the input\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the input\n   * @prop --padding-bottom: Bottom padding of the input\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the input\n   *\n   * @prop --placeholder-color: Color of the input placeholder text\n   * @prop --placeholder-font-style: Font style of the input placeholder text\n   * @prop --placeholder-font-weight: Font weight of the input placeholder text\n   * @prop --placeholder-opacity: Opacity of the input placeholder text\n   *\n   * @prop --highlight-height: The height of the highlight on the input. Only applies to md mode.\n   * @prop --highlight-color-focused: The color of the highlight on the input when focused\n   * @prop --highlight-color-valid: The color of the highlight on the input when valid\n   * @prop --highlight-color-invalid: The color of the highlight on the input when invalid\n   *\n   * @prop --border-color: Color of the border below the input when using helper text, error text, or counter\n   * @prop --border-radius: Radius of the input. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.\n   * @prop --border-style: Style of the border below the input when using helper text, error text, or counter\n   * @prop --border-width: Width of the border below the input when using helper text, error text, or counter\n   */\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: var(--ion-placeholder-opacity, 0.6);\n  --padding-top: 0px;\n  --padding-end: 0px;\n  --padding-bottom: 0px;\n  --padding-start: 0px;\n  --background: transparent;\n  --color: initial;\n  --border-style: solid;\n  --highlight-color-focused: var(--ion-color-primary, #0054e9);\n  --highlight-color-valid: var(--ion-color-success, #2dd55b);\n  --highlight-color-invalid: var(--ion-color-danger, #c5000f);\n  /**\n   * This is a private API that is used to switch\n   * out the highlight color based on the state\n   * of the component without having to write\n   * different selectors for different fill variants.\n   */\n  --highlight-color: var(--highlight-color-focused);\n  display: block;\n  position: relative;\n  width: 100%;\n  min-height: 44px;\n  /* stylelint-disable-next-line all */\n  padding: 0 !important;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  z-index: 2;\n}\n\n:host-context(ion-item)[slot=start],\n:host-context(ion-item)[slot=end] {\n  width: auto;\n}\n\n:host(.ion-color) {\n  --highlight-color-focused: var(--ion-color-base);\n}\n\n/**\n * Since the label sits on top of the element,\n * the component needs to be taller otherwise the\n * label will appear too close to the input text.\n */\n:host(.input-label-placement-floating),\n:host(.input-label-placement-stacked) {\n  min-height: 56px;\n}\n\n.native-input {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  display: inline-block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  box-sizing: border-box;\n  appearance: none;\n  /**\n   * This ensures the input\n   * remains on top of any decoration\n   * that we render (particularly the\n   * outline border when fill=\"outline\").\n   * If we did not do this then Axe would\n   * be unable to determine the color\n   * contrast of the input.\n   */\n  z-index: 1;\n}\n.native-input::placeholder {\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n.native-input:-webkit-autofill {\n  background-color: transparent;\n}\n.native-input:invalid {\n  box-shadow: none;\n}\n.native-input::-ms-clear {\n  display: none;\n}\n\n.cloned-input {\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  pointer-events: none;\n}\n.cloned-input {\n  inset-inline-start: 0;\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n.input-clear-icon {\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: auto;\n  margin-bottom: auto;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  background-position: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  border: 0;\n  outline: none;\n  background-color: transparent;\n  background-repeat: no-repeat;\n  color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n  visibility: hidden;\n  appearance: none;\n}\n\n:host(.in-item-color) .input-clear-icon {\n  color: inherit;\n}\n\n/**\n * Normally, we would not want to use :focus\n * here because that would mean tapping the button\n * on mobile would focus it (and keep it focused).\n * However, the clear button always disappears after\n * being activated, so we never get to that state.\n */\n.input-clear-icon:focus {\n  opacity: 0.5;\n}\n\n:host(.has-value) .input-clear-icon {\n  visibility: visible;\n}\n\n.input-wrapper {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: stretch;\n  height: inherit;\n  min-height: inherit;\n  transition: background-color 15ms linear;\n  background: var(--background);\n  line-height: normal;\n}\n\n.native-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: center;\n  width: 100%;\n}\n\n:host(.ion-touched.ion-invalid) {\n  --highlight-color: var(--highlight-color-invalid);\n}\n\n/**\n * The component highlight is only shown\n * on focus, so we can safely set the valid\n * color state when valid. If we\n * set it when .has-focus is present then\n * the highlight color would change\n * from the valid color to the component's\n * color during the transition after the\n * component loses focus.\n */\n:host(.ion-valid) {\n  --highlight-color: var(--highlight-color-valid);\n}\n\n.input-bottom {\n  /**\n   * The bottom content should take on the start and end\n   * padding so it is always aligned with either the label\n   * or the start of the text input.\n   */\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 5px;\n  padding-bottom: 0;\n  display: flex;\n  justify-content: space-between;\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  font-size: 0.75rem;\n}\n\n/**\n * If the input has a validity state, the\n * border and label should reflect that as a color.\n * The invalid state should show if the input is\n * invalid and has already been touched.\n * The valid state should show if the input\n * is valid, has already been touched, and\n * is currently focused. Do not show the valid\n * highlight when the input is blurred.\n */\n:host(.has-focus.ion-valid),\n:host(.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Error text should only be shown when .ion-invalid is\n * present on the input. Otherwise the helper text should\n * be shown.\n */\n.input-bottom .error-text {\n  display: none;\n  color: var(--highlight-color-invalid);\n}\n\n.input-bottom .helper-text {\n  display: block;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n}\n\n:host(.ion-touched.ion-invalid) .input-bottom .error-text {\n  display: block;\n}\n\n:host(.ion-touched.ion-invalid) .input-bottom .helper-text {\n  display: none;\n}\n\n.input-bottom .counter {\n  /**\n   * Counter should always be at\n   * the end of the container even\n   * when no helper/error texts are used.\n   */\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n  white-space: nowrap;\n  padding-inline-start: 16px;\n}\n\n:host(.has-focus) input {\n  caret-color: var(--highlight-color);\n}\n\n.label-text-wrapper {\n  /**\n   * This causes the label to take up\n   * the entire height of its container\n   * while still keeping the text centered.\n   */\n  display: flex;\n  align-items: center;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   * However, we do not set the max\n   * width to 100% because then\n   * only the label would show and users\n   * would not be able to see what they are typing.\n   */\n  max-width: 200px;\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the input\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n}\n\n/**\n * We need to use two elements instead of\n * one. The .label-text-wrapper is responsible\n * for centering the label text vertically regardless\n * of the input height using flexbox.\n *\n * The .label-text element is responsible for controlling\n * overflow when label-placement=\"fixed\".\n * We want the ellipses to show up when the\n * fixed label overflows, but text-overflow: ellipsis only\n * works on block-level elements. A flex item is\n * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).\n */\n.label-text,\n::slotted([slot=label]) {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden,\n.input-outline-notch-hidden {\n  display: none;\n}\n\n.input-wrapper input {\n  /**\n   * When the floating label appears on top of the\n   * input, we need to fade the input out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL.\n */\n:host(.input-label-placement-start) .input-wrapper {\n  flex-direction: row;\n}\n\n:host(.input-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the input in LTR and\n * on the left in RTL.\n */\n:host(.input-label-placement-end) .input-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the input should be on the start\n * when the label sits at the end.\n */\n:host(.input-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.input-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.input-label-placement-fixed) .label-text {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Stacked: Label sits above the input and is scaled down.\n * Floating: Label sits over the input when the input has no\n * value and is blurred. Label sits above the input and is scaled\n * down when the input is focused or has a value.\n *\n */\n:host(.input-label-placement-stacked) .input-wrapper,\n:host(.input-label-placement-floating) .input-wrapper {\n  flex-direction: column;\n  align-items: start;\n}\n\n/**\n * Ensures that the label animates\n * up and to the left in LTR or\n * up and to the right in RTL.\n */\n:host(.input-label-placement-stacked) .label-text-wrapper,\n:host(.input-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  max-width: 100%;\n  /**\n   * The 2 ensures the label\n   * remains on top of any browser\n   * autofill background too.\n   */\n  z-index: 2;\n}\n:host-context([dir=rtl]):host(.input-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).input-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.input-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).input-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.input-label-placement-stacked:dir(rtl)) .label-text-wrapper, :host(.input-label-placement-floating:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n/**\n * Ensures the input does not\n * overlap the label.\n */\n:host(.input-label-placement-stacked) input,\n:host(.input-label-placement-floating) input {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 1px;\n  margin-bottom: 0;\n}\n\n/**\n * This makes the label sit over the input\n * when the input is blurred and has no value.\n */\n:host(.input-label-placement-floating) .label-text-wrapper {\n  transform: translateY(100%) scale(1);\n}\n\n/**\n * The input should be hidden when the label\n * is on top of the input. This prevents the label\n * from overlapping any placeholder value.\n */\n:host(.input-label-placement-floating) input {\n  opacity: 0;\n}\n\n:host(.has-focus.input-label-placement-floating) input,\n:host(.has-value.input-label-placement-floating) input {\n  opacity: 1;\n}\n\n/**\n * This makes the label sit above the input.\n */\n:host(.label-floating) .label-text-wrapper {\n  transform: translateY(50%) scale(0.75);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n::slotted([slot=start]:last-of-type) {\n  margin-inline-end: 16px;\n  margin-inline-start: 0;\n}\n\n::slotted([slot=end]:first-of-type) {\n  margin-inline-start: 16px;\n  margin-inline-end: 0;\n}\n\n/**\n * The input password toggle component should be hidden when the input is readonly/disabled\n * because it is not possible to edit a password.\n */\n:host([disabled]) ::slotted(ion-input-password-toggle),\n:host([readonly]) ::slotted(ion-input-password-toggle) {\n  display: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.input-fill-solid) {\n  --background: var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));\n  --border-color: var(--ion-color-step-500, var(--ion-background-color-step-500, gray));\n  --border-radius: 4px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n  min-height: 56px;\n}\n\n/**\n * The solid fill style has a border\n * at the bottom of the input wrapper.\n * As a result, the border on the \"bottom\n * content\" is not needed.\n */\n:host(.input-fill-solid) .input-wrapper {\n  border-bottom: var(--border-width) var(--border-style) var(--border-color);\n}\n\n/**\n * If the input has a validity state, the\n * border should reflect that as a color.\n */\n:host(.has-focus.input-fill-solid.ion-valid),\n:host(.input-fill-solid.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n:host(.input-fill-solid) .input-bottom {\n  border-top: none;\n}\n\n/**\n * Background and border should be\n * slightly darker on hover.\n */\n@media (any-hover: hover) {\n  :host(.input-fill-solid:hover) {\n    --background: var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6));\n    --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n  }\n}\n/**\n * Background and border should be\n * much darker on focus.\n */\n:host(.input-fill-solid.has-focus) {\n  --background: var(--ion-color-step-150, var(--ion-background-color-step-150, #d9d9d9));\n  --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n}\n\n:host(.input-fill-solid) .input-wrapper {\n  /**\n   * Only the top left and top right borders should.\n   * have a radius when using a solid fill.\n   */\n  border-start-start-radius: var(--border-radius);\n  border-start-end-radius: var(--border-radius);\n  border-end-end-radius: 0px;\n  border-end-start-radius: 0px;\n}\n\n:host(.label-floating.input-fill-solid.input-label-placement-floating) .label-text-wrapper {\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.input-fill-outline) {\n  --border-color: var(--ion-color-step-300, var(--ion-background-color-step-300, #b3b3b3));\n  --border-radius: 4px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n  min-height: 56px;\n}\n\n:host(.input-fill-outline.input-shape-round) {\n  --border-radius: 28px;\n  --padding-start: 32px;\n  --padding-end: 32px;\n}\n\n/**\n * If the input has a validity state, the\n * border should reflect that as a color.\n */\n:host(.has-focus.input-fill-outline.ion-valid),\n:host(.input-fill-outline.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Border should be\n * slightly darker on hover.\n */\n@media (any-hover: hover) {\n  :host(.input-fill-outline:hover) {\n    --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n  }\n}\n/**\n * The border should get thicker\n * and take on component color when\n * the input is focused.\n */\n:host(.input-fill-outline.has-focus) {\n  --border-width: var(--highlight-height);\n  --border-color: var(--highlight-color);\n}\n\n/**\n * The bottom content should never have\n * a border with the outline style.\n */\n:host(.input-fill-outline) .input-bottom {\n  border-top: none;\n}\n\n/**\n * Outline inputs do not have a bottom border.\n * Instead, they have a border that wraps the\n * input + label.\n */\n:host(.input-fill-outline) .input-wrapper {\n  border-bottom: none;\n}\n\n:host(.input-fill-outline.input-label-placement-stacked) .label-text-wrapper,\n:host(.input-fill-outline.input-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  position: absolute;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   */\n  max-width: calc(100% - var(--padding-start) - var(--padding-end));\n}\n:host-context([dir=rtl]):host(.input-fill-outline.input-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).input-fill-outline.input-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.input-fill-outline.input-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).input-fill-outline.input-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.input-fill-outline.input-label-placement-stacked:dir(rtl)) .label-text-wrapper, :host(.input-fill-outline.input-label-placement-floating:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n/**\n * The label should appear on top of an outline\n * container that overlaps it so it is always clickable.\n */\n:host(.input-fill-outline) .label-text-wrapper,\n:host(.input-fill-outline) .label-text-wrapper {\n  position: relative;\n}\n\n/**\n * This makes the label sit above the input.\n */\n:host(.label-floating.input-fill-outline) .label-text-wrapper {\n  transform: translateY(-32%) scale(0.75);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   */\n  max-width: calc((100% - var(--padding-start) - var(--padding-end) - 8px) / 0.75);\n}\n\n/**\n * This ensures that the input does not\n * overlap the floating label while still\n * remaining visually centered.\n */\n:host(.input-fill-outline.input-label-placement-stacked) input,\n:host(.input-fill-outline.input-label-placement-floating) input {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 6px;\n  margin-bottom: 6px;\n}\n\n:host(.input-fill-outline) .input-outline-container {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.input-fill-outline) .input-outline-start,\n:host(.input-fill-outline) .input-outline-end {\n  pointer-events: none;\n}\n\n/**\n * By default, each piece of the container should have\n * a top and bottom border. This gives the appearance\n * of a unified container with a border.\n */\n:host(.input-fill-outline) .input-outline-start,\n:host(.input-fill-outline) .input-outline-notch,\n:host(.input-fill-outline) .input-outline-end {\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  border-bottom: var(--border-width) var(--border-style) var(--border-color);\n}\n\n/**\n * Ensures long labels do not cause the notch to flow\n * out of bounds.\n */\n:host(.input-fill-outline) .input-outline-notch {\n  max-width: calc(100% - var(--padding-start) - var(--padding-end));\n}\n\n/**\n * This element ensures that the notch used\n * the size of the scaled text so that the\n * border cut out is the correct width.\n * The text in this element should not\n * be interactive.\n */\n:host(.input-fill-outline) .notch-spacer {\n  /**\n   * We need $input-md-floating-label-padding of padding on the right.\n   * However, we also subtracted $input-md-floating-label-padding from\n   * the width of .input-outline-start\n   * to create space, so we need to take\n   * that into consideration here.\n   */\n  -webkit-padding-end: 8px;\n  padding-inline-end: 8px;\n  font-size: calc(1em * 0.75);\n  opacity: 0;\n  pointer-events: none;\n  /**\n   * The spacer currently inherits\n   * border-box sizing from the Ionic reset styles.\n   * However, we do not want to include padding in\n   * the calculation of the element dimensions.\n   * This code can be removed if input is updated\n   * to use the Shadow DOM.\n   */\n  box-sizing: content-box;\n}\n\n:host(.input-fill-outline) .input-outline-start {\n  border-start-start-radius: var(--border-radius);\n  border-start-end-radius: 0px;\n  border-end-end-radius: 0px;\n  border-end-start-radius: var(--border-radius);\n  -webkit-border-start: var(--border-width) var(--border-style) var(--border-color);\n  border-inline-start: var(--border-width) var(--border-style) var(--border-color);\n  /**\n   * There should be spacing between the translated text\n   * and .input-outline-start. However, we can't add this\n   * spacing onto the notch because it would cause the\n   * label to look like it is not aligned with the\n   * text input. Instead, we subtract a few pixels from\n   * this element.\n   */\n  width: calc(var(--padding-start) - 4px);\n}\n\n:host(.input-fill-outline) .input-outline-end {\n  -webkit-border-end: var(--border-width) var(--border-style) var(--border-color);\n  border-inline-end: var(--border-width) var(--border-style) var(--border-color);\n  border-start-start-radius: 0px;\n  border-start-end-radius: var(--border-radius);\n  border-end-end-radius: var(--border-radius);\n  border-end-start-radius: 0px;\n  /**\n   * The ending outline fragment\n   * should take up the remaining free space.\n   */\n  flex-grow: 1;\n}\n\n/**\n * When the input either has focus or a value,\n * there should be a \"cut out\" at the top for\n * the floating/stacked label. We simulate this \"cut out\"\n * by removing the top border from the notch fragment.\n */\n:host(.label-floating.input-fill-outline) .input-outline-notch {\n  border-top: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border-width: 1px;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));\n  --highlight-height: 2px;\n  font-size: inherit;\n}\n\n.input-clear-icon ion-icon {\n  width: 22px;\n  height: 22px;\n}\n\n:host(.input-disabled) {\n  opacity: 0.38;\n}\n\n/**\n * If the input has a validity state, the\n * border and label should reflect that as a color.\n */\n:host(.has-focus.ion-valid),\n:host(.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n.input-bottom .counter {\n  letter-spacing: 0.0333333333em;\n}\n\n/**\n * When the input is focused the label should\n * take on the highlight color. This should\n * only apply to floating or stacked labels.\n */\n:host(.input-label-placement-floating.has-focus) .label-text-wrapper,\n:host(.input-label-placement-stacked.has-focus) .label-text-wrapper {\n  color: var(--highlight-color);\n}\n\n:host(.has-focus.input-label-placement-floating.ion-valid) .label-text-wrapper,\n:host(.input-label-placement-floating.ion-touched.ion-invalid) .label-text-wrapper,\n:host(.has-focus.input-label-placement-stacked.ion-valid) .label-text-wrapper,\n:host(.input-label-placement-stacked.ion-touched.ion-invalid) .label-text-wrapper {\n  color: var(--highlight-color);\n}\n\n.input-highlight {\n  bottom: -1px;\n  position: absolute;\n  width: 100%;\n  height: var(--highlight-height);\n  transform: scale(0);\n  transition: transform 200ms;\n  background: var(--highlight-color);\n}\n.input-highlight {\n  inset-inline-start: 0;\n}\n\n:host(.has-focus) .input-highlight {\n  transform: scale(1);\n}\n\n/**\n * Adjust the highlight up by 1px\n * so it is not cut off by the\n * the item's line (if one is present).\n */\n:host(.in-item) .input-highlight {\n  bottom: 0;\n}\n:host(.in-item) .input-highlight {\n  inset-inline-start: 0;\n}\n\n:host(.input-shape-round) {\n  --border-radius: 16px;\n}\n\n/**\n * Slotted buttons have a lot of default padding that can\n * cause them to look misaligned from other pieces such\n * as the control's label, especially when using a clear\n * fill. We also make them circular to ensure that non-\n * clear buttons and the focus/hover state on clear ones\n * don't look too crowded.\n */\n::slotted(ion-button[slot=start].button-has-icon-only),\n::slotted(ion-button[slot=end].button-has-icon-only) {\n  --border-radius: 50%;\n  --padding-start: 8px;\n  --padding-end: 8px;\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  aspect-ratio: 1;\n  min-height: 40px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, forceUpdate, h } from \"@stencil/core\";\nimport { createNotchController } from \"../../utils/forms/index\";\nimport { inheritAriaAttributes, debounceEvent, inheritAttributes, componentOnReady } from \"../../utils/helpers\";\nimport { createSlotMutationController } from \"../../utils/slot-mutation-controller\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { closeCircle, closeSharp } from \"ionicons/icons\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { getCounterText } from \"./input.utils\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot label - The label text to associate with the input. Use the `labelPlacement` property to control where the label is placed relative to the input. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)\n * @slot start - Content to display at the leading edge of the input. (EXPERIMENTAL)\n * @slot end - Content to display at the trailing edge of the input. (EXPERIMENTAL)\n */\nexport class Input {\n    constructor() {\n        this.inputId = `ion-input-${inputIds++}`;\n        this.inheritedAttributes = {};\n        this.isComposing = false;\n        /**\n         * `true` if the input was cleared as a result of the user typing\n         * with `clearOnEdit` enabled.\n         *\n         * Resets when the input loses focus.\n         */\n        this.didInputClearOnEdit = false;\n        this.onInput = (ev) => {\n            const input = ev.target;\n            if (input) {\n                this.value = input.value || '';\n            }\n            this.emitInputChange(ev);\n        };\n        this.onChange = (ev) => {\n            this.emitValueChange(ev);\n        };\n        this.onBlur = (ev) => {\n            this.hasFocus = false;\n            if (this.focusedValue !== this.value) {\n                /**\n                 * Emits the `ionChange` event when the input value\n                 * is different than the value when the input was focused.\n                 */\n                this.emitValueChange(ev);\n            }\n            this.didInputClearOnEdit = false;\n            this.ionBlur.emit(ev);\n        };\n        this.onFocus = (ev) => {\n            this.hasFocus = true;\n            this.focusedValue = this.value;\n            this.ionFocus.emit(ev);\n        };\n        this.onKeydown = (ev) => {\n            this.checkClearOnEdit(ev);\n        };\n        this.onCompositionStart = () => {\n            this.isComposing = true;\n        };\n        this.onCompositionEnd = () => {\n            this.isComposing = false;\n        };\n        this.clearTextInput = (ev) => {\n            if (this.clearInput && !this.readonly && !this.disabled && ev) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                // Attempt to focus input again after pressing clear button\n                this.setFocus();\n            }\n            this.value = '';\n            this.emitInputChange(ev);\n        };\n        this.hasFocus = false;\n        this.color = undefined;\n        this.autocapitalize = 'off';\n        this.autocomplete = 'off';\n        this.autocorrect = 'off';\n        this.autofocus = false;\n        this.clearInput = false;\n        this.clearInputIcon = undefined;\n        this.clearOnEdit = undefined;\n        this.counter = false;\n        this.counterFormatter = undefined;\n        this.debounce = undefined;\n        this.disabled = false;\n        this.enterkeyhint = undefined;\n        this.errorText = undefined;\n        this.fill = undefined;\n        this.inputmode = undefined;\n        this.helperText = undefined;\n        this.label = undefined;\n        this.labelPlacement = 'start';\n        this.max = undefined;\n        this.maxlength = undefined;\n        this.min = undefined;\n        this.minlength = undefined;\n        this.multiple = undefined;\n        this.name = this.inputId;\n        this.pattern = undefined;\n        this.placeholder = undefined;\n        this.readonly = false;\n        this.required = false;\n        this.shape = undefined;\n        this.spellcheck = false;\n        this.step = undefined;\n        this.type = 'text';\n        this.value = '';\n    }\n    debounceChanged() {\n        const { ionInput, debounce, originalIonInput } = this;\n        /**\n         * If debounce is undefined, we have to manually revert the ionInput emitter in case\n         * debounce used to be set to a number. Otherwise, the event would stay debounced.\n         */\n        this.ionInput = debounce === undefined ? originalIonInput !== null && originalIonInput !== void 0 ? originalIonInput : ionInput : debounceEvent(ionInput, debounce);\n    }\n    /**\n     * Whenever the type on the input changes we need\n     * to update the internal type prop on the password\n     * toggle so that that correct icon is shown.\n     */\n    onTypeChange() {\n        const passwordToggle = this.el.querySelector('ion-input-password-toggle');\n        if (passwordToggle) {\n            passwordToggle.type = this.type;\n        }\n    }\n    /**\n     * Update the native input element when the value changes\n     */\n    valueChanged() {\n        const nativeInput = this.nativeInput;\n        const value = this.getValue();\n        if (nativeInput && nativeInput.value !== value && !this.isComposing) {\n            /**\n             * Assigning the native input's value on attribute\n             * value change, allows `ionInput` implementations\n             * to override the control's value.\n             *\n             * Used for patterns such as input trimming (removing whitespace),\n             * or input masking.\n             */\n            nativeInput.value = value;\n        }\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, ['tabindex', 'title', 'data-form-type']));\n    }\n    connectedCallback() {\n        const { el } = this;\n        this.slotMutationController = createSlotMutationController(el, ['label', 'start', 'end'], () => forceUpdate(this));\n        this.notchController = createNotchController(el, () => this.notchSpacerEl, () => this.labelSlot);\n        this.debounceChanged();\n        if (Build.isBrowser) {\n            document.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n                detail: this.el,\n            }));\n        }\n    }\n    componentDidLoad() {\n        this.originalIonInput = this.ionInput;\n        /**\n         * Set the type on the password toggle in the event that this input's\n         * type was set async and does not match the default type for the password toggle.\n         * This can happen when the type is bound using a JS framework binding syntax\n         * such as [type] in Angular.\n         */\n        this.onTypeChange();\n        this.debounceChanged();\n    }\n    componentDidRender() {\n        var _a;\n        (_a = this.notchController) === null || _a === void 0 ? void 0 : _a.calculateNotchWidth();\n    }\n    disconnectedCallback() {\n        if (Build.isBrowser) {\n            document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n                detail: this.el,\n            }));\n        }\n        if (this.slotMutationController) {\n            this.slotMutationController.destroy();\n            this.slotMutationController = undefined;\n        }\n        if (this.notchController) {\n            this.notchController.destroy();\n            this.notchController = undefined;\n        }\n    }\n    /**\n     * Sets focus on the native `input` in `ion-input`. Use this method instead of the global\n     * `input.focus()`.\n     *\n     * Developers who wish to focus an input when a page enters\n     * should call `setFocus()` in the `ionViewDidEnter()` lifecycle method.\n     *\n     * Developers who wish to focus an input when an overlay is presented\n     * should call `setFocus` after `didPresent` has resolved.\n     *\n     * See [managing focus](/docs/developing/managing-focus) for more information.\n     */\n    async setFocus() {\n        if (this.nativeInput) {\n            this.nativeInput.focus();\n        }\n    }\n    /**\n     * Returns the native `<input>` element used under the hood.\n     */\n    async getInputElement() {\n        /**\n         * If this gets called in certain early lifecycle hooks (ex: Vue onMounted),\n         * nativeInput won't be defined yet with the custom elements build, so wait for it to load in.\n         */\n        if (!this.nativeInput) {\n            await new Promise((resolve) => componentOnReady(this.el, resolve));\n        }\n        return Promise.resolve(this.nativeInput);\n    }\n    /**\n     * Emits an `ionChange` event.\n     *\n     * This API should be called for user committed changes.\n     * This API should not be used for external value changes.\n     */\n    emitValueChange(event) {\n        const { value } = this;\n        // Checks for both null and undefined values\n        const newValue = value == null ? value : value.toString();\n        // Emitting a value change should update the internal state for tracking the focused value\n        this.focusedValue = newValue;\n        this.ionChange.emit({ value: newValue, event });\n    }\n    /**\n     * Emits an `ionInput` event.\n     */\n    emitInputChange(event) {\n        const { value } = this;\n        // Checks for both null and undefined values\n        const newValue = value == null ? value : value.toString();\n        this.ionInput.emit({ value: newValue, event });\n    }\n    shouldClearOnEdit() {\n        const { type, clearOnEdit } = this;\n        return clearOnEdit === undefined ? type === 'password' : clearOnEdit;\n    }\n    getValue() {\n        return typeof this.value === 'number' ? this.value.toString() : (this.value || '').toString();\n    }\n    checkClearOnEdit(ev) {\n        if (!this.shouldClearOnEdit()) {\n            return;\n        }\n        /**\n         * The following keys do not modify the\n         * contents of the input. As a result, pressing\n         * them should not edit the input.\n         *\n         * We can't check to see if the value of the input\n         * was changed because we call checkClearOnEdit\n         * in a keydown listener, and the key has not yet\n         * been added to the input.\n         */\n        const IGNORED_KEYS = ['Enter', 'Tab', 'Shift', 'Meta', 'Alt', 'Control'];\n        const pressedIgnoredKey = IGNORED_KEYS.includes(ev.key);\n        /**\n         * Clear the input if the control has not been previously cleared during focus.\n         * Do not clear if the user hitting enter to submit a form.\n         */\n        if (!this.didInputClearOnEdit && this.hasValue() && !pressedIgnoredKey) {\n            this.value = '';\n            this.emitInputChange(ev);\n        }\n        /**\n         * Pressing an IGNORED_KEYS first and\n         * then an allowed key will cause the input to not\n         * be cleared.\n         */\n        if (!pressedIgnoredKey) {\n            this.didInputClearOnEdit = true;\n        }\n    }\n    hasValue() {\n        return this.getValue().length > 0;\n    }\n    /**\n     * Renders the helper text or error text values\n     */\n    renderHintText() {\n        const { helperText, errorText } = this;\n        return [h(\"div\", { class: \"helper-text\" }, helperText), h(\"div\", { class: \"error-text\" }, errorText)];\n    }\n    renderCounter() {\n        const { counter, maxlength, counterFormatter, value } = this;\n        if (counter !== true || maxlength === undefined) {\n            return;\n        }\n        return h(\"div\", { class: \"counter\" }, getCounterText(value, maxlength, counterFormatter));\n    }\n    /**\n     * Responsible for rendering helper text,\n     * error text, and counter. This element should only\n     * be rendered if hint text is set or counter is enabled.\n     */\n    renderBottomContent() {\n        const { counter, helperText, errorText, maxlength } = this;\n        /**\n         * undefined and empty string values should\n         * be treated as not having helper/error text.\n         */\n        const hasHintText = !!helperText || !!errorText;\n        const hasCounter = counter === true && maxlength !== undefined;\n        if (!hasHintText && !hasCounter) {\n            return;\n        }\n        return (h(\"div\", { class: \"input-bottom\" }, this.renderHintText(), this.renderCounter()));\n    }\n    renderLabel() {\n        const { label } = this;\n        return (h(\"div\", { class: {\n                'label-text-wrapper': true,\n                'label-text-wrapper-hidden': !this.hasLabel,\n            } }, label === undefined ? h(\"slot\", { name: \"label\" }) : h(\"div\", { class: \"label-text\" }, label)));\n    }\n    /**\n     * Gets any content passed into the `label` slot,\n     * not the <slot> definition.\n     */\n    get labelSlot() {\n        return this.el.querySelector('[slot=\"label\"]');\n    }\n    /**\n     * Returns `true` if label content is provided\n     * either by a prop or a content. If you want\n     * to get the plaintext value of the label use\n     * the `labelText` getter instead.\n     */\n    get hasLabel() {\n        return this.label !== undefined || this.labelSlot !== null;\n    }\n    /**\n     * Renders the border container\n     * when fill=\"outline\".\n     */\n    renderLabelContainer() {\n        const mode = getIonMode(this);\n        const hasOutlineFill = mode === 'md' && this.fill === 'outline';\n        if (hasOutlineFill) {\n            /**\n             * The outline fill has a special outline\n             * that appears around the input and the label.\n             * Certain stacked and floating label placements cause the\n             * label to translate up and create a \"cut out\"\n             * inside of that border by using the notch-spacer element.\n             */\n            return [\n                h(\"div\", { class: \"input-outline-container\" }, h(\"div\", { class: \"input-outline-start\" }), h(\"div\", { class: {\n                        'input-outline-notch': true,\n                        'input-outline-notch-hidden': !this.hasLabel,\n                    } }, h(\"div\", { class: \"notch-spacer\", \"aria-hidden\": \"true\", ref: (el) => (this.notchSpacerEl = el) }, this.label)), h(\"div\", { class: \"input-outline-end\" })),\n                this.renderLabel(),\n            ];\n        }\n        /**\n         * If not using the outline style,\n         * we can render just the label.\n         */\n        return this.renderLabel();\n    }\n    render() {\n        const { disabled, fill, readonly, shape, inputId, labelPlacement, el, hasFocus, clearInputIcon } = this;\n        const mode = getIonMode(this);\n        const value = this.getValue();\n        const inItem = hostContext('ion-item', this.el);\n        const shouldRenderHighlight = mode === 'md' && fill !== 'outline' && !inItem;\n        const defaultClearIcon = mode === 'ios' ? closeCircle : closeSharp;\n        const clearIconData = clearInputIcon !== null && clearInputIcon !== void 0 ? clearInputIcon : defaultClearIcon;\n        const hasValue = this.hasValue();\n        const hasStartEndSlots = el.querySelector('[slot=\"start\"], [slot=\"end\"]') !== null;\n        /**\n         * If the label is stacked, it should always sit above the input.\n         * For floating labels, the label should move above the input if\n         * the input has a value, is focused, or has anything in either\n         * the start or end slot.\n         *\n         * If there is content in the start slot, the label would overlap\n         * it if not forced to float. This is also applied to the end slot\n         * because with the default or solid fills, the input is not\n         * vertically centered in the container, but the label is. This\n         * causes the slots and label to appear vertically offset from each\n         * other when the label isn't floating above the input. This doesn't\n         * apply to the outline fill, but this was not accounted for to keep\n         * things consistent.\n         *\n         * TODO(FW-5592): Remove hasStartEndSlots condition\n         */\n        const labelShouldFloat = labelPlacement === 'stacked' || (labelPlacement === 'floating' && (hasValue || hasFocus || hasStartEndSlots));\n        return (h(Host, { key: '907ce98a82b5cfae5a08504cd79e00a2330b7444', class: createColorClasses(this.color, {\n                [mode]: true,\n                'has-value': hasValue,\n                'has-focus': hasFocus,\n                'label-floating': labelShouldFloat,\n                [`input-fill-${fill}`]: fill !== undefined,\n                [`input-shape-${shape}`]: shape !== undefined,\n                [`input-label-placement-${labelPlacement}`]: true,\n                'in-item': inItem,\n                'in-item-color': hostContext('ion-item.ion-color', this.el),\n                'input-disabled': disabled,\n            }) }, h(\"label\", { key: '59d5bb45d2a5b828bba0ed8687a632a551e2f4d8', class: \"input-wrapper\", htmlFor: inputId }, this.renderLabelContainer(), h(\"div\", { key: 'f93f129d08246d0e9a601c100d718534d6403853', class: \"native-wrapper\" }, h(\"slot\", { key: '54eeb1a6bace662b7eb0d7e27180ea3d7e3a3729', name: \"start\" }), h(\"input\", Object.assign({ key: 'b3e0be55bc1a4a539ae3b0fdcf7fc078723cca16', class: \"native-input\", ref: (input) => (this.nativeInput = input), id: inputId, disabled: disabled, autoCapitalize: this.autocapitalize, autoComplete: this.autocomplete, autoCorrect: this.autocorrect, autoFocus: this.autofocus, enterKeyHint: this.enterkeyhint, inputMode: this.inputmode, min: this.min, max: this.max, minLength: this.minlength, maxLength: this.maxlength, multiple: this.multiple, name: this.name, pattern: this.pattern, placeholder: this.placeholder || '', readOnly: readonly, required: this.required, spellcheck: this.spellcheck, step: this.step, type: this.type, value: value, onInput: this.onInput, onChange: this.onChange, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeydown, onCompositionstart: this.onCompositionStart, onCompositionend: this.onCompositionEnd }, this.inheritedAttributes)), this.clearInput && !readonly && !disabled && (h(\"button\", { key: '5f6373504a6d0d074bfbf875c794d45ea2748175', \"aria-label\": \"reset\", type: \"button\", class: \"input-clear-icon\", onPointerDown: (ev) => {\n                /**\n                 * This prevents mobile browsers from\n                 * blurring the input when the clear\n                 * button is activated.\n                 */\n                ev.preventDefault();\n            }, onFocusin: (ev) => {\n                /**\n                 * Prevent the focusin event from bubbling otherwise it will cause the focusin\n                 * event listener in scroll assist to fire. When this fires, focus will be moved\n                 * back to the input even if the clear button was never tapped. This poses issues\n                 * for screen readers as it means users would be unable to swipe past the clear button.\n                 */\n                ev.stopPropagation();\n            }, onClick: this.clearTextInput }, h(\"ion-icon\", { key: '230d77973aa83458ceb32bf52e3abe9bc322cfe6', \"aria-hidden\": \"true\", icon: clearIconData }))), h(\"slot\", { key: '9d69ac6e8a3c4b2b303dba2478f82695d5755ed2', name: \"end\" })), shouldRenderHighlight && h(\"div\", { key: 'ac61f16237ce731e0745ab72d0fc3f066252464a', class: \"input-highlight\" })), this.renderBottomContent()));\n    }\n    static get is() { return \"ion-input\"; }\n    static get encapsulation() { return \"scoped\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"input.ios.scss\"],\n            \"md\": [\"input.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"input.ios.css\"],\n            \"md\": [\"input.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"autocapitalize\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\\nAvailable options: `\\\"off\\\"`, `\\\"none\\\"`, `\\\"on\\\"`, `\\\"sentences\\\"`, `\\\"words\\\"`, `\\\"characters\\\"`.\"\n                },\n                \"attribute\": \"autocapitalize\",\n                \"reflect\": false,\n                \"defaultValue\": \"'off'\"\n            },\n            \"autocomplete\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"AutocompleteTypes\",\n                    \"resolved\": \"\\\"name\\\" | \\\"email\\\" | \\\"tel\\\" | \\\"url\\\" | \\\"on\\\" | \\\"off\\\" | \\\"honorific-prefix\\\" | \\\"given-name\\\" | \\\"additional-name\\\" | \\\"family-name\\\" | \\\"honorific-suffix\\\" | \\\"nickname\\\" | \\\"username\\\" | \\\"new-password\\\" | \\\"current-password\\\" | \\\"one-time-code\\\" | \\\"organization-title\\\" | \\\"organization\\\" | \\\"street-address\\\" | \\\"address-line1\\\" | \\\"address-line2\\\" | \\\"address-line3\\\" | \\\"address-level4\\\" | \\\"address-level3\\\" | \\\"address-level2\\\" | \\\"address-level1\\\" | \\\"country\\\" | \\\"country-name\\\" | \\\"postal-code\\\" | \\\"cc-name\\\" | \\\"cc-given-name\\\" | \\\"cc-additional-name\\\" | \\\"cc-family-name\\\" | \\\"cc-number\\\" | \\\"cc-exp\\\" | \\\"cc-exp-month\\\" | \\\"cc-exp-year\\\" | \\\"cc-csc\\\" | \\\"cc-type\\\" | \\\"transaction-currency\\\" | \\\"transaction-amount\\\" | \\\"language\\\" | \\\"bday\\\" | \\\"bday-day\\\" | \\\"bday-month\\\" | \\\"bday-year\\\" | \\\"sex\\\" | \\\"tel-country-code\\\" | \\\"tel-national\\\" | \\\"tel-area-code\\\" | \\\"tel-local\\\" | \\\"tel-extension\\\" | \\\"impp\\\" | \\\"photo\\\"\",\n                    \"references\": {\n                        \"AutocompleteTypes\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::AutocompleteTypes\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Indicates whether the value of the control can be automatically completed by the browser.\"\n                },\n                \"attribute\": \"autocomplete\",\n                \"reflect\": false,\n                \"defaultValue\": \"'off'\"\n            },\n            \"autocorrect\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'on' | 'off'\",\n                    \"resolved\": \"\\\"off\\\" | \\\"on\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Whether auto correction should be enabled when the user is entering/editing the text value.\"\n                },\n                \"attribute\": \"autocorrect\",\n                \"reflect\": false,\n                \"defaultValue\": \"'off'\"\n            },\n            \"autofocus\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Sets the [`autofocus` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus) on the native input element.\\n\\nThis may not be sufficient for the element to be focused on page load. See [managing focus](/docs/developing/managing-focus) for more information.\"\n                },\n                \"attribute\": \"autofocus\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"clearInput\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\"\n                },\n                \"attribute\": \"clear-input\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"clearInputIcon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The icon to use for the clear button. Only applies when `clearInput` is set to `true`.\"\n                },\n                \"attribute\": \"clear-input-icon\",\n                \"reflect\": false\n            },\n            \"clearOnEdit\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\\\"password\\\"`, `false` for all other types.\"\n                },\n                \"attribute\": \"clear-on-edit\",\n                \"reflect\": false\n            },\n            \"counter\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, a character counter will display the ratio of characters used and the total character limit. Developers must also set the `maxlength` property for the counter to be calculated correctly.\"\n                },\n                \"attribute\": \"counter\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"counterFormatter\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"(inputLength: number, maxLength: number) => string\",\n                    \"resolved\": \"((inputLength: number, maxLength: number) => string) | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A callback used to format the counter text.\\nBy default the counter text is set to \\\"itemLength / maxLength\\\".\\n\\nSee https://ionicframework.com/docs/troubleshooting/runtime#accessing-this\\nif you need to access `this` from within the callback.\"\n                }\n            },\n            \"debounce\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.\"\n                },\n                \"attribute\": \"debounce\",\n                \"reflect\": false\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the input.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"enterkeyhint\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'\",\n                    \"resolved\": \"\\\"done\\\" | \\\"enter\\\" | \\\"go\\\" | \\\"next\\\" | \\\"previous\\\" | \\\"search\\\" | \\\"send\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A hint to the browser for which enter key to display.\\nPossible values: `\\\"enter\\\"`, `\\\"done\\\"`, `\\\"go\\\"`, `\\\"next\\\"`,\\n`\\\"previous\\\"`, `\\\"search\\\"`, and `\\\"send\\\"`.\"\n                },\n                \"attribute\": \"enterkeyhint\",\n                \"reflect\": false\n            },\n            \"errorText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Text that is placed under the input and displayed when an error is detected.\"\n                },\n                \"attribute\": \"error-text\",\n                \"reflect\": false\n            },\n            \"fill\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'outline' | 'solid'\",\n                    \"resolved\": \"\\\"outline\\\" | \\\"solid\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The fill for the item. If `\\\"solid\\\"` the item will have a background. If\\n`\\\"outline\\\"` the item will be transparent with a border. Only available in `md` mode.\"\n                },\n                \"attribute\": \"fill\",\n                \"reflect\": false\n            },\n            \"inputmode\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'\",\n                    \"resolved\": \"\\\"decimal\\\" | \\\"email\\\" | \\\"none\\\" | \\\"numeric\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"url\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A hint to the browser for which keyboard to display.\\nPossible values: `\\\"none\\\"`, `\\\"text\\\"`, `\\\"tel\\\"`, `\\\"url\\\"`,\\n`\\\"email\\\"`, `\\\"numeric\\\"`, `\\\"decimal\\\"`, and `\\\"search\\\"`.\"\n                },\n                \"attribute\": \"inputmode\",\n                \"reflect\": false\n            },\n            \"helperText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Text that is placed under the input and displayed when no error is detected.\"\n                },\n                \"attribute\": \"helper-text\",\n                \"reflect\": false\n            },\n            \"label\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The visible label associated with the input.\\n\\nUse this if you need to render a plaintext label.\\n\\nThe `label` property will take priority over the `label` slot if both are used.\"\n                },\n                \"attribute\": \"label\",\n                \"reflect\": false\n            },\n            \"labelPlacement\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'floating' | 'stacked' | 'fixed'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"fixed\\\" | \\\"floating\\\" | \\\"stacked\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Where to place the label relative to the input.\\n`\\\"start\\\"`: The label will appear to the left of the input in LTR and to the right in RTL.\\n`\\\"end\\\"`: The label will appear to the right of the input in LTR and to the left in RTL.\\n`\\\"floating\\\"`: The label will appear smaller and above the input when the input is focused or it has a value. Otherwise it will appear on top of the input.\\n`\\\"stacked\\\"`: The label will appear smaller and above the input regardless even when the input is blurred or has no value.\\n`\\\"fixed\\\"`: The label has the same behavior as `\\\"start\\\"` except it also has a fixed width. Long text will be truncated with ellipses (\\\"...\\\").\"\n                },\n                \"attribute\": \"label-placement\",\n                \"reflect\": false,\n                \"defaultValue\": \"'start'\"\n            },\n            \"max\": {\n                \"type\": \"any\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | number\",\n                    \"resolved\": \"number | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The maximum value, which must not be less than its minimum (min attribute) value.\"\n                },\n                \"attribute\": \"max\",\n                \"reflect\": false\n            },\n            \"maxlength\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.\"\n                },\n                \"attribute\": \"maxlength\",\n                \"reflect\": false\n            },\n            \"min\": {\n                \"type\": \"any\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | number\",\n                    \"resolved\": \"number | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The minimum value, which must not be greater than its maximum (max attribute) value.\"\n                },\n                \"attribute\": \"min\",\n                \"reflect\": false\n            },\n            \"minlength\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.\"\n                },\n                \"attribute\": \"minlength\",\n                \"reflect\": false\n            },\n            \"multiple\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `\\\"email\\\"`, otherwise it is ignored.\"\n                },\n                \"attribute\": \"multiple\",\n                \"reflect\": false\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The name of the control, which is submitted with the form data.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.inputId\"\n            },\n            \"pattern\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `\\\"text\\\"`, `\\\"search\\\"`, `\\\"tel\\\"`, `\\\"url\\\"`, `\\\"email\\\"`, `\\\"date\\\"`, or `\\\"password\\\"`, otherwise it is ignored. When the type attribute is `\\\"date\\\"`, `pattern` will only be used in browsers that do not support the `\\\"date\\\"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.\"\n                },\n                \"attribute\": \"pattern\",\n                \"reflect\": false\n            },\n            \"placeholder\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Instructional text that shows before the input has a value.\\nThis property applies only when the `type` property is set to `\\\"email\\\"`,\\n`\\\"number\\\"`, `\\\"password\\\"`, `\\\"search\\\"`, `\\\"tel\\\"`, `\\\"text\\\"`, or `\\\"url\\\"`, otherwise it is ignored.\"\n                },\n                \"attribute\": \"placeholder\",\n                \"reflect\": false\n            },\n            \"readonly\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot modify the value.\"\n                },\n                \"attribute\": \"readonly\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"required\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user must fill in a value before submitting a form.\"\n                },\n                \"attribute\": \"required\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"shape\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'round'\",\n                    \"resolved\": \"\\\"round\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The shape of the input. If \\\"round\\\" it will have an increased border radius.\"\n                },\n                \"attribute\": \"shape\",\n                \"reflect\": false\n            },\n            \"spellcheck\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the element will have its spelling and grammar checked.\"\n                },\n                \"attribute\": \"spellcheck\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"step\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Works with the min and max attributes to limit the increments at which a value can be set.\\nPossible values are: `\\\"any\\\"` or a positive floating point number.\"\n                },\n                \"attribute\": \"step\",\n                \"reflect\": false\n            },\n            \"type\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"TextFieldTypes\",\n                    \"resolved\": \"\\\"date\\\" | \\\"datetime-local\\\" | \\\"email\\\" | \\\"month\\\" | \\\"number\\\" | \\\"password\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"time\\\" | \\\"url\\\" | \\\"week\\\"\",\n                    \"references\": {\n                        \"TextFieldTypes\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::TextFieldTypes\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The type of control to display. The default type is text.\"\n                },\n                \"attribute\": \"type\",\n                \"reflect\": false,\n                \"defaultValue\": \"'text'\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"string | number | null\",\n                    \"resolved\": \"null | number | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The value of the input.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false,\n                \"defaultValue\": \"''\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"hasFocus\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionInput\",\n                \"name\": \"ionInput\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `ionInput` event is fired each time the user modifies the input's value.\\nUnlike the `ionChange` event, the `ionInput` event is fired for each alteration\\nto the input's value. This typically happens for each keystroke as the user types.\\n\\nFor elements that accept text input (`type=text`, `type=tel`, etc.), the interface\\nis [`InputEvent`](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent); for others,\\nthe interface is [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event). If\\nthe input is cleared on edit, the type is `null`.\"\n                },\n                \"complexType\": {\n                    \"original\": \"InputInputEventDetail\",\n                    \"resolved\": \"InputInputEventDetail\",\n                    \"references\": {\n                        \"InputInputEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./input-interface\",\n                            \"id\": \"src/components/input/input-interface.ts::InputInputEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionChange\",\n                \"name\": \"ionChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `ionChange` event is fired when the user modifies the input's value.\\nUnlike the `ionInput` event, the `ionChange` event is only fired when changes\\nare committed, not as the user types.\\n\\nDepending on the way the users interacts with the element, the `ionChange`\\nevent fires at a different moment:\\n- When the user commits the change explicitly (e.g. by selecting a date\\nfrom a date picker for `<ion-input type=\\\"date\\\">`, pressing the \\\"Enter\\\" key, etc.).\\n- When the element loses focus after its value has changed: for elements\\nwhere the user's interaction is typing.\\n\\nThis event will not emit when programmatically setting the `value` property.\"\n                },\n                \"complexType\": {\n                    \"original\": \"InputChangeEventDetail\",\n                    \"resolved\": \"InputChangeEventDetail\",\n                    \"references\": {\n                        \"InputChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./input-interface\",\n                            \"id\": \"src/components/input/input-interface.ts::InputChangeEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionBlur\",\n                \"name\": \"ionBlur\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the input loses focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"FocusEvent\",\n                    \"resolved\": \"FocusEvent\",\n                    \"references\": {\n                        \"FocusEvent\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::FocusEvent\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionFocus\",\n                \"name\": \"ionFocus\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the input has focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"FocusEvent\",\n                    \"resolved\": \"FocusEvent\",\n                    \"references\": {\n                        \"FocusEvent\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::FocusEvent\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets focus on the native `input` in `ion-input`. Use this method instead of the global\\n`input.focus()`.\\n\\nDevelopers who wish to focus an input when a page enters\\nshould call `setFocus()` in the `ionViewDidEnter()` lifecycle method.\\n\\nDevelopers who wish to focus an input when an overlay is presented\\nshould call `setFocus` after `didPresent` has resolved.\\n\\nSee [managing focus](/docs/developing/managing-focus) for more information.\",\n                    \"tags\": []\n                }\n            },\n            \"getInputElement\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<HTMLInputElement>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"HTMLInputElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLInputElement\"\n                        }\n                    },\n                    \"return\": \"Promise<HTMLInputElement>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns the native `<input>` element used under the hood.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"debounce\",\n                \"methodName\": \"debounceChanged\"\n            }, {\n                \"propName\": \"type\",\n                \"methodName\": \"onTypeChange\"\n            }, {\n                \"propName\": \"value\",\n                \"methodName\": \"valueChanged\"\n            }];\n    }\n}\nlet inputIds = 0;\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  display: flex;\n  flex-wrap: wrap;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class Row {\n    render() {\n        return (h(Host, { key: '813c9a7f6782d2cf8eb27f30d3ab28e6f3122868', class: getIonMode(this) }, h(\"slot\", { key: '356bec4d4d408ea63d6b431b06465d5b7bcbff71' })));\n    }\n    static get is() { return \"ion-row\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"row.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"row.css\"]\n        };\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --color: Text color of the title\n   */\n  --color: initial;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  transform: translateZ(0);\n  color: var(--color);\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n.toolbar-title {\n  display: block;\n  width: 100%;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  pointer-events: auto;\n}\n\n:host(.title-small) .toolbar-title {\n  white-space: normal;\n}\n\n:host {\n  top: 0;\n  -webkit-padding-start: 90px;\n  padding-inline-start: 90px;\n  -webkit-padding-end: 90px;\n  padding-inline-end: 90px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  transform: translateZ(0);\n  font-size: min(1.0625rem, 20.4px);\n  font-weight: 600;\n  text-align: center;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n:host {\n  inset-inline-start: 0;\n}\n\n:host(.title-small) {\n  -webkit-padding-start: 9px;\n  padding-inline-start: 9px;\n  -webkit-padding-end: 9px;\n  padding-inline-end: 9px;\n  padding-top: 6px;\n  padding-bottom: 16px;\n  position: relative;\n  font-size: min(0.8125rem, 23.4px);\n  font-weight: normal;\n}\n\n:host(.title-large) {\n  -webkit-padding-start: 12px;\n  padding-inline-start: 12px;\n  -webkit-padding-end: 12px;\n  padding-inline-end: 12px;\n  padding-top: 2px;\n  padding-bottom: 4px;\n  transform-origin: left center;\n  position: static;\n  align-items: flex-end;\n  min-width: 100%;\n  font-size: min(2.125rem, 61.2px);\n  font-weight: 700;\n  text-align: start;\n}\n\n:host(.title-large.title-rtl) {\n  transform-origin: right center;\n}\n\n:host(.title-large.ion-cloned-element) {\n  --color: var(--ion-text-color, #000);\n  font-family: var(--ion-font-family);\n}\n\n:host(.title-large) .toolbar-title {\n  transform-origin: inherit;\n  /**\n   * During a page transition\n   * if the large title and the back button\n   * texts match up, the back button should be\n   * scaled to roughly match the dimensions of\n   * the large title text. The following line\n   * ensures that the scale values are accurate.\n   */\n  width: auto;\n}\n:host-context([dir=rtl]):host(.title-large) .toolbar-title, :host-context([dir=rtl]).title-large .toolbar-title {\n  transform-origin: calc(100% - inherit);\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.title-large:dir(rtl)) .toolbar-title {\n    transform-origin: calc(100% - inherit);\n  }\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --color: Text color of the title\n   */\n  --color: initial;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  transform: translateZ(0);\n  color: var(--color);\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n.toolbar-title {\n  display: block;\n  width: 100%;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  pointer-events: auto;\n}\n\n:host(.title-small) .toolbar-title {\n  white-space: normal;\n}\n\n:host {\n  -webkit-padding-start: 20px;\n  padding-inline-start: 20px;\n  -webkit-padding-end: 20px;\n  padding-inline-end: 20px;\n  padding-top: 0;\n  padding-bottom: 0;\n  font-size: 1.25rem;\n  font-weight: 500;\n  letter-spacing: 0.0125em;\n}\n\n:host(.title-small) {\n  width: 100%;\n  height: 100%;\n  font-size: 0.9375rem;\n  font-weight: normal;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { createColorClasses } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class ToolbarTitle {\n    constructor() {\n        this.color = undefined;\n        this.size = undefined;\n    }\n    sizeChanged() {\n        this.emitStyle();\n    }\n    connectedCallback() {\n        this.emitStyle();\n    }\n    emitStyle() {\n        const size = this.getSize();\n        this.ionStyle.emit({\n            [`title-${size}`]: true,\n        });\n    }\n    getSize() {\n        return this.size !== undefined ? this.size : 'default';\n    }\n    render() {\n        const mode = getIonMode(this);\n        const size = this.getSize();\n        return (h(Host, { key: '5a58dc437a6f4257244bbdd7e9a682a17d8c9a6b', class: createColorClasses(this.color, {\n                [mode]: true,\n                [`title-${size}`]: true,\n                'title-rtl': document.dir === 'rtl',\n            }) }, h(\"div\", { key: '58682ea7b8f47a08adfad419b5c76b34784c6501', class: \"toolbar-title\" }, h(\"slot\", { key: '8a9248534e4c3076f5e2dfda38ef86069796851c' }))));\n    }\n    static get is() { return \"ion-title\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"title.ios.scss\"],\n            \"md\": [\"title.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"title.ios.css\"],\n            \"md\": [\"title.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"size\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'large' | 'small'\",\n                    \"resolved\": \"\\\"large\\\" | \\\"small\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The size of the toolbar title.\"\n                },\n                \"attribute\": \"size\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionStyle\",\n                \"name\": \"ionStyle\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Emitted when the styles change.\"\n                },\n                \"complexType\": {\n                    \"original\": \"StyleEventDetail\",\n                    \"resolved\": \"StyleEventDetail\",\n                    \"references\": {\n                        \"StyleEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::StyleEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"size\",\n                \"methodName\": \"sizeChanged\"\n            }];\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the toolbar\n   *\n   * @prop --border-color: Color of the toolbar border\n   * @prop --border-style: Style of the toolbar border\n   * @prop --border-width: Width of the toolbar border\n   *\n   * @prop --color: Color of the toolbar text\n   *\n   * @prop --min-height: Minimum height of the toolbar\n   *\n   * @prop --opacity: Opacity of the toolbar background\n   *\n   * @prop --padding-top: Top padding of the toolbar\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the toolbar\n   * @prop --padding-bottom: Bottom padding of the toolbar\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the toolbar\n   */\n  --border-width: 0;\n  --border-style: solid;\n  --opacity: 1;\n  --opacity-scale: 1;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: block;\n  position: relative;\n  width: 100%;\n  padding-right: var(--ion-safe-area-right);\n  padding-left: var(--ion-safe-area-left);\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  contain: content;\n  z-index: 10;\n  box-sizing: border-box;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-color) .toolbar-background {\n  background: var(--ion-color-base);\n}\n\n.toolbar-container {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  display: flex;\n  position: relative;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  min-height: var(--min-height);\n  contain: content;\n  overflow: hidden;\n  z-index: 10;\n  box-sizing: border-box;\n}\n\n.toolbar-background {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  transform: translateZ(0);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--background);\n  contain: strict;\n  opacity: calc(var(--opacity) * var(--opacity-scale));\n  z-index: -1;\n  pointer-events: none;\n}\n\n::slotted(ion-progress-bar) {\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background: var(--ion-toolbar-background, var(--ion-color-step-50, var(--ion-background-color-step-50, #f7f7f7)));\n  --color: var(--ion-toolbar-color, var(--ion-text-color, #000));\n  --border-color: var(--ion-toolbar-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.2)))));\n  --padding-top: 3px;\n  --padding-bottom: 3px;\n  --padding-start: 4px;\n  --padding-end: 4px;\n  --min-height: 44px;\n}\n\n.toolbar-content {\n  flex: 1;\n  order: 4;\n  min-width: 0;\n}\n\n:host(.toolbar-segment) .toolbar-content {\n  display: inline-flex;\n}\n\n:host(.toolbar-searchbar) .toolbar-container {\n  padding-top: 0;\n  padding-bottom: 0;\n}\n\n:host(.toolbar-searchbar) ::slotted(*) {\n  align-self: start;\n}\n\n:host(.toolbar-searchbar) ::slotted(ion-chip) {\n  margin-top: 3px;\n}\n\n::slotted(ion-buttons) {\n  min-height: 38px;\n}\n\n::slotted([slot=start]) {\n  order: 2;\n}\n\n::slotted([slot=secondary]) {\n  order: 3;\n}\n\n::slotted([slot=primary]) {\n  order: 5;\n  text-align: end;\n}\n\n::slotted([slot=end]) {\n  order: 6;\n  text-align: end;\n}\n\n:host(.toolbar-title-large) .toolbar-container {\n  flex-wrap: wrap;\n  align-items: flex-start;\n}\n\n:host(.toolbar-title-large) .toolbar-content ion-title {\n  flex: 1;\n  order: 8;\n  min-width: 100%;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the toolbar\n   *\n   * @prop --border-color: Color of the toolbar border\n   * @prop --border-style: Style of the toolbar border\n   * @prop --border-width: Width of the toolbar border\n   *\n   * @prop --color: Color of the toolbar text\n   *\n   * @prop --min-height: Minimum height of the toolbar\n   *\n   * @prop --opacity: Opacity of the toolbar background\n   *\n   * @prop --padding-top: Top padding of the toolbar\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the toolbar\n   * @prop --padding-bottom: Bottom padding of the toolbar\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the toolbar\n   */\n  --border-width: 0;\n  --border-style: solid;\n  --opacity: 1;\n  --opacity-scale: 1;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: block;\n  position: relative;\n  width: 100%;\n  padding-right: var(--ion-safe-area-right);\n  padding-left: var(--ion-safe-area-left);\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  contain: content;\n  z-index: 10;\n  box-sizing: border-box;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-color) .toolbar-background {\n  background: var(--ion-color-base);\n}\n\n.toolbar-container {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  display: flex;\n  position: relative;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  min-height: var(--min-height);\n  contain: content;\n  overflow: hidden;\n  z-index: 10;\n  box-sizing: border-box;\n}\n\n.toolbar-background {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  transform: translateZ(0);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--background);\n  contain: strict;\n  opacity: calc(var(--opacity) * var(--opacity-scale));\n  z-index: -1;\n  pointer-events: none;\n}\n\n::slotted(ion-progress-bar) {\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background: var(--ion-toolbar-background, var(--ion-background-color, #fff));\n  --color: var(--ion-toolbar-color, var(--ion-text-color, #424242));\n  --border-color: var(--ion-toolbar-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, #c1c4cd))));\n  --padding-top: 0;\n  --padding-bottom: 0;\n  --padding-start: 0;\n  --padding-end: 0;\n  --min-height: 56px;\n}\n\n.toolbar-content {\n  flex: 1;\n  order: 3;\n  min-width: 0;\n  max-width: 100%;\n}\n\n::slotted(.buttons-first-slot) {\n  -webkit-margin-start: 4px;\n  margin-inline-start: 4px;\n}\n\n::slotted(.buttons-last-slot) {\n  -webkit-margin-end: 4px;\n  margin-inline-end: 4px;\n}\n\n::slotted([slot=start]) {\n  order: 2;\n}\n\n::slotted([slot=secondary]) {\n  order: 4;\n}\n\n::slotted([slot=primary]) {\n  order: 5;\n  text-align: end;\n}\n\n::slotted([slot=end]) {\n  order: 6;\n  text-align: end;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, forceUpdate, h } from \"@stencil/core\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot - Content is placed between the named slots if provided without a slot.\n * @slot start - Content is placed to the left of the toolbar text in LTR, and to the right in RTL.\n * @slot secondary - Content is placed to the left of the toolbar text in `ios` mode, and directly to the right in `md` mode.\n * @slot primary - Content is placed to the right of the toolbar text in `ios` mode, and to the far right in `md` mode.\n * @slot end - Content is placed to the right of the toolbar text in LTR, and to the left in RTL.\n */\nexport class Toolbar {\n    constructor() {\n        this.childrenStyles = new Map();\n        this.color = undefined;\n    }\n    componentWillLoad() {\n        const buttons = Array.from(this.el.querySelectorAll('ion-buttons'));\n        const firstButtons = buttons.find((button) => {\n            return button.slot === 'start';\n        });\n        if (firstButtons) {\n            firstButtons.classList.add('buttons-first-slot');\n        }\n        const buttonsReversed = buttons.reverse();\n        const lastButtons = buttonsReversed.find((button) => button.slot === 'end') ||\n            buttonsReversed.find((button) => button.slot === 'primary') ||\n            buttonsReversed.find((button) => button.slot === 'secondary');\n        if (lastButtons) {\n            lastButtons.classList.add('buttons-last-slot');\n        }\n    }\n    childrenStyle(ev) {\n        ev.stopPropagation();\n        const tagName = ev.target.tagName;\n        const updatedStyles = ev.detail;\n        const newStyles = {};\n        const childStyles = this.childrenStyles.get(tagName) || {};\n        let hasStyleChange = false;\n        Object.keys(updatedStyles).forEach((key) => {\n            const childKey = `toolbar-${key}`;\n            const newValue = updatedStyles[key];\n            if (newValue !== childStyles[childKey]) {\n                hasStyleChange = true;\n            }\n            if (newValue) {\n                newStyles[childKey] = true;\n            }\n        });\n        if (hasStyleChange) {\n            this.childrenStyles.set(tagName, newStyles);\n            forceUpdate(this);\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        const childStyles = {};\n        this.childrenStyles.forEach((value) => {\n            Object.assign(childStyles, value);\n        });\n        return (h(Host, { key: '4bb3a55001408a3bdf033af76b9196cb96c07c09', class: Object.assign(Object.assign({}, childStyles), createColorClasses(this.color, {\n                [mode]: true,\n                'in-toolbar': hostContext('ion-toolbar', this.el),\n            })) }, h(\"div\", { key: '0891db157d6e028c6d03696f13fb510ea91b0296', class: \"toolbar-background\" }), h(\"div\", { key: '95fbc870d808f74af4bb18cd8f8ec8c7828a9e0b', class: \"toolbar-container\" }, h(\"slot\", { key: '84d4a9644660fe00ca085055ca8d12f3647531ad', name: \"start\" }), h(\"slot\", { key: 'fd361dc9c9979f59aed2fedcf94629506fae62b0', name: \"secondary\" }), h(\"div\", { key: '54d2b28616a4627c55766f66dc453707752758a6', class: \"toolbar-content\" }, h(\"slot\", { key: '8f65e0830cce7135640b90eb694e282cb7e5efd2' })), h(\"slot\", { key: 'c78be11a207c8674f222543646398636956087e6', name: \"primary\" }), h(\"slot\", { key: 'ab25e1601ccaa8cb0d81921b849bcb7402aa7826', name: \"end\" }))));\n    }\n    static get is() { return \"ion-toolbar\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"toolbar.ios.scss\"],\n            \"md\": [\"toolbar.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"toolbar.ios.css\"],\n            \"md\": [\"toolbar.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get listeners() {\n        return [{\n                \"name\": \"ionStyle\",\n                \"method\": \"childrenStyle\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }];\n    }\n}\n"],"mappings":"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"}