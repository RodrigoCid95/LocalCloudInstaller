{
  "version": 3,
  "sources": ["../../libraries/index.ts", "../../node_modules/px.io/injectables/config.js", "../../node_modules/px.io/injectables/emitters.js", "../../libraries/builder-connector.ts", "../../libraries/classes/APIList.ts", "../../libraries/dev-mode.ts", "../../libraries/paths.ts", "../../libraries/classes/Encrypt.ts", "../../libraries/encryptor.ts", "../../libraries/database/index.ts", "../../libraries/database/recycle_bin.sql", "../../libraries/database/shared.sql", "../../libraries/database/apps.sql", "../../libraries/database/users_to_apps.sql", "../../libraries/database/permissions.sql", "../../libraries/database/secure_sources.sql", "../../libraries/process.ts"],
  "sourcesContent": ["export * from './builder-connector'\nexport * from './dev-mode'\nexport * from './paths'\nexport * from './encryptor'\nexport * from './database'\nexport * from './process'", "const configPath = './config.js'\nexport const configs = require(configPath).configs", "export class Emitter {\n  #CALLBACKS = {}\n  on(callback) {\n    const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16)\n    })\n    this.#CALLBACKS[uuid] = callback\n    return uuid\n  }\n  off(uuid) {\n    delete this.#CALLBACKS[uuid]\n  }\n  emit(args) {\n    const callbacks = Object.values(this.#CALLBACKS)\n    for (const callback of callbacks) {\n      callback(args)\n    }\n  }\n}\nexport class Emitters {\n  #EMITTERS = new Map()\n  on(event, callback) {\n    if (!this.#EMITTERS.has(event)) {\n      this.#EMITTERS.set(event, Emitters.createEmitter())\n    }\n    return this.#EMITTERS.get(event)?.on(callback) || ''\n  }\n  off(event, uuid) {\n    this.#EMITTERS.get(event)?.off(uuid)\n  }\n  emit(event, args) {\n    this.#EMITTERS.get(event)?.emit(args)\n  }\n}\nEmitters.createEmitter = () => {\n  return new Emitter()\n}\nexport const moduleEmitters = new Emitters()", "import { buildSync } from 'esbuild'\nimport * as API_LIST from 'libraries/classes/APIList'\n\nconst privateAPIList: string[] = []\nconst dashAPIList: string[] = []\nconst publicAPIList: string[] = []\nconst allAPIList: string[] = []\n\nclass Builder implements BuilderConnector.Class {\n  get privateAPIList() {\n    return privateAPIList\n  }\n  get dashAPIList() {\n    return dashAPIList\n  }\n  get publicAPIList() {\n    return publicAPIList\n  }\n  constructor() {\n    const entries = Object.entries(API_LIST)\n    for (const [_, value] of entries) {\n      const subEntries = Object.entries(value)\n      for (const [_, value2] of subEntries) {\n        if (typeof value2 === 'object') {\n          if (value2.freeForDashboard) {\n            dashAPIList.push(value2.name)\n            allAPIList.push(value2.name)\n          }\n          if (value2.public) {\n            publicAPIList.push(value2.name)\n            allAPIList.push(value2.name)\n          }\n        } else {\n          privateAPIList.push(value2)\n          allAPIList.push(value2)\n        }\n      }\n    }\n  }\n  build({ token, key, apis }: BuilderConnector.BuildOpts): string {\n    const modules = {}\n    for (const api of allAPIList) {\n      modules[`$${api}`] = apis ? apis.includes(api) ? 'true' : 'false' : 'true'\n    }\n    const content = buildSync({\n      entryPoints: [configs.get('builderConnector').mainPath],\n      bundle: true,\n      platform: 'browser',\n      define: {\n        TOKEN: `\"${token}\"`,\n        KEY: `\"${key}\"`,\n        IS_DEV: !token || !key ? 'true' : 'false',\n        ...modules\n      },\n      minify: Array.isArray(apis),\n      format: 'esm',\n      write: false,\n      inject: [configs.get('builderConnector').apiPath],\n      treeShaking: true,\n      sourcemap: 'inline'\n    })\n    return content.outputFiles[0].text\n  }\n}\n\nexport const builder = () => new Builder()", "export const APPS = {\n  APPS: 'APP_LIST',\n  APPS_BY_UID: 'APP_LIST_BY_UID',\n  INSTALL: 'INSTALL_APP',\n  UNINSTALL: 'UNINSTALL_APP'\n}\nexport const AUTH: APIPermissionList = {\n  INDEX: {\n    name: 'AUTH_STATUS',\n    public: true,\n    freeForDashboard: true\n  },\n  LOGIN: {\n    name: 'AUTH_LOGIN',\n    public: true,\n    freeForDashboard: false\n  },\n  LOGOUT: {\n    name: 'AUTH_LOGOUT',\n    public: true,\n    freeForDashboard: true\n  }\n}\nexport const FS = {\n  SHARED_DRIVE: 'ACCESS_SHARED_FILE_LIST',\n  USER_DRIVE: 'ACCESS_USER_FILE_LIST',\n  MKDIR_SHARED_DRIVE: 'CREATE_SHARED_DIR',\n  MKDIR_USER_DRIVE: 'CREATE_USER_DIR',\n  UPLOAD_SHARED_DRIVE: 'UPLOAD_SHARED_FILE',\n  UPLOAD_USER_DRIVE: 'UPLOAD_USER_FILE',\n  RM_SHARED_DRIVE: 'REMOVE_SHARED_FILES_AND_DIRECTORIES',\n  RM_USER_DRIVE: 'REMOVE_USER_FILES_AND_DIRECTORIES',\n  COPY: 'COPY_FILES_AND_DIRECTORIES',\n  MOVE: 'MOVE_FILES_AND_DIRECTORIES',\n  RENAME: 'RENAME_FILES_AND_DIRECTORIES'\n}\nexport const PERMISSIONS = {\n  FIND: 'PERMISSION_LIST',\n  ENABLE: 'ENABLE_PERMISSION',\n  DISABLE: 'DISABLE_PERMISSION'\n}\nexport const PROFILE: APIPermissionList = {\n  INDEX: {\n    name: 'PROFILE_INFO',\n    public: false,\n    freeForDashboard: true\n  },\n  APPS: {\n    name: 'PROFILE_APP_LIST',\n    public: false,\n    freeForDashboard: true\n  },\n  READ_CONFIG: {\n    name: 'PROFILE_READ_CONFIG',\n    public: false,\n    freeForDashboard: true\n  },\n  WRITE_CONFIG: {\n    name: 'PROFILE_WRITE_CONFIG',\n    public: false,\n    freeForDashboard: true\n  },\n  UPDATE: {\n    name: 'UPDATE_PROFILE_INFO',\n    public: false,\n    freeForDashboard: true\n  },\n  UPDATE_PASSWORD: {\n    name: 'UPDATE_PASSWORD',\n    public: false,\n    freeForDashboard: true\n  }\n}\nexport const RECYCLE_BIN = {\n  LIST: 'LIST_RECYCLE_BIN',\n  CREATE: 'ADD_ITEMS_TO_RECYCLE_BIN',\n  RESTORE: 'RESTORE_ITEMS_TO_RECYCLE_BIN',\n  DELETE: 'DELETE_ITEMS_TO_RECYCLE_BIN',\n  CLEAN: 'CLEAN_RECYCLE_BIN'\n}\nexport const SHARED = {\n  INDEX: 'SHARED_LIST',\n  CREATE: 'SHARED_CREATE',\n  DELETE: 'SHARED_DELETE'\n}\nexport const SOURCES = {\n  FIND: 'SOURCE_LIST',\n  ENABLE: 'ENABLE_SOURCE',\n  DISABLE: 'DISABLE_SOURCE'\n}\nexport const USERS = {\n  INDEX: 'USER_LIST',\n  USER: 'USER_INFO',\n  CREATE: 'CREATE_USER',\n  UPDATE: 'UPDATE_USER_INFO',\n  DELETE: 'DELETE_USER',\n  ASSIGN_APP: 'ASSIGN_APP_TO_USER',\n  UNASSIGN_APP: 'UNASSIGN_APP_TO_USER'\n}\nexport const STORE = {\n  STORAGE: 'STORAGE'\n}", "import fs from 'node:fs'\n\ndeclare const isRelease: boolean\n\nclass DevMode implements DevMode.Class {\n  #enable: boolean\n  get enable(): boolean {\n    return this.#enable\n  }\n  get user(): string {\n    return configs.get('devMode')?.user || process.env.USER as string || ''\n  }\n  constructor() {\n    if (isRelease) {\n      this.#enable = configs.get('devMode')?.enable || !fs.existsSync(configs.get('paths').system.path)\n    } else {\n      this.#enable = true\n    }\n  }\n}\n\nexport const devMode = () => new DevMode()", "import { spawn } from 'node:child_process'\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport ini from 'ini'\n\nclass Paths implements Paths.Class {\n  get samba(): string {\n    return this.config.samba\n  }\n  get shadow(): string {\n    return this.config.shadow\n  }\n  get passwd(): string {\n    return this.config.passwd\n  }\n  get groups(): string {\n    return this.config.groups\n  }\n  get system() {\n    return this.config.system.path\n  }\n  get database() {\n    return this.config.system.database\n  }\n  get apps() {\n    return this.config.system.apps\n  }\n  get appsTemplates() {\n    return this.config.system.appsViews\n  }\n  get storages() {\n    return this.config.system.storages\n  }\n  get users() {\n    return this.config.users.path\n  }\n  get shared() {\n    return this.config.users.shared\n  }\n  get recycleBin() {\n    return this.config.users.recycleBin\n  }\n  constructor(private config: Paths.Config) { }\n  getApp(packageName: string): string {\n    return path.join(this.apps, packageName)\n  }\n  getAppStorage(packageName: string): string {\n    return path.join(this.storages, packageName)\n  }\n  getAppGlobalStorage(packageName: string): string {\n    return path.join(this.storages, packageName, '.global')\n  }\n  getAppGlobalStorageItem({ packageName, item }: Paths.GetAppGlobalStorageItemOptions): string {\n    return path.join(this.storages, packageName, '.global', `${item}.json`)\n  }\n  getAppUserStorage({ packageName, user }: Paths.GetAppUserStorageOptions): string {\n    return path.join(this.storages, packageName, user)\n  }\n  getAppUserStorageItem({ packageName, user, item }: Paths.GetAppUserStorageItemOptions): string {\n    return path.join(this.storages, packageName, user, `${item}.json`)\n  }\n  getUser(name: string): string {\n    return path.join(this.config.users.path, name)\n  }\n  getRecycleBin(name: string): string {\n    return path.join(this.recycleBin, name)\n  }\n  getRecycleBinItem(name: string, id: string): string {\n    return path.join(this.recycleBin, name, id)\n  }\n  private resolve(segments: string[], verify = true): string | boolean {\n    const pathSegments = segments.filter(segment => segment !== '..')\n    const pathShared = path.join(...pathSegments)\n    if (verify) {\n      if (fs.existsSync(pathShared)) {\n        return pathShared\n      }\n      return false\n    }\n    return pathShared\n  }\n  resolveSharedPath({ segments, verify = true }: Paths.ResolveSharedPathArgs): string | boolean {\n    return this.resolve([this.shared, ...segments], verify)\n  }\n  resolveUserPath({ name, segments, verify = true }: Paths.ResolveUsersPathArgs): string | boolean {\n    return this.resolve([this.getUser(name), ...segments], verify)\n  }\n}\n\nexport const paths = async () => {\n  const paths = new Paths(configs.get('paths'))\n  if (!fs.existsSync(paths.system)) {\n    fs.mkdirSync(paths.system)\n  }\n  if (!fs.existsSync(paths.apps)) {\n    fs.mkdirSync(paths.apps)\n  }\n  const SMB_CONFIG = fs.readFileSync(paths.samba, 'utf8')\n  const smbConfig = ini.parse(SMB_CONFIG)\n  if (!smbConfig['Carpeta Compartida']) {\n    smbConfig['Carpeta Compartida'] = {\n      comment: 'Carpeta Compartida',\n      path: paths.shared,\n      browsable: 'yes',\n      writable: 'yes',\n      'guest ok': 'no',\n      'valid users': '@lc'\n    }\n    const smbStrConfig = ini.stringify(smbConfig)\n    fs.writeFileSync(paths.samba, smbStrConfig, 'utf8')\n    await new Promise<void>(resolve => {\n      const child_process = spawn('/etc/init.d/smbd', ['restart'])\n      child_process.on('close', resolve)\n      child_process.stdin.end()\n    })\n  }\n  moduleEmitters.emit('Paths:ready')\n  return paths\n}", "import crypto from 'node:crypto'\nimport { createHash, timingSafeEqual, randomInt } from \"node:crypto\"\nimport { Buffer } from \"node:buffer\"\n\ninterface IConf {\n  id: HashType\n  saltString: string\n  rounds: number\n  specifyRounds: boolean\n}\n\nenum HashType {\n  \"sha256\" = 5,\n  \"sha512\" = 6,\n}\n\ninterface IShuffleMap {\n  sha256: number[]\n  sha512: number[]\n}\n\nconst dictionary =\n  \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\n// prettier-ignore\nconst shuffleMap: IShuffleMap = {\n  sha256: [\n    20, 10, 0,\n    11, 1, 21,\n    2, 22, 12,\n    23, 13, 3,\n    14, 4, 24,\n    5, 25, 15,\n    26, 16, 6,\n    17, 7, 27,\n    8, 28, 18,\n    29, 19, 9,\n    30, 31\n  ],\n  sha512: [\n    42, 21, 0,\n    1, 43, 22,\n    23, 2, 44,\n    45, 24, 3,\n    4, 46, 25,\n    26, 5, 47,\n    48, 27, 6,\n    7, 49, 28,\n    29, 8, 50,\n    51, 30, 9,\n    10, 52, 31,\n    32, 11, 53,\n    54, 33, 12,\n    13, 55, 34,\n    35, 14, 56,\n    57, 36, 15,\n    16, 58, 37,\n    38, 17, 59,\n    60, 39, 18,\n    19, 61, 40,\n    41, 20, 62,\n    63,\n  ]\n};\nconst roundsDefault = 5000\n\n/**\n * Generate a random string\n * @param length Length of salt\n */\nfunction getRandomString(length: number): string {\n  var result = \"\"\n  for (let i = 0; i < length; i++) {\n    result += dictionary[randomInt(0, dictionary.length - 1)]\n  }\n  return result\n}\n\n/**\n * Normalize salt for use with hash, for example: \"$6$rounds=1234&saltsalt\" or \"$6$saltsalt\"\n * @param conf The separate parts of id, rounds, specifyRounds, and saltString\n */\nfunction normalizeSalt(conf: IConf): string {\n  const parts = [\"\", conf.id]\n  if (conf.specifyRounds || conf.rounds !== roundsDefault) {\n    parts.push(`rounds=${conf.rounds}`)\n  }\n  parts.push(conf.saltString)\n  return parts.join(\"$\")\n}\n\n/**\n * Parse salt into pieces, performs sanity checks, and returns proper\n * defaults for missing values\n * @param salt Standard salt, \"$6$rounds=1234$saltsalt\", \"$6$saltsalt\", \"$6\", \"$6$rounds=1234\", \"$6$\"\n */\nfunction parseSalt(salt?: string): IConf {\n  const roundsMin = 1000\n  const roundsMax = 999999999\n\n  const conf: IConf = {\n    id: HashType.sha512,\n    saltString: getRandomString(16),\n    rounds: roundsDefault,\n    specifyRounds: false,\n  }\n\n  if (salt) {\n    const parts = salt.split(\"$\")\n    conf.id = Number(parts[1])\n\n    if (conf.id !== HashType.sha256 && conf.id !== HashType.sha512) {\n      throw new Error(\"Only sha256 and sha512 is supported by this library\")\n    }\n\n    if (parts.length < 2 || parts.length > 4) {\n      throw new Error(\"Invalid salt string\")\n    }\n\n    if (parts.length > 2) {\n      const rounds = parts[2].match(/^rounds=(\\d*)$/)\n\n      if (rounds) {\n        // number of rounds has been specified\n        conf.rounds = Number(rounds[1])\n        conf.specifyRounds = true\n\n        if (parts[3] || parts[3] === \"\") {\n          conf.saltString = parts[3]\n        }\n      } else {\n        // default number of rounds has already been set\n        conf.saltString = parts[2]\n      }\n    }\n  }\n\n  // sanity-check rounds\n  conf.rounds =\n    conf.rounds < roundsMin\n      ? roundsMin\n      : conf.rounds > roundsMax\n        ? /* istanbul ignore next */\n        (conf.rounds = roundsMax)\n        : conf.rounds\n\n  // sanity-check saltString\n  conf.saltString = conf.saltString.substring(0, 16)\n\n  if (conf.saltString.match(\"[^./0-9A-Za-z]\")) {\n    throw new Error(\"Invalid salt string\")\n  }\n\n  return conf\n}\n\n/**\n * Steps 1-12 in the spec\n * @param plaintext\n * @param conf\n */\nfunction generateDigestA(plaintext: string, conf: IConf): Buffer {\n  const digestSize = conf.id === HashType.sha256 ? 32 : 64\n\n  // steps 1-8\n  const hashA = createHash(HashType[conf.id])\n  hashA.update(plaintext)\n  hashA.update(conf.saltString)\n\n  const hashB = createHash(HashType[conf.id])\n  hashB.update(plaintext)\n  hashB.update(conf.saltString)\n  hashB.update(plaintext)\n  const digestB = hashB.digest()\n\n  // step 9\n  const plaintextByteLength = Buffer.byteLength(plaintext)\n  for (\n    let offset = 0;\n    offset + digestSize < plaintextByteLength;\n    offset += digestSize\n  ) {\n    hashA.update(digestB)\n  }\n\n  // step 10\n  const remainder = plaintextByteLength % digestSize\n  hashA.update(digestB.slice(0, remainder))\n\n  // step 11\n  plaintextByteLength\n    .toString(2)\n    .split(\"\")\n    .reverse()\n    .forEach((num) => {\n      hashA.update(num === \"0\" ? plaintext : digestB)\n    })\n\n  // step 12\n  return hashA.digest()\n}\n\nfunction generateHash(plaintext: string, conf: IConf): string {\n  const digestSize = conf.id === HashType.sha256 ? 32 : 64\n  const hashType = HashType[conf.id]\n\n  // steps 1-12\n  const digestA = generateDigestA(plaintext, conf)\n\n  // steps 13-15\n  const plaintextByteLength = Buffer.byteLength(plaintext)\n  const hashDP = createHash(hashType)\n  for (let i = 0; i < plaintextByteLength; i++) {\n    hashDP.update(plaintext)\n  }\n  const digestDP = hashDP.digest()\n\n  // step 16a\n  const p = Buffer.alloc(plaintextByteLength)\n  for (\n    let offset = 0;\n    offset + digestSize < plaintextByteLength;\n    offset += digestSize\n  ) {\n    p.set(digestDP, offset)\n  }\n\n  // step 16b\n  const remainder = plaintextByteLength % digestSize\n  p.set(digestDP.slice(0, remainder), plaintextByteLength - remainder)\n\n  // step 17-19\n  const hashDS = createHash(hashType)\n  const step18 = 16 + digestA[0]\n  for (let i = 0; i < step18; i++) {\n    hashDS.update(conf.saltString)\n  }\n  const digestDS = hashDS.digest()\n\n  // step 20\n  const s = Buffer.alloc(conf.saltString.length)\n\n  // step 20a\n  // Isn't this step redundant? The salt string doesn't have 32 or 64 bytes. It's truncated to 16 characters\n  const saltByteLength = Buffer.byteLength(conf.saltString)\n  for (\n    let offset = 0;\n    offset + digestSize < saltByteLength;\n    offset += digestSize\n  ) {\n    /* istanbul ignore next */\n    s.set(digestDS, offset)\n  }\n\n  // step 20b\n  const saltRemainder = saltByteLength % digestSize\n  s.set(digestDS.slice(0, saltRemainder), saltByteLength - saltRemainder)\n\n  // step 21\n  const rounds = Array(conf.rounds).fill(0)\n  const digestC: Buffer = rounds.reduce((acc, curr, idx) => {\n    const hashC = createHash(hashType)\n\n    // steps b-c\n    if (idx % 2 === 0) {\n      hashC.update(acc)\n    } else {\n      hashC.update(p)\n    }\n\n    // step d\n    if (idx % 3 !== 0) {\n      hashC.update(s)\n    }\n\n    // step e\n    if (idx % 7 !== 0) {\n      hashC.update(p)\n    }\n\n    // steps f-g\n    if (idx % 2 !== 0) {\n      hashC.update(acc)\n    } else {\n      hashC.update(p)\n    }\n\n    return hashC.digest()\n  }, digestA)\n\n  // step 22\n  return base64Encode(digestC, (<any>shuffleMap)[hashType])\n}\n\nfunction base64Encode(digest: Buffer, shuffleMap: number[]): string {\n  let hash = \"\"\n  for (let idx = 0; idx < digest.length; idx += 3) {\n    const buf = Buffer.alloc(3)\n    buf[0] = digest[shuffleMap[idx]]\n    buf[1] = digest[shuffleMap[idx + 1]]\n    buf[2] = digest[shuffleMap[idx + 2]]\n\n    hash += bufferToBase64(buf)\n  }\n\n  // adjust hash length by stripping trailing zeroes induced by base64-encoding\n  return hash.slice(0, digest.length === 32 ? -1 : -2)\n}\n\n/**\n * Encode buffer to base64 using our dictionary\n * @param buf Buffer of bytes to be encoded\n */\nfunction bufferToBase64(buf: Buffer): string {\n  const first = buf[0] & parseInt(\"00111111\", 2)\n  const second =\n    ((buf[0] & parseInt(\"11000000\", 2)) >>> 6) |\n    ((buf[1] & parseInt(\"00001111\", 2)) << 2)\n  const third =\n    ((buf[1] & parseInt(\"11110000\", 2)) >>> 4) |\n    ((buf[2] & parseInt(\"00000011\", 2)) << 4)\n  const fourth = (buf[2] & parseInt(\"11111100\", 2)) >>> 2\n  return (\n    dictionary.charAt(first) +\n    dictionary.charAt(second) +\n    dictionary.charAt(third) +\n    dictionary.charAt(fourth)\n  )\n}\n\nexport class Encrypt implements Encrypting.Class {\n  createHash(plaintext: string, salt?: string | undefined): string {\n    const conf = parseSalt(salt)\n    const hash = generateHash(plaintext, conf)\n    return normalizeSalt(conf) + \"$\" + hash\n  }\n  verifyHash(plaintext: string, hash: string): boolean {\n    const salt = hash.slice(0, hash.lastIndexOf(\"$\"))\n    const computedHash = this.createHash(plaintext, salt)\n    return timingSafeEqual(\n      Buffer.from(computedHash, \"utf8\"),\n      Buffer.from(hash, \"utf8\"),\n    )\n  }\n  private encoder: TextEncoder = new TextEncoder()\n  private decoder: TextDecoder = new TextDecoder()\n  private generateKey(key: string): Promise<crypto.webcrypto.CryptoKey> {\n    return crypto.subtle.importKey('raw', this.encoder.encode(key.slice(0, 16)), { name: 'AES-GCM', length: 256 }, false, ['encrypt', 'decrypt'])\n  }\n  public async encrypt(key: string, data: string): Promise<string> {\n    const newKey: CryptoKey = await this.generateKey(key)\n    const iv: Uint8Array = crypto.getRandomValues(new Uint8Array(12))\n    const encrypted = new Uint8Array(await crypto.subtle.encrypt({ name: 'AES-GCM', iv }, newKey, this.encoder.encode(data)))\n    const combined = new Uint8Array(iv.length + encrypted.length)\n    combined.set(iv)\n    combined.set(encrypted, iv.length)\n    let result: string = ''\n    for (let i: number = 0; i < combined.length; i++) {\n      result += combined[i].toString(16).padStart(2, '0')\n    }\n    return result\n  }\n  public async decrypt(key: string, strEncrypted: string): Promise<string> {\n    const newKey: CryptoKey = await this.generateKey(key)\n    let uint8Array = new Uint8Array(strEncrypted.length / 2)\n    for (let i: number = 0; i < strEncrypted.length; i += 2) {\n      uint8Array[i / 2] = parseInt(strEncrypted.substr(i, 2), 16)\n    }\n    const iv: Uint8Array = uint8Array.slice(0, 12)\n    const data: Uint8Array = uint8Array.slice(12, uint8Array.length)\n    const decrypted: ArrayBuffer = await crypto.subtle.decrypt({ name: \"AES-GCM\", iv }, newKey, data)\n    return this.decoder.decode(decrypted)\n  }\n}", "import { Encrypt } from './classes/Encrypt'\n\nexport const encrypt: () => Encrypt = (): Encrypt => new Encrypt()", "import type { sqlite3, Database } from 'sqlite3'\nimport { verbose } from 'sqlite3'\nimport recycle_bin from './recycle_bin.sql'\nimport shared from './shared.sql'\nimport apps from './apps.sql'\nimport users_to_apps from './users_to_apps.sql'\nimport permissions from './permissions.sql'\nimport secure_sources from './secure_sources.sql'\n\nexport const database: () => Promise<Database> = async (): Promise<Database> => {\n  await new Promise(resolve => moduleEmitters.on('Paths:ready', resolve))\n  const database: Database.Config = configs.get('database')\n  const sqlite3: sqlite3 = verbose()\n  const connector = new sqlite3.Database(database.path)\n  await new Promise(resolve => connector.run(recycle_bin, resolve))\n  await new Promise(resolve => connector.run(shared, resolve))\n  await new Promise(resolve => connector.run(apps, resolve))\n  await new Promise(resolve => connector.run(users_to_apps, resolve))\n  await new Promise(resolve => connector.run(permissions, resolve))\n  await new Promise(resolve => connector.run(secure_sources, resolve))\n  return connector\n}", "CREATE TABLE IF NOT EXISTS recycle_bin (\n  id TEXT PRIMARY KEY,\n  uid INTEGER,\n  path TEXT NOT NULL,\n  date TEXT NOT NULL\n);", "CREATE TABLE IF NOT EXISTS shared (\n  id TEXT PRIMARY KEY,\n  uid INTEGER,\n  path TEXT\n);", "CREATE TABLE IF NOT EXISTS apps (\n    package_name TEXT PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    author TEXT NOT NULL,\n    extensions TEXT,\n    use_storage INTEGER,\n    use_template INTEGER\n);", "CREATE TABLE IF NOT EXISTS users_to_apps (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    uid INTEGER,\n    package_name REFERENCES apps (package_name) ON DELETE CASCADE ON UPDATE CASCADE\n);", "CREATE TABLE IF NOT EXISTS permissions (\n    id_permission INTEGER PRIMARY KEY AUTOINCREMENT,\n    package_name TEXT REFERENCES apps (package_name) ON DELETE CASCADE ON UPDATE CASCADE,\n    api TEXT NOT NULL,\n    justification TEXT NOT NULL,\n    active INTEGER NOT NULL\n);", "CREATE TABLE IF NOT EXISTS secure_sources (\n  id_source INTEGER PRIMARY KEY AUTOINCREMENT,\n  package_name TEXT REFERENCES apps (package_name) ON DELETE CASCADE ON UPDATE CASCADE,\n  type TEXT NOT NULL,\n  source TEXT NOT NULL,\n  justification TEXT NOT NULL,\n  active INTEGER DEFAULT (0)\n);", "import type internal from 'node:stream'\nimport child from 'node:child_process'\n\nexport const process = (): Process.Run => ({ title, command, args, proc }: Process.RunOptions): Promise<void> => new Promise(resolve => {\n  const TITLE = `[${title}]:`\n  const child_process = child.spawn(command, args)\n  child_process.on('close', resolve)\n  child_process.stdout.on('data', (data) => console.log(TITLE, data.toString('utf8')))\n  child_process.stderr.on('data', (data) => console.error(TITLE, data.toString('utf8')))\n  child_process.on('error', (error) => console.log(TITLE, error.message))\n  if (proc) {\n    proc(child_process.stdin)\n  }\n})\n\ndeclare global {\n  namespace Process {\n    interface RunOptions {\n      title: string\n      command: string\n      args: string[]\n      proc?: (stdin: internal.Writable) => void\n    }\n    type Run = (options: RunOptions) => Promise<void>\n  }\n}"],
  "mappings": "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",
  "names": ["process", "_", "fs", "import_node_fs", "path", "fs", "paths", "ini", "import_node_crypto", "HashType", "shuffleMap", "crypto", "database", "import_node_child_process", "process", "child"]
}
