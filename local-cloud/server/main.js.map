{
  "version": 3,
  "sources": ["../../node_modules/px.io/injectables/flags.js", "../../node_modules/px.io/injectables/main.js", "../../node_modules/px.io/injectables/main.http.js", "../../main.ts"],
  "sourcesContent": ["class Flags {\n  /**\n   * Constructor.\n   */\n  constructor() {\n    const argList = process.argv\n    this.args = {}\n    let a\n    let opt\n    let thisOpt\n    let curOpt\n    for (a = 0; a < argList.length; a++) {\n      thisOpt = argList[a].trim()\n      opt = thisOpt.replace(/^\\-+/, '')\n      if (opt === thisOpt) {\n        if (curOpt) this.args[curOpt] = opt\n        curOpt = null\n      } else {\n        curOpt = opt\n        this.args[curOpt] = true\n      }\n    }\n  }\n  /**\n   * Look for a convert argument from the command line.\n   * @param {string} name Argument name.\n   * @returns {string | boolean} Returns the value of a variable.\n   */\n  get(name) {\n    return this.args[name]\n  }\n}\nexport const flags = new Flags()", "const configsPath = './config.js'\nexport const configs = require(configsPath).configs", "export const initHttpServer = ({ onMessage = console.log } = {}) => {\n  const configPath = './config.js'\n  const { configs } = require(configPath)\n  const httpRoutersPath = './http.js'\n  const routers = require(httpRoutersPath).default\n  const express = require('express')\n  let app = express()\n  const {\n    port = (process.env.PORT ? parseInt(process.env.PORT) : 3001),\n    dev,\n    events = {},\n    middlewares = [],\n    pathsPublic,\n    engineTemplates,\n    optionsUrlencoded,\n    createServer\n  } = configs.get('HTTP') || {}\n  app.set('port', port)\n  let externalIp = null\n  if (dev && dev.showExternalIp) {\n    const interfaces = require(\"os\").networkInterfaces()\n    if (dev.interfaceNetwork) {\n      const inter = interfaces[dev.interfaceNetwork]\n      if (inter) {\n        externalIp = inter.find(item => item.family == 'IPv4').address\n      } else {\n        console.error(`\\nLa interfaz de red \"${dev.interfaceNetwork}\" no existe!.\\nSe pueden usar las siguientes interfaces:\\n${Object.keys(interfaces).join(', ')}`)\n      }\n    } else {\n      console.error('\\nNo se defini\u00F3 una interfaz de red.\\nSe pueden usar las siguientes interfaces:\\n' + Object.keys(interfaces).join(', '))\n    }\n  }\n  if (events.beforeConfig) {\n    events.beforeConfig(app)\n  }\n  if (optionsUrlencoded) {\n    app.use(express.urlencoded(optionsUrlencoded))\n  }\n  for (const middleware of middlewares) {\n    app.use(middleware)\n  }\n  if (pathsPublic) {\n    pathsPublic.forEach(({ route, dir }) => app.use(route, express.static(dir)))\n  }\n  if (engineTemplates) {\n    app.engine(engineTemplates.ext, engineTemplates.callback)\n    app.set('views', engineTemplates.dirViews)\n    app.set('view engine', engineTemplates.name)\n  }\n  if (events.afterConfig) {\n    events.afterConfig(app)\n  }\n  app.use(express.json())\n  app.use(express.text())\n  for (const router of routers) {\n    app.use(...router)\n  }\n  if (events.onError) {\n    app.use(events.onError)\n  }\n  let server\n  if (createServer) {\n    server = createServer(app)\n  }\n  if (!server) {\n    const http = require('http')\n    server = http.createServer(app)\n  }\n  server.listen(port, () => {\n    onMessage(`Servidor corriendo en: http://localhost:${port}${externalIp ? ` y http://${externalIp}:${port}` : ''}`)\n  })\n  if (events.beforeStarting) {\n    events.beforeStarting(app)\n  }\n  return { http: server, app }\n}", "import cluster from \"node:cluster\"\n\ndeclare const flags: PXIO.Flags\ndeclare const initHttpServer: PXIOServer.InitHttpServer\n\nconst multiThread = flags.get('multi-thread')\n\nif (multiThread && cluster.isPrimary) {\n  const os = require('node:os')\n  const numCPUs = os.availableParallelism()\n  console.log(`\\n\\nMaster ${process.pid} is running`, `\\n${numCPUs} workers:\\n`)\n\n  const PORTS = Array.from({ length: numCPUs }, (_, i) => 3000 + i)\n  for (const PORT of PORTS) {\n    cluster.fork({ PORT })\n  }\n} else {\n  initHttpServer({ onMessage: console.log })\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAM,QAAN,MAAY;AAAA;AAAA;AAAA;AAAA,EAIV,cAAc;AACZ,UAAM,UAAU,QAAQ;AACxB,SAAK,OAAO,CAAC;AACb,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,SAAK,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACnC,gBAAU,QAAQ,CAAC,EAAE,KAAK;AAC1B,YAAM,QAAQ,QAAQ,QAAQ,EAAE;AAChC,UAAI,QAAQ,SAAS;AACnB,YAAI;AAAQ,eAAK,KAAK,MAAM,IAAI;AAChC,iBAAS;AAAA,MACX,OAAO;AACL,iBAAS;AACT,aAAK,KAAK,MAAM,IAAI;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,MAAM;AACR,WAAO,KAAK,KAAK,IAAI;AAAA,EACvB;AACF;AACO,IAAM,QAAQ,IAAI,MAAM;;;AChC/B,IAAM,cAAc;AACb,IAAM,UAAU,QAAQ,WAAW,EAAE;;;ACDrC,IAAM,iBAAiB,CAAC,EAAE,YAAY,QAAQ,IAAI,IAAI,CAAC,MAAM;AAClE,QAAM,aAAa;AACnB,QAAM,EAAE,SAAAA,SAAQ,IAAI,QAAQ,UAAU;AACtC,QAAM,kBAAkB;AACxB,QAAM,UAAU,QAAQ,eAAe,EAAE;AACzC,QAAM,UAAU,QAAQ,SAAS;AACjC,MAAI,MAAM,QAAQ;AAClB,QAAM;AAAA,IACJ,OAAQ,QAAQ,IAAI,OAAO,SAAS,QAAQ,IAAI,IAAI,IAAI;AAAA,IACxD;AAAA,IACA,SAAS,CAAC;AAAA,IACV,cAAc,CAAC;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAIA,SAAQ,IAAI,MAAM,KAAK,CAAC;AAC5B,MAAI,IAAI,QAAQ,IAAI;AACpB,MAAI,aAAa;AACjB,MAAI,OAAO,IAAI,gBAAgB;AAC7B,UAAM,aAAa,QAAQ,IAAI,EAAE,kBAAkB;AACnD,QAAI,IAAI,kBAAkB;AACxB,YAAM,QAAQ,WAAW,IAAI,gBAAgB;AAC7C,UAAI,OAAO;AACT,qBAAa,MAAM,KAAK,UAAQ,KAAK,UAAU,MAAM,EAAE;AAAA,MACzD,OAAO;AACL,gBAAQ,MAAM;AAAA,sBAAyB,IAAI,gBAAgB;AAAA;AAAA,EAA6D,OAAO,KAAK,UAAU,EAAE,KAAK,IAAI,CAAC,EAAE;AAAA,MAC9J;AAAA,IACF,OAAO;AACL,cAAQ,MAAM,yFAAsF,OAAO,KAAK,UAAU,EAAE,KAAK,IAAI,CAAC;AAAA,IACxI;AAAA,EACF;AACA,MAAI,OAAO,cAAc;AACvB,WAAO,aAAa,GAAG;AAAA,EACzB;AACA,MAAI,mBAAmB;AACrB,QAAI,IAAI,QAAQ,WAAW,iBAAiB,CAAC;AAAA,EAC/C;AACA,aAAW,cAAc,aAAa;AACpC,QAAI,IAAI,UAAU;AAAA,EACpB;AACA,MAAI,aAAa;AACf,gBAAY,QAAQ,CAAC,EAAE,OAAO,IAAI,MAAM,IAAI,IAAI,OAAO,QAAQ,OAAO,GAAG,CAAC,CAAC;AAAA,EAC7E;AACA,MAAI,iBAAiB;AACnB,QAAI,OAAO,gBAAgB,KAAK,gBAAgB,QAAQ;AACxD,QAAI,IAAI,SAAS,gBAAgB,QAAQ;AACzC,QAAI,IAAI,eAAe,gBAAgB,IAAI;AAAA,EAC7C;AACA,MAAI,OAAO,aAAa;AACtB,WAAO,YAAY,GAAG;AAAA,EACxB;AACA,MAAI,IAAI,QAAQ,KAAK,CAAC;AACtB,MAAI,IAAI,QAAQ,KAAK,CAAC;AACtB,aAAW,UAAU,SAAS;AAC5B,QAAI,IAAI,GAAG,MAAM;AAAA,EACnB;AACA,MAAI,OAAO,SAAS;AAClB,QAAI,IAAI,OAAO,OAAO;AAAA,EACxB;AACA,MAAI;AACJ,MAAI,cAAc;AAChB,aAAS,aAAa,GAAG;AAAA,EAC3B;AACA,MAAI,CAAC,QAAQ;AACX,UAAM,OAAO,QAAQ,MAAM;AAC3B,aAAS,KAAK,aAAa,GAAG;AAAA,EAChC;AACA,SAAO,OAAO,MAAM,MAAM;AACxB,cAAU,2CAA2C,IAAI,GAAG,aAAa,aAAa,UAAU,IAAI,IAAI,KAAK,EAAE,EAAE;AAAA,EACnH,CAAC;AACD,MAAI,OAAO,gBAAgB;AACzB,WAAO,eAAe,GAAG;AAAA,EAC3B;AACA,SAAO,EAAE,MAAM,QAAQ,IAAI;AAC7B;;;AC3EA,0BAAoB;AAKpB,IAAM,cAAc,MAAM,IAAI,cAAc;AAE5C,IAAI,eAAe,oBAAAC,QAAQ,WAAW;AACpC,QAAM,KAAK,QAAQ,SAAS;AAC5B,QAAM,UAAU,GAAG,qBAAqB;AACxC,UAAQ,IAAI;AAAA;AAAA,SAAc,QAAQ,GAAG,eAAe;AAAA,EAAK,OAAO;AAAA,CAAa;AAE7E,QAAM,QAAQ,MAAM,KAAK,EAAE,QAAQ,QAAQ,GAAG,CAAC,GAAG,MAAM,MAAO,CAAC;AAChE,aAAW,QAAQ,OAAO;AACxB,wBAAAA,QAAQ,KAAK,EAAE,KAAK,CAAC;AAAA,EACvB;AACF,OAAO;AACL,iBAAe,EAAE,WAAW,QAAQ,IAAI,CAAC;AAC3C;",
  "names": ["configs", "cluster"]
}
