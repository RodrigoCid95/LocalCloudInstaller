{
  "version": 3,
  "sources": ["../../../config/index.ts", "../../../node_modules/px.io/injectables/flags.js", "../../../config/builder-connector.ts", "../../../config/http.ts", "../../../config/dev-mode.ts", "../../../config/paths.ts", "../../../config/databases.ts"],
  "sourcesContent": ["export * from './builder-connector'\nexport * from './http'\nexport * from './databases'\nexport * from './dev-mode'\nexport * from './paths'", "class Flags {\n  /**\n   * Constructor.\n   */\n  constructor() {\n    const argList = process.argv\n    this.args = {}\n    let a\n    let opt\n    let thisOpt\n    let curOpt\n    for (a = 0; a < argList.length; a++) {\n      thisOpt = argList[a].trim()\n      opt = thisOpt.replace(/^\\-+/, '')\n      if (opt === thisOpt) {\n        if (curOpt) this.args[curOpt] = opt\n        curOpt = null\n      } else {\n        curOpt = opt\n        this.args[curOpt] = true\n      }\n    }\n  }\n  /**\n   * Look for a convert argument from the command line.\n   * @param {string} name Argument name.\n   * @returns {string | boolean} Returns the value of a variable.\n   */\n  get(name) {\n    return this.args[name]\n  }\n}\nexport const flags = new Flags()", "import path from 'node:path'\n\nconst srcPath = path.resolve(__dirname, '..', 'connector')\n\nexport const builderConnector: BuilderConnector.Config = {\n  mainPath: path.join(srcPath, 'main.ts'),\n  apiPath: path.join(srcPath, 'apis.ts')\n}", "import path from 'node:path'\nimport session from 'express-session'\nimport compression from 'compression'\nimport { Liquid } from 'liquidjs'\nimport { v4 } from 'uuid'\nimport { devMode } from './dev-mode'\nimport cors from 'cors'\n\nconst middlewares = [\n  compression(),\n  session({\n    saveUninitialized: false,\n    resave: false,\n    secret: v4()\n  })\n]\n\nif (devMode.enable) {\n  middlewares.push(cors())\n}\n\nexport const HTTP: PXIOHTTP.Config = {\n  /* port: 80, */\n  optionsUrlencoded: { extended: true },\n  engineTemplates: {\n    name: 'liquid',\n    ext: 'liquid',\n    callback: (new Liquid({\n      layouts: path.resolve(__dirname, '..', 'views'),\n      extname: 'liquid'\n    })).express(),\n    dirViews: path.resolve(__dirname, '..', 'views')\n  },\n  middlewares,\n  events: {\n    onError(err, req, res, next) {\n      if (err) {\n        res.status(500).json(err)\n      } else {\n        next()\n      }\n    }\n  },\n  pathsPublic: [\n    {\n      route: '/',\n      dir: path.resolve(__dirname, '..', 'public')\n    }\n  ]\n}", "declare const flags: PXIO.Flags\n\nlet enable = false\nlet user = flags.get('user') as string\nif (user) {\n  enable = true\n}\n\nexport const devMode: DevMode.Config = { enable, user }", "import path from 'node:path'\n\ndeclare const isRelease: boolean\n\nconst system: string = path.resolve(isRelease ? '/' : '.', 'lc')\nconst systemApps: string = path.join(system, 'apps')\nconst systemApp: string = path.join(system, 'apps', ':packagename')\nconst systemDatabases: string = path.join(systemApp, 'data')\n\nexport const paths: Paths.Config = {\n  samba: '/etc/samba/smb.conf',\n  shadow: '/etc/shadow',\n  passwd: '/etc/passwd',\n  groups: '/etc/group',\n  system: {\n    path: system,\n    apps: {\n      path: systemApps,\n      app: {\n        path: systemApp,\n        public: path.join(systemApp, 'public'),\n        databases: {\n          path: systemDatabases,\n          database: path.join(systemDatabases, ':name.db')\n        }\n      }\n    },\n    database: path.join(system, 'system.db')\n  },\n  users: {\n    shared: path.join('/', 'shared'),\n    path: path.join('/', 'home'),\n    recycleBin: path.join('/', 'recycler-bin')\n  }\n}", "import { paths } from './paths'\n\nexport const database: Database.Config = {\n  path: paths.system.database\n}"],
  "mappings": "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",
  "names": ["path", "import_node_path", "compression", "session", "cors", "path", "import_node_path", "path"]
}
