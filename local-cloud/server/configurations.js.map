{
  "version": 3,
  "sources": ["../../config/index.ts", "../../node_modules/px.io/injectables/flags.js", "../../config/builder-connector.ts", "../../config/http.ts", "../../config/paths.ts", "../../config/keys.ts", "../../config/databases.ts", "../../config/dev-mode.ts"],
  "sourcesContent": ["export * from './builder-connector'\nexport * from './http'\nexport * from './databases'\nexport * from './dev-mode'\nexport * from './keys'\nexport * from './paths'", "class Flags {\n  /**\n   * Constructor.\n   */\n  constructor() {\n    const argList = process.argv\n    this.args = {}\n    let a\n    let opt\n    let thisOpt\n    let curOpt\n    for (a = 0; a < argList.length; a++) {\n      thisOpt = argList[a].trim()\n      opt = thisOpt.replace(/^\\-+/, '')\n      if (opt === thisOpt) {\n        if (curOpt) this.args[curOpt] = opt\n        curOpt = null\n      } else {\n        curOpt = opt\n        this.args[curOpt] = true\n      }\n    }\n  }\n  /**\n   * Look for a convert argument from the command line.\n   * @param {string} name Argument name.\n   * @returns {string | boolean} Returns the value of a variable.\n   */\n  get(name) {\n    return this.args[name]\n  }\n}\nexport const flags = new Flags()", "import path from 'node:path'\n\nconst srcPath = path.resolve(__dirname, '..', 'connector')\n\nexport const builderConnector: BuilderConnector.Config = {\n  mainPath: path.join(srcPath, 'main.ts'),\n  apiPath: path.join(srcPath, 'apis.ts')\n}", "import compression from 'compression'\nimport { Liquid } from 'liquidjs'\nimport cors from 'cors'\nimport { paths } from './paths'\nimport session from \"express-session\"\nimport MongoStore from \"connect-mongo\"\nimport { keys } from './keys'\n\ndeclare const isRelease: boolean\ndeclare const flags: PXIO.Flags\n\nconst middlewares = [\n  compression(),\n  session({\n    store: MongoStore.create({\n      mongoUrl: `mongodb://lc:${keys.password}@localhost:27017`,\n      dbName: '_lc'\n    }),\n    resave: false,\n    saveUninitialized: false,\n    secret: keys.secret,\n  })\n]\n\nif (!isRelease || flags.get('maintenance-mode')) {\n  middlewares.push(cors())\n}\n\nexport const HTTP: PXIOHTTP.Config = {\n  optionsUrlencoded: { extended: true },\n  engineTemplates: {\n    name: 'liquid',\n    ext: 'liquid',\n    callback: (new Liquid({\n      layouts: paths.system.clientViews,\n      extname: 'liquid'\n    })).express(),\n    dirViews: paths.system.clientViews\n  },\n  middlewares,\n  events: {\n    afterConfig(app) {\n      app.set('trust proxy', 1)\n    },\n    onError(err, _, res, next) {\n      if (err) {\n        res.status(500).json(err)\n      } else {\n        next()\n      }\n    }\n  },\n  pathsPublic: [\n    {\n      route: '/',\n      dir: paths.system.clientPublic\n    }\n  ]\n}", "import path from 'node:path'\n\nconst system = path.resolve(process.cwd(), 'lc')\n\nexport const paths: Paths.Config = {\n  samba: '/etc/samba/smb.conf',\n  shadow: '/etc/shadow',\n  passwd: '/etc/passwd',\n  groups: '/etc/group',\n  system: {\n    path: system,\n    apps: path.join(system, 'apps'),\n    appsViews: path.join(system, 'client', 'views', 'apps'),\n    storages: path.join(system, 'storages'),\n    database: path.join(system, 'system.db'),\n    clientPublic: path.resolve(system, 'client', 'public'),\n    clientViews: path.resolve(system, 'client', 'views')\n  },\n  users: {\n    shared: path.join('/', 'shared'),\n    path: path.join('/', 'home'),\n    recycleBin: path.join('/', 'recycler-bin')\n  }\n}", "import path from 'node:path'\nimport fs from 'node:fs'\nimport crypto from 'node:crypto'\n\nconst KEY_PATH = path.join(process.cwd(), 'key.pem')\nif (!fs.existsSync(KEY_PATH)) {\n  const secret = crypto.generateKeyPairSync('rsa', {\n    modulusLength: 2048,\n    publicKeyEncoding: {\n      type: 'spki',\n      format: 'pem'\n    },\n    privateKeyEncoding: {\n      type: 'pkcs8',\n      format: 'pem'\n    }\n  }).privateKey\n  fs.writeFileSync(KEY_PATH, secret, 'utf-8')\n}\nconst secret = fs.readFileSync(KEY_PATH, 'utf-8') || ''\nconst PASSWD_PASS = path.join(process.cwd(), 'mongod')\nconst password = (fs.readFileSync(PASSWD_PASS, 'utf-8') || '').slice(0, -1)\n\nexport const keys: Keys.Config = { password, secret }", "import { paths } from './paths'\n\nexport const database: Database.Config = {\n  path: paths.system.database\n}", "declare const flags: PXIO.Flags\n\nexport const devMode: DevMode.Config = {\n  enable: flags.get('maintenance-mode') as boolean,\n  user: flags.get('user') as string\n}"],
  "mappings": "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",
  "names": ["path", "import_node_path", "path", "import_node_path", "path", "fs", "secret", "crypto", "compression", "session", "MongoStore", "cors"]
}
