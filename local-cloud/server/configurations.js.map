{
  "version": 3,
  "sources": ["../../config/index.ts", "../../node_modules/px.io/injectables/flags.js", "../../node_modules/px.io/injectables/emitters.js", "../../config/builder-connector.ts", "../../config/http.ts", "../../config/paths.ts", "../../config/databases.ts", "../../config/dev-mode.ts"],
  "sourcesContent": ["export * from './builder-connector'\nexport * from './http'\nexport * from './databases'\nexport * from './dev-mode'\nexport * from './paths'", "class Flags {\n  /**\n   * Constructor.\n   */\n  constructor() {\n    const argList = process.argv\n    this.args = {}\n    let a\n    let opt\n    let thisOpt\n    let curOpt\n    for (a = 0; a < argList.length; a++) {\n      thisOpt = argList[a].trim()\n      opt = thisOpt.replace(/^\\-+/, '')\n      if (opt === thisOpt) {\n        if (curOpt) this.args[curOpt] = opt\n        curOpt = null\n      } else {\n        curOpt = opt\n        this.args[curOpt] = true\n      }\n    }\n  }\n  /**\n   * Look for a convert argument from the command line.\n   * @param {string} name Argument name.\n   * @returns {string | boolean} Returns the value of a variable.\n   */\n  get(name) {\n    return this.args[name]\n  }\n}\nexport const flags = new Flags()", "export class Emitter {\n  #CALLBACKS = {}\n  on(callback) {\n    const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16)\n    })\n    this.#CALLBACKS[uuid] = callback\n    return uuid\n  }\n  off(uuid) {\n    delete this.#CALLBACKS[uuid]\n  }\n  emit(args) {\n    const callbacks = Object.values(this.#CALLBACKS)\n    for (const callback of callbacks) {\n      callback(args)\n    }\n  }\n}\nexport class Emitters {\n  #EMITTERS = new Map()\n  on(event, callback) {\n    if (!this.#EMITTERS.has(event)) {\n      this.#EMITTERS.set(event, Emitters.createEmitter())\n    }\n    return this.#EMITTERS.get(event)?.on(callback) || ''\n  }\n  off(event, uuid) {\n    this.#EMITTERS.get(event)?.off(uuid)\n  }\n  emit(event, args) {\n    this.#EMITTERS.get(event)?.emit(args)\n  }\n}\nEmitters.createEmitter = () => {\n  return new Emitter()\n}\nexport const moduleEmitters = new Emitters()", "import path from 'node:path'\n\nconst srcPath = path.resolve(__dirname, '..', 'connector')\n\nexport const builderConnector: BuilderConnector.Config = {\n  mainPath: path.join(srcPath, 'main.ts'),\n  apiPath: path.join(srcPath, 'apis.ts')\n}", "import crypto from 'node:crypto'\nimport fs from 'node:fs'\nimport session from 'express-session'\nimport compression from 'compression'\nimport { Liquid } from 'liquidjs'\nimport cors from 'cors'\nimport { paths } from './paths'\nimport { Store } from 'express-session'\n\ndeclare const isRelease: boolean\n\nclass SessionConnector {\n  #CALLBACKS: {\n    [x: string]: any\n  }\n  constructor() {\n    this.#CALLBACKS = {}\n    process.on('message', message => {\n      const { uid, data } = message as any\n      this.#CALLBACKS[uid](data)\n      delete this.#CALLBACKS[uid]\n    })\n  }\n  async emit(event: string, ...args: any[]) {\n    const uid = crypto.randomUUID()\n    return new Promise(resolve => {\n      this.#CALLBACKS[uid] = (data: any) => resolve(data)\n      if (process.send) {\n        process.send({ uid, event, args })\n      }\n    })\n  }\n}\n\nexport class SessionStore extends Store {\n  connector: SessionConnector\n  constructor() {\n    super()\n    this.connector = new SessionConnector()\n  }\n  get(sid: any, callback: (arg0: null, arg1: any) => void) {\n    this\n      .connector\n      .emit('get', sid)\n      .then(session => callback(null, session || null))\n  }\n  set(sid: any, session: any, callback: (arg0: null) => void) {\n    this\n      .connector\n      .emit('set', sid, session)\n      .then(callback)\n  }\n  destroy(sid: any, callback: (arg0: null) => void) {\n    this\n      .connector\n      .emit('delete', sid)\n      .then(callback)\n  }\n  length(callback: (arg0: null, arg1: number) => void) {\n    this\n      .connector\n      .emit('length')\n      .then((data: any) => callback(null, data))\n  }\n  all(callback: (arg0: null, arg1: any[]) => void) {\n    this\n      .connector\n      .emit('length')\n      .then((data: any) => callback(null, data))\n  }\n  clear(callback: (arg0: null) => void) {\n    this\n      .connector\n      .emit('clear')\n      .then(callback)\n  }\n}\n\nif (!fs.existsSync('./key.pem')) {\n  const { privateKey } = crypto.generateKeyPairSync('rsa', {\n    modulusLength: 2048,\n    publicKeyEncoding: {\n      type: 'pkcs1',\n      format: 'pem'\n    },\n    privateKeyEncoding: {\n      type: 'pkcs1',\n      format: 'pem'\n    }\n  })\n  fs.writeFileSync('./key.pem', privateKey, 'utf-8')\n}\n\nconst middlewares = [\n  compression(),\n  session({\n    store: new SessionStore(),\n    secret: fs.readFileSync('./key.pem', 'utf-8'),\n    resave: false,\n    saveUninitialized: true\n  })\n]\n\nif (!isRelease || flags.get('maintenance-mode')) {\n  middlewares.push(cors())\n}\n\nexport const HTTP: PXIOHTTP.Config = {\n  optionsUrlencoded: { extended: true },\n  engineTemplates: {\n    name: 'liquid',\n    ext: 'liquid',\n    callback: (new Liquid({\n      layouts: paths.system.clientViews,\n      extname: 'liquid'\n    })).express(),\n    dirViews: paths.system.clientViews\n  },\n  middlewares,\n  events: {\n    onError(err, req, res, next) {\n      if (err) {\n        res.status(500).json(err)\n      } else {\n        next()\n      }\n    }\n  },\n  pathsPublic: [\n    {\n      route: '/',\n      dir: paths.system.clientPublic\n    }\n  ]\n}", "import path from 'node:path'\n\nconst system = path.resolve(process.cwd(), 'lc')\n\nexport const paths: Paths.Config = {\n  samba: '/etc/samba/smb.conf',\n  shadow: '/etc/shadow',\n  passwd: '/etc/passwd',\n  groups: '/etc/group',\n  system: {\n    path: system,\n    apps: path.join(system, 'apps'),\n    appsViews: path.join(system, 'client', 'views', 'apps'),\n    storages: path.join(system, 'storages'),\n    database: path.join(system, 'system.db'),\n    clientPublic: path.resolve(system, 'client', 'public'),\n    clientViews: path.resolve(system, 'client', 'views')\n  },\n  users: {\n    shared: path.join('/', 'shared'),\n    path: path.join('/', 'home'),\n    recycleBin: path.join('/', 'recycler-bin')\n  }\n}", "import { paths } from './paths'\n\nexport const database: Database.Config = {\n  path: paths.system.database\n}", "export const devMode: DevMode.Config = {\n  enable: flags.get('maintenance-mode') as boolean,\n  user: flags.get('user') as string\n}"],
  "mappings": "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",
  "names": ["path", "import_node_path", "path", "import_express_session", "crypto", "session", "fs", "compression", "cors"]
}
