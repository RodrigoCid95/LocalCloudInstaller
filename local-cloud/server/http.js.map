{
  "version": 3,
  "sources": ["../../node_modules/px.io/mods/http.ts"],
  "sourcesContent": ["import express from 'express'\n\ninterface Middlewares {\n  before?: any[]\n  after?: any[]\n}\n\ninterface Route {\n  methods: string[]\n  path: string\n  method: any\n  middlewares?: Middlewares\n}\n\ninterface Routes {\n  [x: string]: Route\n}\n\nconst httpControllersPath = './httpControllers.js'\nconst httpControllers = require(httpControllersPath)\nconst routers: any[] = []\nconst controllersName = Object.keys(httpControllers)\nfor (const controllerName of controllersName) {\n  const Controller = httpControllers[controllerName]\n  if (Controller.prototype) {\n    let namespace = undefined\n    if (Controller.$namespace) {\n      namespace = Controller.$namespace\n      delete Controller.$namespace\n    }\n    let beforeMiddlewares: any[] = []\n    if (Controller.$beforeMiddlewares) {\n      beforeMiddlewares = Controller.$beforeMiddlewares\n    }\n    let afterMiddlewares: any[] = []\n    if (Controller.$afterMiddlewares) {\n      afterMiddlewares = Controller.$afterMiddlewares\n    }\n    let $routes: Routes = {}\n    if (Controller.prototype.$routes) {\n      $routes = Controller.prototype.$routes\n      delete Controller.prototype.$routes\n    }\n    const controller = new Controller()\n    const router = express.Router()\n    for (const [path, route] of Object.entries($routes)) {\n      for (const [method, { callback, middlewares }] of Object.entries(route)) {\n        let { before = [], after = [] } = middlewares\n        before = [...beforeMiddlewares, ...before].map(mid => (typeof mid === 'string' ? controller[mid] : mid).bind(controller))\n        after = [...after, ...afterMiddlewares].map(mid => (typeof mid === 'string' ? controller[mid] : mid).bind(controller))\n        const mids = [...before, callback.bind(controller), ...after]\n        router[method](path, ...mids)\n      }\n    }\n    const r: any[] = [router]\n    if (namespace) {\n      r.unshift(namespace[0] === '/' ? namespace : `/${namespace}`)\n    }\n    routers.push(r)\n  }\n}\n\nexport default routers"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AAkBpB,IAAM,sBAAsB;AAC5B,IAAM,kBAAkB,QAAQ,mBAAmB;AACnD,IAAM,UAAiB,CAAC;AACxB,IAAM,kBAAkB,OAAO,KAAK,eAAe;AACnD,WAAW,kBAAkB,iBAAiB;AAC5C,QAAM,aAAa,gBAAgB,cAAc;AACjD,MAAI,WAAW,WAAW;AACxB,QAAI,YAAY;AAChB,QAAI,WAAW,YAAY;AACzB,kBAAY,WAAW;AACvB,aAAO,WAAW;AAAA,IACpB;AACA,QAAI,oBAA2B,CAAC;AAChC,QAAI,WAAW,oBAAoB;AACjC,0BAAoB,WAAW;AAAA,IACjC;AACA,QAAI,mBAA0B,CAAC;AAC/B,QAAI,WAAW,mBAAmB;AAChC,yBAAmB,WAAW;AAAA,IAChC;AACA,QAAI,UAAkB,CAAC;AACvB,QAAI,WAAW,UAAU,SAAS;AAChC,gBAAU,WAAW,UAAU;AAC/B,aAAO,WAAW,UAAU;AAAA,IAC9B;AACA,UAAM,aAAa,IAAI,WAAW;AAClC,UAAM,SAAS,eAAAA,QAAQ,OAAO;AAC9B,eAAW,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,OAAO,GAAG;AACnD,iBAAW,CAAC,QAAQ,EAAE,UAAU,YAAY,CAAC,KAAK,OAAO,QAAQ,KAAK,GAAG;AACvE,YAAI,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,EAAE,IAAI;AAClC,iBAAS,CAAC,GAAG,mBAAmB,GAAG,MAAM,EAAE,IAAI,UAAQ,OAAO,QAAQ,WAAW,WAAW,GAAG,IAAI,KAAK,KAAK,UAAU,CAAC;AACxH,gBAAQ,CAAC,GAAG,OAAO,GAAG,gBAAgB,EAAE,IAAI,UAAQ,OAAO,QAAQ,WAAW,WAAW,GAAG,IAAI,KAAK,KAAK,UAAU,CAAC;AACrH,cAAM,OAAO,CAAC,GAAG,QAAQ,SAAS,KAAK,UAAU,GAAG,GAAG,KAAK;AAC5D,eAAO,MAAM,EAAE,MAAM,GAAG,IAAI;AAAA,MAC9B;AAAA,IACF;AACA,UAAM,IAAW,CAAC,MAAM;AACxB,QAAI,WAAW;AACb,QAAE,QAAQ,UAAU,CAAC,MAAM,MAAM,YAAY,IAAI,SAAS,EAAE;AAAA,IAC9D;AACA,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF;AAEA,IAAO,eAAQ;",
  "names": ["express"]
}
