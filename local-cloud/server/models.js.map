{
  "version": 3,
  "sources": ["../../models/index.ts", "../../node_modules/px.io/injectables/models.js", "../../node_modules/px.io/injectables/emitters.js", "../../models/apps.ts", "../../models/builder.ts", "../../models/dev-mode.ts", "../../models/fs.ts", "../../models/shared.ts", "../../models/permissions.ts", "../../models/recycle-bin.ts", "../../models/sources.ts", "../../models/storages.ts", "../../models/users.ts"],
  "sourcesContent": ["export * from './apps'\nexport * from './builder'\nexport * from './dev-mode'\nexport * from './fs'\nexport * from './shared'\nexport * from './permissions'\nexport * from './recycle-bin'\nexport * from './sources'\nexport * from './storages'\nexport * from './users'", "const libsPath = './libs.js'\nexport const libraries = require(libsPath).libraries\nexport function Library(nameLib) {\n  return (target, propertyKey) => {\n    Object.defineProperty(target, propertyKey, {\n      get() {\n        return libraries.get(nameLib)\n      }\n    })\n  }\n}", "export class Emitter {\n  #CALLBACKS = {}\n  on(callback) {\n    const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16)\n    })\n    this.#CALLBACKS[uuid] = callback\n    return uuid\n  }\n  off(uuid) {\n    delete this.#CALLBACKS[uuid]\n  }\n  emit(args) {\n    const callbacks = Object.values(this.#CALLBACKS)\n    for (const callback of callbacks) {\n      callback(args)\n    }\n  }\n}\nexport class Emitters {\n  #EMITTERS = new Map()\n  on(event, callback) {\n    if (!this.#EMITTERS.has(event)) {\n      this.#EMITTERS.set(event, Emitters.createEmitter())\n    }\n    return this.#EMITTERS.get(event)?.on(callback) || ''\n  }\n  off(event, uuid) {\n    this.#EMITTERS.get(event)?.off(uuid)\n  }\n  emit(event, args) {\n    this.#EMITTERS.get(event)?.emit(args)\n  }\n}\nEmitters.createEmitter = () => {\n  return new Emitter()\n}\nexport const moduleEmitters = new Emitters()", "import type { Collection, Db } from 'mongodb'\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport crypto from 'node:crypto'\nimport unzipper from 'unzipper'\n\ndeclare const Library: PXIO.LibraryDecorator\n\nexport class AppsModel {\n  @Library('mongo') private db: Db\n  @Library('paths') public paths: Paths.Class\n  private get appsCollection(): Collection<Apps.App> {\n    return this.db.collection<Apps.App>('apps')\n  }\n  private get u2aCollection() {\n    return this.db.collection('users_to_apps')\n  }\n  private isJSON = (text: string): boolean => /^[\\],:{}\\s]*$/.test(text.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))\n  public async getAppsByUID(uid: Users.User['uid']): Promise<Apps.App[]> {\n    const appList: Apps.App[] = []\n    const assignments = await this.u2aCollection.find({ uid }).toArray()\n    for (const assignment of assignments) {\n      const app = await this.appsCollection.findOne({ package_name: assignment.package_name })\n      if (app) {\n        appList.push({\n          package_name: app.package_name,\n          title: app.title,\n          description: app.description,\n          author: app.author,\n          useTemplate: app.useTemplate\n        })\n      }\n    }\n    return appList\n  }\n  public async getApps(): Promise<Apps.App[]> {\n    const results = await this.appsCollection\n      .find({})\n      .toArray()\n    return results.map(({ package_name, title, description, author, useTemplate }) => ({ package_name, title, description, author, useTemplate }))\n  }\n  public getAppByPackageName(package_name: string): Promise<Apps.App | null> {\n    return this.appsCollection.findOne({ package_name })\n  }\n  public async install(package_name: string, data: Buffer, update: boolean = false): Promise<InstallError | true> {\n    if (update) {\n      await this.uninstall(package_name, true)\n    }\n    const tempDir = path.join(this.paths.apps, 'temp', crypto.randomUUID())\n    fs.mkdirSync(tempDir, { recursive: true })\n    await unzipper.Open\n      .buffer(data)\n      .then(d => d.extract({ path: tempDir }))\n    let useTemplate = false\n    let template = '{% layout \"layout.liquid\" %}'\n    const headPath = path.join(tempDir, 'head.html')\n    if (fs.existsSync(headPath)) {\n      useTemplate = true\n      const headContent = fs.readFileSync(headPath, 'utf8')\n      template += `{% block head %}${headContent}{% endblock %}`\n    }\n    const bodyPath = path.join(tempDir, 'body.html')\n    if (fs.existsSync(bodyPath)) {\n      useTemplate = true\n      const bodyContent = fs.readFileSync(bodyPath, 'utf8')\n      template += `{% block body %}${bodyContent}{% endblock %}`\n    }\n    const manifestPath = path.join(tempDir, 'manifest.json')\n    if (!fs.existsSync(manifestPath)) {\n      fs.rmSync(tempDir, { recursive: true, force: true })\n      return {\n        code: 'manifest-not-exist',\n        message: 'El paquete de instalaci\u00F3n no cuenta con un archivo manifest.json'\n      }\n    }\n    let manifestContent = fs.readFileSync(manifestPath, 'utf-8')\n    if (this.isJSON(manifestContent)) {\n      manifestContent = JSON.parse(manifestContent)\n    } else {\n      fs.rmSync(tempDir, { recursive: true, force: true })\n      return {\n        code: 'manifest-invalid',\n        message: 'El archivo manifest.json no es v\u00E1lido.'\n      }\n    }\n    const manifestKeys = Object.keys(manifestContent)\n    if (!manifestKeys.includes('title')) {\n      fs.rmSync(tempDir, { recursive: true, force: true })\n      return {\n        code: 'manifest-title-required',\n        message: 'El archivo manifest.json no contiene un t\u00EDtulo.'\n      }\n    }\n    if (!manifestKeys.includes('author')) {\n      fs.rmSync(tempDir, { recursive: true, force: true })\n      return {\n        code: 'manifest-author-required',\n        message: 'El archivo manifest.json no contiene un autor.'\n      }\n    }\n    const { title, description = 'Sin descripci\u00F3n', author, permissions: permissionList = {}, sources = {}, extensions = [], 'use-storage': useStorage = false } = manifestContent as any\n    const permissions: Apps.New['permissions'] = Object.keys(permissionList).map(api => ({\n      api,\n      justification: permissionList[api]\n    }))\n    await this.appsCollection.insertOne({\n      package_name,\n      title,\n      description,\n      author,\n      extensions: extensions.join('|'),\n      useStorage,\n      useTemplate\n    })\n    for (const permission of permissions) {\n      await this.db.collection('permissions').insertOne({\n        package_name,\n        api: permission.api,\n        justification: permission.justification || 'Sin justificaci\u00F3n.',\n        active: true\n      })\n    }\n    for (const [name, srcs] of Object.entries(sources)) {\n      if (['image', 'media', 'object', 'script', 'style', 'worker', 'font', 'connect'].includes(name)) {\n        for (const src of srcs as any[]) {\n          await this.db.collection('secure_sources').insertOne({\n            package_name,\n            type: name,\n            source: src.source,\n            justification: src.justification || 'Sin justificaci\u00F3n.',\n            active: true\n          })\n        }\n      }\n    }\n    fs.cpSync(path.join(tempDir, 'code'), this.paths.getApp(package_name), { recursive: true })\n    const storagePath = this.paths.getAppGlobalStorage(package_name)\n    if (useStorage) {\n      fs.mkdirSync(storagePath, { recursive: true })\n    } else {\n      if (fs.existsSync(storagePath)) {\n        fs.rmSync(storagePath, { recursive: true })\n      }\n    }\n    const templatePath = path.join(this.paths.appsTemplates, `${package_name.replace(/\\./g, '-')}.liquid`)\n    if (useTemplate) {\n      if (!fs.existsSync(this.paths.appsTemplates)) {\n        fs.mkdirSync(this.paths.appsTemplates, { recursive: true })\n      }\n      fs.writeFileSync(templatePath, template, 'utf8')\n    } else {\n      if (fs.existsSync(templatePath)) {\n        fs.rmSync(templatePath, { recursive: true })\n      }\n    }\n    fs.rmSync(tempDir, { recursive: true, force: true })\n    return true\n  }\n  public async uninstall(package_name: string, skipAssignments: boolean = false): Promise<void> {\n    await this.db.collection('secure_sources').deleteMany({ package_name })\n    await this.db.collection('permissions').deleteMany({ package_name })\n    if (!skipAssignments) {\n      await this.u2aCollection.deleteMany({ package_name })\n    }\n    await this.appsCollection.deleteMany({ package_name })\n    if (!skipAssignments) {\n      const appStorage = this.paths.getAppStorage(package_name)\n      if (fs.existsSync(appStorage)) {\n        fs.rmSync(appStorage, { force: true, recursive: true })\n      }\n    }\n    const appPath = this.paths.getApp(package_name)\n    fs.rmSync(appPath, { recursive: true, force: true })\n    const templatePath = path.join(this.paths.appsTemplates, `${package_name.replace(/\\./g, '-')}.liquid`)\n    if (fs.existsSync(templatePath)) {\n      fs.rmSync(templatePath, { recursive: true, force: true })\n    }\n  }\n}\n\ninterface InstallError {\n  code: string\n  message: string\n}", "declare const Library: PXIO.LibraryDecorator\n\nexport class BuilderModel {\n  get privateAPIList() {\n    return this.builder.privateAPIList\n  }\n  get dashAPIList() {\n    return this.builder.dashAPIList\n  }\n  get publicAPIList() {\n    return this.builder.publicAPIList\n  }\n  @Library('builder') private builder: BuilderConnector.Class\n  build(opts?: BuildOptions): string {\n    if (opts) {\n      return this.builder.build(opts)\n    }\n    return this.builder.build({ token: '', key: '' })\n  }\n}\n\ninterface BuildOptions {\n  token: string\n  key: string\n  apis: string[]\n}", "import type { Db } from 'mongodb'\nimport fs from 'node:fs'\nimport crypto from 'node:crypto'\n\ndeclare const Library: PXIO.LibraryDecorator\n\nexport class DevModeModel {\n  @Library('devMode') public devMode: DevMode.Class\n  @Library('mongo') private db: Db\n  @Library('paths') paths: Paths.Class\n  public getUser(): Users.User | undefined {\n    const PASSWD_CONTENT = fs.readFileSync(this.paths.passwd, 'utf8')\n    const PASSWD_LINES = PASSWD_CONTENT.split('\\n').filter(line => line !== '')\n    const USER_LIST = PASSWD_LINES.map(line => line.split(':'))\n    const result = USER_LIST.find(us => us[0] === this.devMode.user)\n    if (result) {\n      const name = result[0]\n      const [full_name = '', email = '', phone = ''] = result[4].split(',')\n      return {\n        uid: Number(result[2]),\n        name,\n        full_name,\n        email,\n        phone\n      }\n    }\n  }\n  public async getApps(uid: Users.User['uid']): Promise<LocalCloud.SessionData['apps']> {\n    const apps = await this.db\n      .collection<Apps.App>('apps')\n      .find({ uid })\n      .toArray()\n      .then(results => results.map(({ package_name, title, description, author, useTemplate }) => ({ package_name, title, description, author, useTemplate })))\n    const appList: LocalCloud.SessionData['apps'] = {}\n    for (const app of apps) {\n      const sessionApp: LocalCloud.SessionApp = {\n        token: crypto.randomUUID(),\n        ...app,\n        secureSources: [],\n        permissions: []\n      }\n      appList[app.package_name] = sessionApp\n    }\n    return appList\n  }\n}", "import fs from 'node:fs'\nimport path from 'node:path'\n\ndeclare const Library: PXIO.LibraryDecorator\n\nexport class FileSystemModel {\n  @Library('paths') private paths: Paths.Class\n  @Library('process') private run: Process.Run\n  public resolveFileOrDirectory(result: string | boolean): boolean | FileSystem.ItemInfo[] | FileSystem.ItemInfo {\n    if (typeof result === 'boolean') {\n      return false\n    }\n    const stat = fs.statSync(result)\n    if (stat.isDirectory()) {\n      const items = fs.readdirSync(result)\n      return items.map(item => {\n        const stat = fs.statSync(path.join(result, item))\n        return {\n          name: item,\n          size: stat.size,\n          lastModification: stat.mtime,\n          creationDate: stat.birthtime,\n          isFile: !stat.isDirectory()\n        }\n      })\n    }\n    return {\n      name: path.basename(result),\n      size: stat.size,\n      lastModification: stat.mtime,\n      creationDate: stat.birthtime,\n      isFile: !stat.isDirectory()\n    }\n  }\n  public lsSharedDirectory(path: string[]): boolean | FileSystem.ItemInfo[] | FileSystem.ItemInfo {\n    const sharedPath = this.paths.resolveSharedPath({ segments: path })\n    return this.resolveFileOrDirectory(sharedPath)\n  }\n  public lsUserDirectory(name: Users.User['name'], path: string[]): boolean | FileSystem.ItemInfo[] | FileSystem.ItemInfo {\n    const userPath = this.paths.resolveUserPath({ segments: path, name })\n    return this.resolveFileOrDirectory(userPath)\n  }\n  public resolveSharedFile(pathFile: string[]): string | boolean {\n    const result = this.paths.resolveSharedPath({ segments: pathFile })\n    if (typeof result === 'boolean') {\n      return false\n    }\n    const stat = fs.statSync(result)\n    if (stat.isDirectory()) {\n      return false\n    }\n    return result\n  }\n  public resolveUserFile(name: Users.User['name'], pathFile: string[]): string | boolean {\n    const result = this.paths.resolveUserPath({ name, segments: pathFile })\n    if (typeof result === 'boolean') {\n      return false\n    }\n    const stat = fs.statSync(result)\n    if (stat.isDirectory()) {\n      return false\n    }\n    return result\n  }\n  public async writeToShared(segments: string[], data: Buffer): Promise<void> {\n    const filePath = this.paths.resolveSharedPath({ segments, verify: false }) as string\n    fs.writeFileSync(filePath, data, { encoding: 'utf-8' })\n    await this.run({\n      title: 'Set Permission To Shared Item',\n      command: 'chown',\n      args: [':lc', filePath]\n    })\n  }\n  public async writeToUser(name: Users.User['name'], segments: string[], data: Buffer): Promise<void> {\n    const filePath = this.paths.resolveUserPath({ name, segments, verify: false }) as string\n    fs.writeFileSync(filePath, data, { encoding: 'utf-8' })\n    await this.run({\n      title: 'Set Owner To User',\n      command: 'chown',\n      args: [name, filePath]\n    })\n  }\n  public async mkdirToShared(segments: string[]): Promise<void> {\n    const dirPath = this.paths.resolveSharedPath({ segments, verify: false }) as string\n    if (!fs.existsSync(dirPath)) {\n      fs.mkdirSync(dirPath, { recursive: true })\n      await this.run({\n        title: 'Set Permission To Shared Dir',\n        command: 'chown',\n        args: ['-R', 'lc', dirPath]\n      })\n    }\n  }\n  public async mkdirToUser(name: Users.User['name'], segments: string[]): Promise<void> {\n    const dirPath = this.paths.resolveUserPath({ name, segments, verify: false }) as string\n    if (!fs.existsSync(dirPath)) {\n      fs.mkdirSync(dirPath, { recursive: true })\n      await this.run({\n        title: 'Set Permission To User Dir',\n        command: 'chown',\n        args: [name, dirPath]\n      })\n    }\n  }\n  public rmToShared(segments: string[]) {\n    const dirPath = this.paths.resolveSharedPath({ segments })\n    if (typeof dirPath === 'string') {\n      fs.rmSync(dirPath, { force: true, recursive: true })\n    }\n  }\n  public rmToUser(name: Users.User['name'], segments: string[]) {\n    const dirPath = this.paths.resolveUserPath({ name, segments })\n    if (typeof dirPath === 'string') {\n      fs.rmSync(dirPath, { force: true, recursive: true })\n    }\n  }\n  public resolvePath(name: Users.User['name'], pth: string[], verify: boolean): string | boolean {\n    const segments = [...pth]\n    const base = segments.shift()\n    let result: string | boolean = ''\n    if (base === 'shared') {\n      result = this.paths.resolveSharedPath({ segments, verify })\n    } else {\n      result = this.paths.resolveUserPath({ name, segments, verify })\n    }\n    return result\n  }\n  public async copy(name: string, origin: string[], dest: string[], move: boolean = false): Promise<void> {\n    const originPath = this.resolvePath(name, origin, true)\n    if (typeof originPath === 'boolean') {\n      return\n    }\n    const newDest = [...dest, origin[origin.length - 1]]\n    let destPath = this.resolvePath(name, newDest, false) as string\n    const statOrigin = fs.statSync(originPath)\n    const isFile = statOrigin.isFile()\n    let dp = ''\n    if (isFile) {\n      while (fs.existsSync(destPath)) {\n        const segments = destPath.split('.')\n        const ext = segments.pop()\n        destPath = `${segments.join('.')}-copia.${ext}`\n      }\n      fs.copyFileSync(originPath, destPath)\n      dp = destPath\n    } else {\n      while (fs.existsSync(destPath)) {\n        destPath += ' - copia'\n      }\n      fs.cpSync(originPath, destPath, { recursive: true })\n      dp = destPath\n    }\n    if (dp.split(this.paths.shared).length === 1) {\n      await this.run({\n        title: 'Set Permission To User Dir',\n        command: 'chown',\n        args: [name, dp]\n      })\n    } else {\n      await this.run({\n        title: 'Set Permission To Shared Item',\n        command: 'chown',\n        args: [':lc', dp]\n      })\n    }\n    if (move) {\n      fs.rmSync(originPath, { recursive: true, force: true })\n    }\n  }\n  public rename(uuid: string, path: string[], newName: string) {\n    const oldPath = this.resolvePath(uuid, path, true)\n    if (typeof oldPath === 'boolean') {\n      return\n    }\n    const segments = [...path]\n    segments.pop()\n    let newPath = this.resolvePath(uuid, [...segments, newName], true)\n    if (typeof newPath === 'string') {\n      return\n    }\n    newPath = this.resolvePath(uuid, [...segments, newName], false) as string\n    fs.renameSync(oldPath, newPath)\n  }\n}", "import type { Collection, Db } from 'mongodb'\nimport { ObjectId } from 'mongodb'\n\ndeclare const Library: PXIO.LibraryDecorator\n\nexport class SharedModel {\n  @Library('mongo') private db: Db\n  private get collection(): Collection<Omit<Shared.Shared, 'id'>> {\n    return this.db.collection<Omit<Shared.Shared, 'id'>>('shared')\n  }\n  public async find(query: Partial<Shared.Shared> = {}): Promise<Shared.Shared[]> {\n    const filter = {}\n    const keys = Object.keys(query)\n    for (const key of keys) {\n      if (key === 'id') {\n        filter['_id'] = new ObjectId(query[key])\n      } else {\n        filter[key] = query[key]\n      }\n    }\n    const results = await this.collection.find(filter).toArray()\n    return results.map(item => ({\n      id: item._id.toString(),\n      uid: item.uid,\n      path: item.path\n    }))\n  }\n  public async create(shared: Shared.New): Promise<void> {\n    await this.collection.insertOne(shared)\n  }\n  public async delete(id: Shared.Shared['id']): Promise<void> {\n    await this.collection.deleteOne({ _id: new ObjectId(id) })\n  }\n}", "import type { Collection, Db, Filter } from 'mongodb'\nimport { ObjectId } from 'mongodb'\n\ndeclare const Library: PXIO.LibraryDecorator\n\nexport class PermissionsModel {\n  @Library('mongo') private db: Db\n  private get collection(): Collection<Permissions.Permission> {\n    return this.db.collection<Permissions.Permission>('permissions')\n  }\n  public async find(query: Filter<Permissions.Permission> = {}): Promise<Permissions.Permission[]> {\n    return this.collection\n      .find(query)\n      .toArray()\n      .then(results => results.map(({ _id, package_name, api, justification, active }) => ({ id: _id.toString(), package_name, api, justification, active })))\n  }\n  public async setActive(id: Permissions.Permission['id'], active: Permissions.Permission['active']): Promise<void> {\n    await this.collection.updateOne({ _id: new ObjectId(id) }, { $set: { active } })\n  }\n}", "import type { Collection, Db } from 'mongodb'\nimport { ObjectId } from 'mongodb'\nimport fs from 'node:fs'\n\ndeclare const Library: PXIO.LibraryDecorator\n\nexport class RecycleBinModel {\n  @Library('paths') private paths: Paths.Class\n  @Library('mongo') private db: Db\n  private get collection(): Collection<Omit<RecycleBin.Item, 'id'>> {\n    return this.db.collection<Omit<RecycleBin.Item, 'id'>>('recycle_bin')\n  }\n  public async moveToRecycleBin(user: Users.User, strPath: string, path: string[]) {\n    const date = new Date()\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    const hours = date.getHours()\n    const minutes = date.getMinutes()\n    const res = await this.collection.insertOne({\n      uid: user.uid,\n      path,\n      date: `${year.toString()}/${month < 10 ? `0${month.toString()}` : month.toString()}/${day < 10 ? `0${day.toString()}` : day.toString()} ${hours < 10 ? `0${hours.toString()}` : hours.toString()}:${minutes < 10 ? `0${minutes.toString()}` : minutes.toString()}`,\n    })\n    const id = res.insertedId.toString()\n    const newPath = this.paths.getRecycleBinItem(user.name, id)\n    fs.cpSync(strPath, newPath, { recursive: true })\n    fs.rmSync(strPath, { recursive: true, force: true })\n  }\n  public async findByUID(uid: Users.User['uid']): Promise<RecycleBin.Item[]> {\n    const results = await this.collection.find({ uid }).toArray()\n    return results.map(item => ({\n      id: item._id.toString(),\n      uid: item.uid,\n      path: item.path,\n      date: item.date\n    }))\n  }\n  public async findByID(id: RecycleBin.Item['id']): Promise<RecycleBin.Item | null> {\n    const result = await this.collection\n      .findOne({ _id: new ObjectId(id) })\n    if (result) {\n      return {\n        id: result._id.toString(),\n        uid: result.uid,\n        path: result.path,\n        date: result.date\n      }\n    }\n    return null\n  }\n  public async restore(name: Users.User['name'], id: RecycleBin.Item['id'], path: string) {\n    let newPath = path\n    const oldPath = this.paths.getRecycleBinItem(name, id)\n    const stat = fs.statSync(oldPath)\n    const isFile = stat.isFile()\n    if (isFile) {\n      while (fs.existsSync(newPath)) {\n        const segments = newPath.split('.')\n        const ext = segments.pop()\n        newPath = `${segments.join('.')}-restaurado.${ext}`\n      }\n    } else {\n      while (fs.existsSync(newPath)) {\n        newPath += '-restaurado'\n      }\n    }\n    fs.cpSync(oldPath, newPath, { recursive: true })\n    fs.rmSync(oldPath, { recursive: true, force: true })\n    await this.collection.deleteOne({ _id: new ObjectId(id) })\n  }\n  private async deleteFromDB(uid: Users.User['uid'], id?: RecycleBin.Item['id']): Promise<void> {\n    const query = { uid }\n    if (id) {\n      query['_id'] = new ObjectId(id)\n    }\n    await this.collection.deleteMany(query)\n  }\n  public async delete(user: Users.User, id: RecycleBin.Item['id']) {\n    const path = this.paths.getRecycleBinItem(user.name, id)\n    fs.rmSync(path, { recursive: true, force: true })\n    await this.deleteFromDB(user.uid, id)\n  }\n  public async clean(user: Users.User) {\n    const path = this.paths.getRecycleBin(user.name)\n    fs.rmSync(path, { recursive: true, force: true })\n    await this.deleteFromDB(user.uid)\n  }\n}", "import type { Db, Collection } from 'mongodb'\nimport { ObjectId } from 'mongodb'\n\ndeclare const Library: PXIO.LibraryDecorator\n\nexport class SourcesModel {\n  @Library('mongo') private db: Db\n  private get collection(): Collection<Omit<SecureSources.Source, 'id'>> {\n    return this.db.collection<Omit<SecureSources.Source, 'id'>>('secure_sources')\n  }\n  public async find(query: Partial<SecureSources.Source> = {}): Promise<SecureSources.Source[]> {\n    const filter = {}\n    const keys = Object.keys(query)\n    for (const key of keys) {\n      if (key === 'id') {\n        filter['_id'] = new ObjectId(query[key])\n      } else {\n        filter[key] = query[key]\n      }\n    }\n    const results = await this.collection.find(filter).toArray()\n    return results.map(result => ({\n      id: result._id.toString(),\n      package_name: result.package_name,\n      type: result.type,\n      source: result.source,\n      justification: result.justification,\n      active: result.active\n    }))\n  }\n  public async setActive(id: SecureSources.Source['id'], active: boolean): Promise<void> {\n    await this.collection.updateOne({ _id: new ObjectId(id) }, { $set: { active } })\n  }\n}", "import fs from 'node:fs'\nimport path from 'node:path'\n\ndeclare const Library: PXIO.LibraryDecorator\n\nexport class StorageModel {\n  @Library('paths') private paths: Paths.Class\n  resolveTempGlobalItem(item: string) {\n    const path = this.paths.getAppGlobalStorageItem({ packageName: \"app-temp\", item })\n    return path\n  }\n  resolveTempUserItem(item: string) {\n    const path = this.paths.getAppUserStorageItem({ item, packageName: \"app-temp\", user: \"user-temp\" })\n    return path\n  }\n  resolveGlobalItem(packageName: string, item: string) {\n    const path = this.paths.getAppGlobalStorageItem({ packageName, item })\n    if (fs.existsSync(path)) {\n      return path\n    }\n  }\n  resolveUserItem(packageName: string, name: string, item: string) {\n    const path = this.paths.getAppUserStorageItem({ packageName, user: name, item })\n    if (fs.existsSync(path)) {\n      return path\n    }\n  }\n  loadStorage(path: string) {\n    if (fs.existsSync(path)) {\n      let contentStorage = fs.readFileSync(path, 'utf8') || '{}'\n      contentStorage = JSON.parse(contentStorage)\n      return contentStorage\n    }\n    return null\n  }\n  writeContent(pathStorage: string, content: any) {\n    const dirName = path.dirname(pathStorage)\n    if (!fs.existsSync(dirName)) {\n      fs.mkdirSync(dirName, { recursive: true })\n    }\n    let contentStorage = 'null'\n    if (content) {\n      contentStorage = JSON.stringify(content)\n    }\n    fs.writeFileSync(pathStorage, contentStorage, 'utf8')\n  }\n}", "import type { Db } from 'mongodb'\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport ini from 'ini'\n\ndeclare const Library: PXIO.LibraryDecorator\n\nexport class UsersModel {\n  @Library('paths') paths: Paths.Class\n  @Library('encrypt') encrypt: Encrypting.Class\n  @Library('mongo') private db: Db\n  @Library('process') private run: Process.Run\n  private get u2aCollection() {\n    return this.db.collection('users_to_apps')\n  }\n  private loadConfig(name?: Users.User['name']) {\n    const SMB_CONFIG = fs.readFileSync(this.paths.samba, 'utf8')\n    const smbConfig = ini.parse(SMB_CONFIG)\n    if (name) {\n      return smbConfig[name]\n    }\n    return smbConfig\n  }\n  private async writeConfig(config: UserConfig): Promise<void> {\n    const smbStrConfig = ini.stringify(config)\n    fs.writeFileSync(this.paths.samba, smbStrConfig, 'utf8')\n    await this.run({\n      title: 'Restart Samba',\n      command: '/etc/init.d/smbd',\n      args: ['restart']\n    })\n  }\n  private async setConfig(name: string, config: UserConfig): Promise<void> {\n    const smbConfig = this.loadConfig()\n    smbConfig[name] = {}\n    const entries = Object.entries(config)\n    for (const [key, value] of entries) {\n      smbConfig[name][key] = value\n    }\n    await this.writeConfig(smbConfig)\n  }\n  private loadGroup(): Group | undefined {\n    const GROUP_CONTENT = fs.readFileSync(this.paths.groups, 'utf8')\n    const GROUP_LINES = GROUP_CONTENT.split('\\n').filter(line => line !== '')\n    const GROUPS = GROUP_LINES\n      .map(line => line.split(':'))\n      .map(line => ({\n        id: Number(line[2]),\n        name: line[0],\n        users: (line[3]).split(',')\n      }))\n    return GROUPS.filter(group => group.name === 'lc')[0]\n  }\n  private loadUserList(filter: boolean = false): Users.User[] {\n    const { users } = this.loadGroup() as Group\n    const PASSWD_CONTENT = fs.readFileSync(this.paths.passwd, 'utf8')\n    const PASSWD_LINES = PASSWD_CONTENT.split('\\n').filter(line => line !== '')\n    const USER_LIST = PASSWD_LINES.map(line => {\n      const user = line.split(':')\n      const [full_name = '', email = '', phone = ''] = user[4].split(',')\n      return {\n        uid: Number(user[2]),\n        name: user[0],\n        full_name,\n        email,\n        phone\n      }\n    })\n    if (filter) {\n      return USER_LIST.filter(user => users.includes(user.name))\n    }\n    return USER_LIST\n  }\n  private loadHash(name: Users.User['name']): string {\n    const SHADOW_CONTENT = fs.readFileSync(this.paths.shadow, 'utf8')\n    const SHADOW_LINES = SHADOW_CONTENT.split('\\n').filter(line => line !== '')\n    const [[_, hash]] = SHADOW_LINES\n      .map(line => line.split(':'))\n      .filter(shadow => shadow[0] === name)\n    return hash\n  }\n  public async createUser(user: Users.New): Promise<void> {\n    const { name, password, full_name = '', email = '', phone = '' } = user\n    console.log(`---------------------------- Create User: ${name} ----------------------------`)\n    const PASSWORD = this.encrypt.createHash(password)\n    await this.run({\n      title: 'Create User',\n      command: '/usr/sbin/useradd',\n      args: ['-p', PASSWORD, '-m', '-G', 'lc', '-s', '/bin/bash', '-c', [full_name, email, phone].join(','), name]\n    })\n    await this.run({\n      title: 'Set New User In Samba',\n      command: 'smbpasswd',\n      args: ['-a', name],\n      proc(stdin) {\n        stdin.write(`${password}\\n`)\n        stdin.write(`${password}\\n`)\n        stdin.end()\n      }\n    })\n    await this.setConfig(name, {\n      comment: `Directorio de ${name}`,\n      path: `/home/${name}`,\n      browsable: 'yes',\n      writable: 'yes',\n      'guest ok': 'no',\n      'valid users': name,\n      'write list': name,\n      'read only': 'yes'\n    })\n    console.log('------------------------------ End Create User ----------------------------------')\n  }\n  public getUser(name: Users.User['name']): Users.User {\n    const USER_LIST = this.loadUserList(true)\n    const [user] = USER_LIST.filter(user => user.name === name)\n    return user\n  }\n  public getUserByUID(uid: Users.User['uid']): Users.User {\n    const USER_LIST = this.loadUserList(true)\n    const [user] = USER_LIST.filter(user => user.uid === uid)\n    return user\n  }\n  public getUsers(): Users.User[] {\n    const USER_LIST = this.loadUserList(true)\n    return USER_LIST\n  }\n  public verifyPassword(name: Users.User['name'], password: string): boolean {\n    const hash = this.loadHash(name)\n    return this.encrypt.verifyHash(password, hash)\n  }\n  public async updateUser(name: Users.User['name'], user: Omit<Omit<Users.User, 'name'>, 'uid'>): Promise<void> {\n    const { full_name = '', email = '', phone = '' } = user\n    await this.run({\n      title: `Update User ${name}`,\n      command: '/usr/sbin/usermod',\n      args: ['-c', [full_name, email, phone].join(','), name]\n    })\n  }\n  public async updatePassword(name: Users.User['name'], password: string): Promise<void> {\n    console.log(`----------------------------Update password: ${name}----------------------------`)\n    await this.run({\n      title: `Update Password To User ${name}`,\n      command: 'passwd',\n      args: [name],\n      proc(stdin) {\n        stdin.write(`${password}\\n`)\n        stdin.write(`${password}\\n`)\n        stdin.end()\n      }\n    })\n    await this.run({\n      title: `Delete ${name} In Samba`,\n      command: 'smbpasswd',\n      args: ['-x', name]\n    })\n    await this.run({\n      title: `Set User ${name} In Samba`,\n      command: 'smbpasswd',\n      args: ['-a', name],\n      proc(stdin) {\n        stdin.write(`${password}\\n`)\n        stdin.write(`${password}\\n`)\n        stdin.end()\n      }\n    })\n    console.log('----------------------------End update password --------------------------------')\n  }\n  public async deleteUser(name: Users.User['name']) {\n    console.log(`---------------------------- Delete User: ${name} ----------------------------`)\n    await this.run({\n      title: `Delete User ${name} In Samba`,\n      command: 'smbpasswd',\n      args: ['-x', name]\n    })\n    await this.run({\n      title: `Kill proccess Of ${name}`,\n      command: 'pkill',\n      args: ['-u', name]\n    })\n    await this.run({\n      title: `Delete User ${name}`,\n      command: '/usr/sbin/userdel',\n      args: ['-r', name]\n    })\n    const smbConfig = this.loadConfig()\n    delete smbConfig[name]\n    await this.writeConfig(smbConfig)\n    const items = fs.readdirSync(this.paths.storages)\n    for (const item of items) {\n      const userStorage = path.join(item, name)\n      if (fs.existsSync(userStorage)) {\n        fs.rmSync(userStorage, { recursive: true, force: true })\n      }\n    }\n    console.log('------------------------------ End Delete User ----------------------------------')\n  }\n  public async assignApp(uid: Users.User['uid'], package_name: string): Promise<void> {\n    await this.u2aCollection.insertOne({ uid, package_name })\n  }\n  public async unassignApp(uid: Users.User['uid'], package_name: string): Promise<void> {\n    await this.u2aCollection.deleteMany({ uid, package_name })\n  }\n  public getUserConfig(name: Users.User['name']): Profile.Config {\n    const userHomePath = path.join(this.paths.getUser(name), '.lc')\n    if (fs.existsSync(userHomePath)) {\n      const configContent = fs.readFileSync(userHomePath, 'utf8')\n      return JSON.parse(configContent || '{}')\n    }\n    return {}\n  }\n  public setUserConfig(name: Users.User['name'], config: Profile.Config): void {\n    const userHomePath = path.join(this.paths.getUser(name), '.lc')\n    const configContent = JSON.stringify(config)\n    fs.writeFileSync(userHomePath, configContent, 'utf8')\n  }\n}\n\ninterface Group {\n  id: number\n  name: string\n  users: string[]\n}\ninterface UserConfig {\n  [x: string]: any\n}"],
  "mappings": "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",
  "names": ["path", "crypto", "fs", "unzipper", "import_node_fs", "import_node_crypto", "fs", "crypto", "import_node_fs", "import_node_path", "fs", "stat", "path", "import_mongodb", "import_mongodb", "import_node_fs", "path", "fs", "import_mongodb", "import_node_fs", "import_node_path", "path", "fs", "import_node_fs", "import_node_path", "fs", "ini", "user", "path"]
}
